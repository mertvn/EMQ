@page "/Game"
@using Microsoft.Extensions.Logging
@using System.Timers
@inject IJSRuntime _jsRuntime
@inject ILogger<Game> _logger

<h3>Game</h3>

@* <button class="btn btn-primary" @onclick="SwapSongs">Swap Songs</button> *@

<div id="gameGrid">
    <div class="videoWrapper" style="position: relative; float: left; background: dimgrey;">
        <div class="videoPlayer" style="visibility: @Bool2Vis(videoPlayerVisibility)">
            <video src="@_currentSong?.Data" id="video" width="720px" height="400px" autoplay="autoplay" style="background: black;">
            </video>
            @* TODO: Make this work *@
            @* @if (videoPlayerVisibility) *@
            @* { *@
            @*     <p style="position: absolute; top: 40%; right: 40%; font-size: xx-large; color: white; z-index: -1">Sound only</p>  *@
            @* } *@
        </div>

        @if (!videoPlayerVisibility)
        {
@* TODO: properly center this *@
            <div id="countdownDiv" style="position: absolute; top: 40%; right: 45%; font-size: xxx-large; color: white;">
                @_countdown
            </div>
        }
    </div>
    <div style="float:right;">
        @foreach (var debug in _debug)
        {
            <p style="padding: 0; margin:0;">@debug</p>
        }
    </div>
</div>

@code {

    class Song
    {
        public string Name { get; set; }

        public string Url { get; set; }

        public string Data { get; set; }
    }

    public string Bool2Vis(bool b) => b ? "visible" : "hidden";

    private static int guessTime = 7;

    private static int resultsTime = 3;

    private bool videoPlayerVisibility { get; set; } = false;

    private static int phase; // 0: guess 1: results

    private static int elapsedSeconds;
    private static int _countdown = guessTime;
    private readonly Timer _timer = new();

    private readonly HttpClient _client = new();

    private int preloadAmount = 1;

    private readonly List<string> _debug = new() { "" };

    private List<Song?> _songs = new()
    {
    // new Song { Name = "dummySong0", Data = "", Url = "" },
    // new Song { Name = "dummySong1", Data = "", Url = "" }
    };

    private int _index;

    private Song? _currentSong;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _debug.Add("init");
        var songs = new List<Song?>
        {
            new()
            {
                Name = "burst",
                Url = "https://files.catbox.moe/b4b5wl.mp3",
                Data = ""
            },
            new()
            {
                Name = "shuffle",
                Url = "https://files.catbox.moe/8sxb1b.webm",
                Data = ""
            },
            new()
            {
                Name = "inukami",
                Url = "https://files.catbox.moe/kk3ndn.mp3",
                Data = ""
            },
            new()
            {
                Name = "gintama",
                Url = "https://files.catbox.moe/ftvkr9.mp3",
                Data = ""
            },
            new()
            {
                Name = "lovehina",
                Url = "https://files.catbox.moe/pwuc9j.mp3",
                Data = ""
            },
            new()
            {
                Name = "akunohana",
                Url = "https://files.catbox.moe/dupkk6.webm",
                Data = ""
            },
            new()
            {
                Name = "fsn",
                Url = "https://files.catbox.moe/d1boaz.webm",
                Data = ""
            },
            new()
            {
                Name = "h2o",
                Url = "https://files.catbox.moe/tf82bf.webm",
                Data = ""
            },
        };
        _songs = songs;

        SetTimer();
        await ResetToStart();
    }

    private void SetTimer()
    {
        _timer.Stop();
        _timer.Elapsed -= OnTimedEvent;

        _timer.Interval = TimeSpan.FromSeconds(1).TotalMilliseconds;
        _timer.Elapsed += OnTimedEvent;
        _timer.AutoReset = true;
        _timer.Start();
    }

    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        switch (phase)
        {
            case 0:
                _countdown = guessTime - elapsedSeconds;
                break;
            case 1:
                _countdown = resultsTime - elapsedSeconds;
                break;
        }

        StateHasChanged();
        elapsedSeconds += 1;

        if (_countdown < 0)
        {
            elapsedSeconds = 0;

            if (phase == 0)
            {
                phase = 1;

                _countdown = resultsTime - elapsedSeconds;
                videoPlayerVisibility = true;
                StateHasChanged();
            }
            else if (phase == 1)
            {
                phase = 0;

                _countdown = guessTime - elapsedSeconds;
                videoPlayerVisibility = false;
                StateHasChanged();

                await SwapSongs();
            }

    // SetTimer();
        }
    }

    private async Task SwapSongs()
    {
        if (_index + 1 < _songs.Count)
        {
            _index += 1;
            _debug.Add("index: " + _index);

    // _currentSong = _songs.ElementAtOrDefault(_index);
            _currentSong = _songs[_index];

            if (string.IsNullOrEmpty(_currentSong!.Data)) // todo put this on a timer instead?
            {
                await LoadMissingSong(_index);
            }

            await Preload(_index, preloadAmount);
        }
        else
        {
            await ResetToStart();
        }
    }

    private async Task LoadMissingSong(int index)
    {
    // todo prevent double downloads
        _debug.Add("Missing song: " + _songs[index]!.Name);
        Song dledSong = await DlSong(_songs[index]!);
        _currentSong = dledSong;
        StateHasChanged();
    }

    private async Task ResetToStart()
    {
        _index = -1;

        await SwapSongs();
        await Preload(_index);
        StateHasChanged();
    }

    private async Task Preload(int index, int amount = 1) // todo take song as param?
    {
        for (int i = 1; i <= amount; i++)
        {
            if (index + i < _songs.Count)
            {
                Song song = await DlSong(_songs[index + i]!);
                _songs[index + i] = song;
                _debug.Add($"{song.Name} is ready");
            }
            else
            {
                _logger.LogWarning("no song to preload");
            }
        }
    }

    private async Task<Song> DlSong(Song song)
    {
        _debug.Add($"downloading {song.Name}");
        string data = await _jsRuntime.InvokeAsync<string>("fetchObjectUrl", song.Url);

        var ret = new Song
        {
            Name = song.Name,
            Url = song.Url,
            Data = data
        };

        return ret;
    }

}
