@page "/LibraryPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@inject HttpClient _client
@inject ILogger<GuessInputComponent> _logger
@inject ClientUtils _clientUtils

<h3>Library</h3>

<p>Welcome to EMQ Library. Here you can contribute new song links to the game. Please read the upload criteria first. You also need to be logged in.</p>

<button class="btn btn-primary" type="button" @onclick="@(() => ShowUploadCriteria = !ShowUploadCriteria)" style="margin: 5px;">
    @UiHelpers.Bool2Text(ShowUploadCriteria, "Hide upload criteria", "Show upload criteria")
</button>
<div style="display: @UiHelpers.Bool2Display(ShowUploadCriteria)" id="collapseUploadCriteria">
    <p>Please only submit links matching the following criteria:</p>
    <ul>
        <li>Game size/short version if there is one.</li>
        <li>.mp3 and .webm formats are preferred, however we also accept .ogg and .mp4 currently.</li>
        <li>Uploaded to <a href="https://catbox.moe/">Catbox.</a> </li>
        <li>No excess silence or unrelated content at the start or end.</li>
        <li>No unofficial stuff.</li>
        <li>
            Videos should be of reasonable size and quality:
            <ul>
                <li>Ideally 720p resolution or less.</li>
                <li>Ideally between 24-30 FPS.</li>
                <li>Ideally between 1000-2000 kbps average bitrate.</li>
                <li>No subtitles.</li>
                <li>No "fake video"s (videos with a still picture).</li>
            </ul>
        </li>
    </ul>
</div>

<Blazorise.Tabs SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Blazorise.Tab Name="TabAutocompleteMst">Search by VN</Blazorise.Tab>
        <Blazorise.Tab Name="TabAutocompleteA">Search by artist</Blazorise.Tab>
    </Items>
    <Content>
        <Blazorise.TabPanel Name="TabAutocompleteMst">
            @* todo FreeTyping should be false after the artist autocomplete changes *@
            <GuessInputComponent Placeholder="Enter VN title here"
                                 FreeTyping="true"
                                 IsDisabled="false"
                                 IsQuizPage="false"
                                 @bind-Guess="@selectedMusicSourceTitle"
                                 Callback="SelectedResultChangedMst">
            </GuessInputComponent>
        </Blazorise.TabPanel>
        <Blazorise.TabPanel Name="TabAutocompleteA">
            <AutocompleteAComponent Placeholder="Enter artist name here"
                                    FreeTyping="true"
                                    IsDisabled="false"
                                    IsQuizPage="false"
                                    @bind-Guess="@selectedArtistId"
                                    Callback="SelectedResultChangedA">
            </AutocompleteAComponent>
        </Blazorise.TabPanel>
    </Content>
</Blazorise.Tabs>

<div class="songs d-flex flex-row flex-wrap" style="max-width: 1500px">
    @foreach (var song in CurrentSongs)
    {
        // Console.WriteLine(JsonSerializer.Serialize(song, Utils.JsoIndented));
        <div class="song card" style="margin: 16px; width: 300px; min-height:200px;">
            <SongInfoCardComponent song="@song"/>
            <div style="padding: 16px">
                <div>
                    Video link:
                    @if (song.Links.Any(x => x.IsVideo))
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>✘</span>
                    }
                </div>
                <div>
                    Sound link:
                    @if (song.Links.Any(x => !x.IsVideo))
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>✘</span>
                    }
                </div>

                @if (!(song.Links.Any(x => x.IsVideo) && song.Links.Any(x => !x.IsVideo)))
                {
                    <button class="btn btn-primary" style="margin-top: 5px" @onclick="@(() => ChangeActiveSong(song.Id))" disabled="@(ClientState.Session == null)">
                        @UiHelpers.Bool2Text(ActiveSongId == song.Id, "Hide form", "Show form")
                    </button>
                    if (song.Id == ActiveSongId)
                    {
                        <EditForm Model="@_addSongLinkModel" OnValidSubmit="@(() => SubmitSongUrl(song.Id, _addSongLinkModel.Url))">
                            <DataAnnotationsValidator/>

                            <div>
                                <label for="songUrl">Add link: </label>
                                <InputText id="songUrl" type="text" @bind-Value="_addSongLinkModel.Url"/>
                                <ValidationMessage For="@(() => _addSongLinkModel.Url)"/>
                            </div>
                            <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Submit" disabled="@(ClientState.Session == null)"/>
                        </EditForm>
                    }
                }
            </div>

        </div>
    }

    @if (!CurrentSongs.Any())
    {
        @NoSongsText
    }

</div>

<br/>
<div>
    <ReviewQueueComponent @ref="_reviewQueueComponent"></ReviewQueueComponent>
</div>
