@page "/LibraryPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Quiz.Entities.Concrete
@inject HttpClient _client
@inject ILogger<GuessInputComponent> _logger
@inject ClientUtils _clientUtils

<CascadingValue Value="@this" IsFixed="true">

<h3>Library</h3>

<p>Welcome to EMQ Library. Here you can contribute new song links to the game. Please read the upload rules first. You also need to be logged in as a registered user.</p>

<details>
    <summary>Upload rules</summary>
    <p>If you don&#39;t follow a rule containing the verb MUST, your upload will be rejected on sight. </p>
    <p>If you don&#39;t follow a rule containing the verb SHOULD, your upload will not be rejected on sight, but it might be replaced by a better version in the future.</p>
    <p>&quot;Old&quot;/console-only VNs may be exempt from some of these rules.</p>
    <h5>General</h5>
    <ol>
        <li>Uploads SHOULD be the game size/short version if there is one. If different length versions exists throughout the game, you SHOULD use the one most commonly used. If both are equally used, you SHOULD use the shorter one.</li>
        <li>MUST be from an official, untranslated release.</li>
        <li>SHOULD NOT have any unrelated content or excess silence at the start or end (MUST NOT have more than 2 seconds of silence at the start).</li>
        <li>Overall bitrate of the file MUST NOT exceed 3400 kbps.</li>
    </ol>
    <h5>Video</h5>
    <ol>
        <li>The video file MUST be .webm, and you SHOULD use VP9 over VP8.</li>
        <li>Resolution SHOULD be 720p or less. If the native game resolution is higher than 720p you may upload it as is, but downscaling to around 720p, while maintaining the aspect ratio of the source video, is preferred. </li>
        <li>Framerate SHOULD be between 23.976-30 FPS. </li>
        <li>Average bitrate of the video stream SHOULD NOT exceed 2500 kbps. </li>
        <li>There SHOULD NOT be any subtitles on the video. </li>
        <li>MUST NOT be a &quot;fake video&quot; (video with a still picture). </li>
        <li>If you are recording your screen, your mouse cursor MUST NOT be visible at any point.</li>
    </ol>
    <h5>Audio</h5>
    <ol>
        <li>You MUST use .mp3 or .ogg for sound-only files. You SHOULD use .mp3 over .ogg. For audio inside .webm, you SHOULD use .opus over .ogg.</li>
        <li>If transcoding from a lossless source, you MUST use a bitrate between 192 and 320 kbps (192 kbps is preferred). In general, refrain from doing lossy -&gt; lossy transcodes. If you have to do a lossy -&gt; lossy transcode, you MUST use a bitrate of 320 kbps.</li>
        <li>The mean volume SHOULD be around -15dB. The maximum volume SHOULD be under -0.5dB.</li>
        <li>If a song contains dialogue in the middle of it, you MUST keep the dialogue. If a song contains dialogue before the music starts or after the music ends, you MUST crop the dialogue away. </li>
    </ol>
</details>

@{
    // todo? move
    bool isModerator = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Moderator);
    bool hasImportSongLinkPerms = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.UploadSongLink);
}

@if (hasImportSongLinkPerms)
{
    <details>
        <summary>Batch uploader</summary>
        @if (ClientState.ServerStats.IsServerReadOnly)
        {
            <span>Server is in read-only mode.</span>
        }
        else if (ClientState.ServerStats.IsSubmissionDisabled)
        {
            <span>Submissions are currently disabled.</span>
        }

        <UploadBatchComponent></UploadBatchComponent>

    </details>
}

<details>
    <summary>VNDB staff notes parser</summary>
    <VndbStaffNotesParserComponent></VndbStaffNotesParserComponent>
</details>

<div style="border: 1px solid #ddd; padding: 5px">
    <Blazorise.Tabs @ref="@TabsComponent" SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Blazorise.Tab Name="TabAutocompleteMst">Search by VN</Blazorise.Tab>
            <Blazorise.Tab Name="TabAutocompleteA">Search by artist</Blazorise.Tab>
            <Blazorise.Tab Name="TabAutocompleteMt">Search by song title</Blazorise.Tab>
            <Blazorise.Tab Name="TabVndbAdvsearch">Search by VNDB search</Blazorise.Tab>
            <Blazorise.Tab Name="TabMyList">My list</Blazorise.Tab>
            <Blazorise.Tab Name="TabStats">Stats</Blazorise.Tab>
        </Items>
        <Content>
            <Blazorise.TabPanel Name="TabAutocompleteMst">
                @* todo FreeTyping should be false after the artist autocomplete changes *@
                <GuessInputComponent Placeholder="Enter VN title here"
                                     FreeTyping="true"
                                     IsDisabled="false"
                                     IsQuizPage="false"
                                     @bind-Guess="@selectedMusicSourceTitle"
                                     Callback="SelectedResultChangedMst">
                </GuessInputComponent>
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabAutocompleteA">
                <AutocompleteAComponent Placeholder="Enter artist name here"
                                        FreeTyping="true"
                                        IsDisabled="false"
                                        IsQuizPage="false"
                                        @bind-Guess="@selectedArtist"
                                        Callback="SelectedResultChangedA">
                </AutocompleteAComponent>
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabAutocompleteMt">
                <AutocompleteMtComponent Placeholder="Enter song title here"
                                        FreeTyping="true"
                                        IsDisabled="false"
                                        IsQuizPage="false"
                                        @bind-Guess="@selectedMusicTitle"
                                        Callback="SelectedResultChangedMt">
                </AutocompleteMtComponent>
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabVndbAdvsearch">
                <p>Enter either full VNDB search URL or just the f parameter. Only VN search is supported at the moment.</p>
                <p>Example: "https://vndb.org/v?q=&ch=&f=023gjaN3830X1o&s=j4w" or "023gjaN3830X1o" </p>
                <p>Important: Add a Staff->Role=Vocals filter on VNDB to search faster and less wastefully. Example: "https://vndb.org/v?q=&ch=&f=0280HN385wsongs-".</p>
                <input @bind="VndbAdvsearchStr" type="text" name="VndbAdvsearchStr" style="margin: 5px; width: 700px;"/><br/>
                <button type="button" id="ButtonFetchByVndbAdvsearch" class="btn btn-primary" style="margin: 5px" @onclick="OnclickButtonFetchByVndbAdvsearchStr">
                    Fetch songs
                </button>
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabMyList">
                @if (ClientState.VndbInfo.Labels != null)
                {
                   @* todo stats *@
                    <button type="button" id="ButtonFetchMyList" class="btn btn-primary" style="margin: 5px" @onclick="OnclickButtonFetchMyList">
                        Fetch vocal songs from my list
                    </button>
                }
                else
                {
                    <p>Your VNDB info is not set.</p>
                }
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabStats">
                <Blazorise.Tabs SelectedTab="@_selectedTabStats" SelectedTabChanged="@OnSelectedTabChangedStats">
                    <Items>
                        <Blazorise.Tab Name="TabAll">All</Blazorise.Tab>
                        <Blazorise.Tab Name="TabVocals">Vocals</Blazorise.Tab>
                        <Blazorise.Tab Name="TabBGM">BGM</Blazorise.Tab>
                    </Items>
                    <Content>
                        <Blazorise.TabPanel Name="TabAll">
                            <LibraryStatsComponent Mode="SongSourceSongTypeMode.All"></LibraryStatsComponent>
                        </Blazorise.TabPanel>
                        <Blazorise.TabPanel Name="TabVocals">
                            <LibraryStatsComponent Mode="SongSourceSongTypeMode.Vocals"></LibraryStatsComponent>
                        </Blazorise.TabPanel>
                        <Blazorise.TabPanel Name="TabBGM">
                            <LibraryStatsComponent Mode="SongSourceSongTypeMode.BGM"></LibraryStatsComponent>
                        </Blazorise.TabPanel>
                    </Content>
                </Blazorise.Tabs>
            </Blazorise.TabPanel>
        </Content>
    </Blazorise.Tabs>

    <div id="songsWrapper" style="border: 1px solid #ddd;">
        <div>
            <select id="SongSelectionKind" style="margin: 5px" @oninput="OnLibrarySongFilterChanged">
                @foreach (LibrarySongFilterKind librarySongFilter in Enum.GetValues<LibrarySongFilterKind>())
                {
                    <option value="@librarySongFilter">@librarySongFilter.GetDescription()</option>
                }
            </select>
            <label for="SongSelectionKind">Link filter</label>
            <br/>
        </div>

        @{
            var bgms = CurrentSongs.Where(x => x.Sources.Any(y => y.SongTypes.Any(z => z == SongSourceSongType.BGM))).ToList();
            var tabs = new Dictionary<string, List<Song>>();
            // var grouped = bgms
            //     .GroupBy(x => x.Sources.SelectMany(y => y.Links.Where(z => z.Type == SongSourceLinkType.MusicBrainz).Select(z => z.Url)))
            //     .First();

            // todo don't show releases that are not what's entered in the input box?
            var releases = bgms.SelectMany(x =>
                x.Sources.SelectMany(y =>
                    y.Links.Where(z =>
                        z.Type == SongSourceLinkType.MusicBrainzRelease))).DistinctBy(x => x.Url);

            // var releases = bgms.SelectMany(x => x.MusicBrainzReleases).Distinct();

            foreach (var release in releases)
            {
                var releaseString = release.Name.ToString();
                if (!tabs.ContainsKey(releaseString))
                {
                    tabs[releaseString] = new List<Song>();
                }

                foreach (Song bgm in bgms)
                {
                    // var asdf1 = bgm.Sources.SelectMany(y => y.Links).Where(z => z.Type == SongSourceLinkType.MusicBrainzRelease).Select(a => a.Url);
                    // if (asdf1.Contains(release))
                    // {
                    //     tabs[releaseString].Add(bgm);
                    // }

                    var songReleases = bgm.Sources.SelectMany(y => y.Links.Where(a => a.Type == SongSourceLinkType.MusicBrainzRelease).Select(z => z.Url)).Distinct();
                    // var songReleases = bgm.MusicBrainzReleases;
                    if (songReleases.Contains(release.Url))
                    {
                        tabs[releaseString].Add(bgm);
                    }
                }
            }
        }

        @* not sure how, but LazyReload is faster than LazyLoad for this *@
        <Blazorise.Tabs @ref="TabsComponentVndb" SelectedTab="@_selectedTabVndb" SelectedTabChanged="@OnSelectedTabChangedVndb" RenderMode="Blazorise.TabsRenderMode.LazyReload">
            <Items>
                <Blazorise.Tab Name="TabVNDB">VNDB</Blazorise.Tab>
                @* <Blazorise.Tab Name="TabMusicBrainz">MusicBrainz</Blazorise.Tab> *@
                @foreach ((string key, _) in tabs)
                {
                    <Blazorise.Tab @key="@key" Name="@key">@key</Blazorise.Tab>
                }
            </Items>
            <Content>
                <Blazorise.TabPanel Name="TabVNDB">
                    <SongInfoCardWrapperComponent
                        CurrentSongs="@CurrentSongs.Except(bgms)"
                        LibrarySongFilter="@LibrarySongFilter"
                        NoSongsText="@NoSongsText"
                        IsLibraryPage="true">
                    </SongInfoCardWrapperComponent>
                </Blazorise.TabPanel>
                @foreach ((string key, List<Song> value) in tabs)
                {
                    <Blazorise.TabPanel @key="@key" Name="@key">
                        <SongInfoCardWrapperComponent
                            CurrentSongs="value"
                            LibrarySongFilter="@LibrarySongFilter"
                            NoSongsText="@NoSongsText"
                            IsLibraryPage="true">
                        </SongInfoCardWrapperComponent>
                    </Blazorise.TabPanel>
                }
                @* <Blazorise.TabPanel Name="TabMusicBrainz"> *@
                @*     @if (true) *@
                @*     { *@
                @*     } *@
                @* </Blazorise.TabPanel> *@
            </Content>
        </Blazorise.Tabs>

    </div>
</div>

<br/>
<div id="reviewQueueContainer" style="border: 1px solid #ddd; padding: 5px">
    <h4 style="font-size: 1.2rem">Review Queue</h4>
    <ReviewQueueComponent @ref="_reviewQueueComponent"></ReviewQueueComponent>
</div>

</CascadingValue>

<br/>
<br/>
