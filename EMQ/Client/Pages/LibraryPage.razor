@page "/LibraryPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core
@using EMQ.Shared.Library.Entities.Concrete.Dto.Request
@using EMQ.Shared.Quiz.Entities.Concrete
@using System.ComponentModel.DataAnnotations
@using EMQ.Shared.Core.UI
@inject HttpClient _client
@inject ILogger<GuessInputComponent> _logger
@inject ClientUtils _clientUtils

<h3>Library</h3>

<p>Welcome to EMQ Library. Here you can contribute new song links to the game. Please read the upload criteria first. You also need to be logged in.</p>

<button class="btn btn-primary" type="button" @onclick="@(() => ShowUploadCriteria = !ShowUploadCriteria)" style="margin: 5px;">
    @UiHelpers.Bool2Text(ShowUploadCriteria, "Hide upload criteria", "Show upload criteria")
</button>
<div style="display: @UiHelpers.Bool2Display(ShowUploadCriteria)" id="collapseUploadCriteria">
    <p>Please only submit links matching the following criteria:</p>
    <ul>
        <li>Game size/short version if there is one.</li>
        <li>.mp3 and .webm formats are preferred, however we also accept .ogg and .mp4 currently.</li>
        <li>Uploaded to <a href="https://catbox.moe/">Catbox.</a> </li>
        <li>No excess silence or unrelated content at the start or end.</li>
        <li>
            Videos should be of reasonable size and quality:
            <ul>
                <li>Ideally 720p resolution or less.</li>
                <li>Ideally between 24-30 FPS.</li>
                <li>Ideally between 1000-2000 kbps average bitrate.</li>
                <li>No subtitles.</li>
            </ul>
        </li>
    </ul>
</div>

<Autocomplete @ref="AutocompleteComponent"
              @onkeypress="Onkeypress"
              TItem="string"
              TValue="string"
              Data="@currentDataSource"
              ReadData="@OnHandleReadData"
              TextField="@((item) => item)"
              ValueField="@((item) => item)"
              Placeholder="Enter VN title here"
              FreeTyping="true"
              MinLength="1"
              Debounce="true"
              DebounceInterval="20"
              MaxMenuHeight="340px"
              AutoPreSelect="false"
              AutoSelectFirstItem="false"
              CustomFilter="CustomFilter"
              SelectedValueChanged="SelectedValueChanged">
</Autocomplete>

<div class="songs d-flex flex-row flex-wrap" style="max-width: 1600px">
    @foreach (var song in CurrentSongs)
    {
        // Console.WriteLine(JsonSerializer.Serialize(song, Utils.JsoIndented));
        <div class="song card" style="margin: 16px; min-width:200px; max-width: 222px; min-height:200px;">
            <SongInfoCardComponent song="@song"/>
            <div style="padding: 16px">
                <div>
                    Video link:
                    @if (song.Links.Any(x => x.IsVideo))
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>✘</span>
                    }
                </div>
                <div>
                    Sound link:
                    @if (song.Links.Any(x => !x.IsVideo))
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>✘</span>
                    }
                </div>

                @if (!(song.Links.Any(x => x.IsVideo) && song.Links.Any(x => !x.IsVideo)))
                {
                    <button class="btn btn-primary" style="margin-top: 5px" @onclick="@(() => ChangeActiveSong(song.Id))" disabled="@(ClientState.Session == null)">
                        @UiHelpers.Bool2Text(ActiveSongId == song.Id, "Hide form", "Show form")
                    </button>
                    if (song.Id == ActiveSongId)
                    {
                        <EditForm Model="@_addSongLinkModel" OnValidSubmit="@(() => SubmitSongUrl(song.Id, _addSongLinkModel.Url))">
                            <DataAnnotationsValidator/>

                            <div>
                                <label for="songUrl">Add link: </label>
                                <InputText id="songUrl" type="text" @bind-Value="_addSongLinkModel.Url"/>
                                <ValidationMessage For="@(() => _addSongLinkModel.Url)"/>
                            </div>
                            <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Submit" disabled="@(ClientState.Session == null)"/>
                        </EditForm>
                    }
                }
            </div>

        </div>
    }

    @if (!CurrentSongs.Any())
    {
        @NoSongsText
    }

</div>

<br/>
<div>
    <ReviewQueueComponent @ref="_reviewQueueComponent"></ReviewQueueComponent>
</div>

@code {

    public class AddSongLinkModel
    {
        [Required]
        [RegularExpression(RegexPatterns.SongLinkUrlRegex, ErrorMessage = "Invalid Url")]
        public string Url { get; set; } = "";
    }

    private AddSongLinkModel _addSongLinkModel = new();

    private string[] AutocompleteData { get; set; } = Array.Empty<string>();

    private ReviewQueueComponent? _reviewQueueComponent { get; set; }

    public string? selectedMusicSourceTitle { get; set; }

    public List<Song> CurrentSongs { get; set; } = new();

    public string NoSongsText { get; set; } = "";

    public bool ShowUploadCriteria { get; set; }

    public IEnumerable<string> currentDataSource = Array.Empty<string>();

    public Autocomplete<string, string> AutocompleteComponent { get; set; } = null!;

    public int ActiveSongId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _clientUtils.TryRestoreSession();
        AutocompleteData = (await _client.GetFromJsonAsync<string[]>("autocomplete.json"))!;
    }

    private async Task SelectedResultChanged()
    {
        if (!string.IsNullOrWhiteSpace(selectedMusicSourceTitle))
        {
            CurrentSongs = new List<Song>();
            NoSongsText = "Loading...";
            StateHasChanged();

            var req = new ReqFindSongsBySongSourceTitle(selectedMusicSourceTitle);
            var res = await _client.PostAsJsonAsync("Library/FindSongsBySongSourceTitle", req);
            if (res.IsSuccessStatusCode)
            {
                List<Song>? songs = await res.Content.ReadFromJsonAsync<List<Song>>().ConfigureAwait(false);
                if (songs != null && songs.Any())
                {
                    CurrentSongs = songs;
                }
                else
                {
                    var req2 = new ReqFindSongsByArtistTitle(selectedMusicSourceTitle);
                    var res2 = await _client.PostAsJsonAsync("Library/FindSongsByArtistTitle", req2);
                    if (res.IsSuccessStatusCode)
                    {
                        List<Song>? songs2 = await res2.Content.ReadFromJsonAsync<List<Song>>().ConfigureAwait(false);
                        if (songs2 != null && songs2.Any())
                        {
                            CurrentSongs = songs2;
                            selectedMusicSourceTitle = null;
                        }
                    }
                }

                if (!CurrentSongs.Any())
                {
                    NoSongsText = "No results.";
                }

                StateHasChanged();
            }
        }
    }

    private async Task SubmitSongUrl(int mId, string url)
    {
        if (ClientState.Session?.Player.Username is null)
        {
            return;
        }

        _addSongLinkModel.Url = "";
        StateHasChanged();

        url = url.Trim().ToLowerInvariant();
        bool isVideo = url.IsVideoLink();
        SongLinkType songLinkType = url.Contains("catbox") ? SongLinkType.Catbox : SongLinkType.Unknown;

        var submittedBy = !string.IsNullOrEmpty(ClientState.Session.VndbInfo.VndbId) ? ClientState.Session.VndbInfo.VndbId : ClientState.Session.Player.Username;
        var req = new ReqImportSongLink(mId, new SongLink() { Url = url, IsVideo = isVideo, Type = songLinkType }, submittedBy);
        var res = await _client.PostAsJsonAsync("Library/ImportSongLink", req);
        if (res.IsSuccessStatusCode)
        {
            var isSuccess = await res.Content.ReadFromJsonAsync<bool>();
            if (isSuccess)
            {
                Console.WriteLine("Imported song link!");
                await _reviewQueueComponent!.RefreshRQs();
            }
            else
            {
    // todo show error
                Console.WriteLine("Error importing song link");
            }
        }
    }

    private async Task OnHandleReadData(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
        {
            currentDataSource = Autocomplete.SearchAutocomplete(autocompleteReadDataEventArgs.SearchValue, AutocompleteData);
        }
    }

    private bool CustomFilter(string item, string searchValue)
    {
        return true;
    }

    private async Task Onkeypress(KeyboardEventArgs obj)
    {
        if (obj.Key is "Enter" or "NumpadEnter")
        {
            if (selectedMusicSourceTitle != AutocompleteComponent.SelectedText)
            {
                selectedMusicSourceTitle = AutocompleteComponent.SelectedText;
                await AutocompleteComponent.Close();
                StateHasChanged();
                await SelectedResultChanged();
            }
        }
    }

    private async Task SelectedValueChanged(string arg)
    {
        currentDataSource = new List<string> { arg }; // work-around for an issue I'm too lazy to submit a report for
    }

    private void ChangeActiveSong(int songId)
    {
        _addSongLinkModel.Url = "";
        if (songId == ActiveSongId)
        {
            ActiveSongId = 0;
        }
        else
        {
            ActiveSongId = songId;
        }
        StateHasChanged();
    }

}
