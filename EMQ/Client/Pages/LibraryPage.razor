@page "/LibraryPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core
@using EMQ.Shared.Library.Entities.Concrete.Dto.Request
@using EMQ.Shared.Quiz.Entities.Concrete
@using System.ComponentModel.DataAnnotations
@inject HttpClient _client
@inject ILogger<GuessInputComponent> _logger

<h3>Library</h3>

<BlazoredTypeahead
    SearchMethod="SearchAutocomplete"
    TValue="string"
    TItem="string"
    Value="selectedMusicSourceTitle"
    ValueChanged="SelectedResultChanged"
    ValueExpression="@(() => selectedMusicSourceTitle)"
    MinimumLength="1"
    MaximumSuggestions="10"
    Debounce="1"
    placeholder="Enter VN title here">
    <SelectedTemplate>
        @context
    </SelectedTemplate>
    <ResultTemplate >
        @context
    </ResultTemplate>
</BlazoredTypeahead>

<div class="songs d-flex flex-row">
    @foreach (var song in CurrentSongs)
    {
        <div class="song card" style="margin: 16px">
            <SongInfoCardComponent song="@song" selectedMusicSourceTitle="@selectedMusicSourceTitle"/>
            <div style="padding: 16px">
                <div>
                    Video link:
                    @if (song.Links.Any(x => x.IsVideo))
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>✘</span>
                    }
                </div>
                <div>
                    Sound link:
                    @if (song.Links.Any(x => !x.IsVideo))
                    {
                        <span>✓</span>
                    }
                    else
                    {
                        <span>✘</span>
                    }
                </div>

                @if (!(song.Links.Any(x => x.IsVideo) && song.Links.Any(x => !x.IsVideo)))
                {
                    <EditForm Model="@_addSongLinkModel" OnValidSubmit="@(() => SubmitSongUrl(song.Id, _addSongLinkModel.Url))">
                        <DataAnnotationsValidator/>
                        @* <ValidationSummary/> *@

                        <div>
                            <label for="songUrl">Add link: </label>
                            <InputText id="songUrl" type="text" @bind-Value="_addSongLinkModel.Url"/>
                            <ValidationMessage For="@(() => _addSongLinkModel.Url)"/>
                        </div>
                        <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Submit"/>
                    </EditForm>
                }
            </div>

        </div>
    }
</div>

@code {

    public class AddSongLinkModel
    {
        [Required]
        [RegularExpression(RegexPatterns.SongLinkUrlRegex, ErrorMessage = "Invalid Url")]
        public string Url { get; set; } = "";
    }

    private AddSongLinkModel _addSongLinkModel = new();

    private string[] AutocompleteData { get; set; } = Array.Empty<string>();

    public string selectedMusicSourceTitle { get; set; } = "";

    public List<Song> CurrentSongs { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AutocompleteData = (await _client.GetFromJsonAsync<string[]>("autocomplete.json"))!;
    }

    private async Task<IEnumerable<string>> SearchAutocomplete(string arg)
    {
        var startsWith = AutocompleteData.Where(x => x.ToLowerInvariant().StartsWith(arg.ToLowerInvariant()));
        var contains = AutocompleteData.Where(x => x.ToLowerInvariant().Contains(arg.ToLowerInvariant()));
    // _logger.LogInformation(JsonSerializer.Serialize(result));
        return await Task.FromResult(startsWith.Concat(contains).Distinct());
    }

    private async Task SelectedResultChanged(string arg)
    {
        selectedMusicSourceTitle = arg;

        if (!string.IsNullOrWhiteSpace(selectedMusicSourceTitle))
        {
            var req = new ReqFindSongsBySongSourceTitle(selectedMusicSourceTitle);
            var res = await _client.PostAsJsonAsync("Library/FindSongsBySongSourceTitle", req);
            if (res.IsSuccessStatusCode)
            {
                List<Song>? songs = await res.Content.ReadFromJsonAsync<List<Song>>().ConfigureAwait(false);
                if (songs != null && songs.Any())
                {
                    CurrentSongs = songs;
                }
                else
                {
                    CurrentSongs = new List<Song>();
                }

                StateHasChanged();
            }
        }
    }

    private async Task SubmitSongUrl(int mId, string url)
    {
    // return;
        _addSongLinkModel.Url = "";
        StateHasChanged();

        url = url.Trim().ToLowerInvariant();
        bool isVideo = url.EndsWith(".mp4") || url.EndsWith(".webm");
        SongLinkType songLinkType = url.Contains("catbox") ? SongLinkType.Catbox : SongLinkType.Unknown;

        var req = new ReqImportSongLink(mId, new SongLink() { Url = url, IsVideo = isVideo, Type = songLinkType }); // todo
        var res = await _client.PostAsJsonAsync("Library/ImportSongLink", req);
        if (res.IsSuccessStatusCode)
        {
            Console.WriteLine("Imported song link!");
        }
    }

}
