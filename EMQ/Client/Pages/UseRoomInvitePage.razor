@page "/UseRoomInvitePage"
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Request
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Response
@using EMQ.Shared.Quiz.Entities.Concrete
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils

@StatusText

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid RoomId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Password { get; set; }

    private string StatusText { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        StatusText = "Verifying session...";
        StateHasChanged();

        await _clientUtils.TryRestoreSession();
        if (ClientState.Session == null)
        {
            _navigation.NavigateTo("/", true);
            return;
        }

        await SendJoinRoomReq();
    }

    private async Task SendJoinRoomReq()
    {
        if (ClientState.Session == null)
        {
            _navigation.NavigateTo("/", true);
            return;
        }

        StatusText = "Joining room...";
        StateHasChanged();

        HttpResponseMessage res1 = await _client.PostAsJsonAsync("Quiz/JoinRoom",
            new ReqJoinRoom(RoomId, Password ?? "", ClientState.Session!.Token));
        if (res1.IsSuccessStatusCode)
        {
            await _clientUtils.SaveSessionToLocalStorage(); // todo why do we need to do this?

            var quizStatus = ((await res1.Content.ReadFromJsonAsync<ResJoinRoom>())!).QuizStatus;
            if (quizStatus == QuizStatus.Playing)
            {
                _navigation.NavigateTo("/QuizPage");
            }
            else
            {
                _navigation.NavigateTo("/RoomPage");
            }
        }
        else
        {
            StatusText = "Something went wrong when joining room. You will be redirected in 3 seconds.";
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(3));
            _navigation.NavigateTo("/", forceLoad: true);
        }

        StateHasChanged();
    }

}
