@page "/PyramidPage"
@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core
@using System.Timers
@inject IJSRuntime _jsRuntime
@inject ILogger<QuizPage> _logger
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager

@* <h5>PyramidPage</h5> *@

@if (Room != null &&
     Room.TreasureRooms.Any(x => x.Any(y => y.Treasures.Any(z => z.ValidSource.Value.Any()))))
{
    // todo countdown
    <TreasureRoomComponent @ref="_treasureRoomComponentRef" Room="Room" Countdown="Countdown"></TreasureRoomComponent>
}

@code {

    public PyramidPage()
    {
        _handlers = new()
        {
            {
                "ReceiveUpdatePlayerLootingInfo", (new Type[] { typeof(int), typeof(PlayerLootingInfo), },
                    async param => { await OnReceiveUpdatePlayerLootingInfo((int) param[0]!, (PlayerLootingInfo) param[1]!); })
            },
            {
                "ReceiveUpdateTreasureRoom", (new Type[] { typeof(TreasureRoom), },
                    async param => { await OnReceiveUpdateTreasureRoom((TreasureRoom) param[0]!); })
            },
        };
    }

    // public List<Treasure> Inventory { get; set; } = new();

    // public List<TreasureRoom> TreasureRooms { get; set; } = new(new TreasureRoom[100]);

    private static Room? Room { get; set; }

    private readonly Dictionary<string, (Type[] types, Func<object?[], Task> value)> _handlers;

    private TreasureRoomComponent _treasureRoomComponentRef = null!;

    public Timer Timer { get; } = new();

    public float Countdown { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _clientUtils.TryRestoreSession();
        await SyncWithServer();
        if (!Room!.TreasureRooms.Any(x => x.Any(y => y.Treasures.Any(z => z.ValidSource.Value.Any()))))
        {
            Console.WriteLine("Resync Pyramid");
            await Task.Delay(TimeSpan.FromSeconds(3));
            await SyncWithServer();
        }

        await _clientConnectionManager.SetHandlers(_handlers);
        SetTimer();
        StateHasChanged();
        _treasureRoomComponentRef.CallStateHasChanged(Room);
    }

    private async Task SyncWithServer()
    {
        Room = await _clientUtils.SyncRoom();
    // Console.WriteLine(JsonSerializer.Serialize(Room, Utils.JsoIndented));
        Countdown = Room!.Quiz!.QuizState.RemainingMs;
        StateHasChanged();
        _treasureRoomComponentRef.CallStateHasChanged(Room);
    }

    private async Task OnReceiveUpdatePlayerLootingInfo(int playerId, PlayerLootingInfo playerLootingInfo)
    {
        if (Room != null)
        {
            Player player = Room.Players.Single(x => x.Id == playerId);
            player.LootingInfo = playerLootingInfo;

    // player.LootingInfo.TreasureRoomId = playerLootingInfo.TreasureRoomId;

    // if (playerId == ClientState.Session!.Player.Id)
    // {
    //     player.LootingInfo.Inventory = playerLootingInfo.Inventory;
    // }
    // else
    // {
    //     player.LootingInfo.X = playerLootingInfo.X;
    //     player.LootingInfo.Y = playerLootingInfo.Y;
    // }

            StateHasChanged();
            _treasureRoomComponentRef.CallStateHasChanged(Room);
        }
    }

    private async Task OnReceiveUpdateTreasureRoom(TreasureRoom treasureRoom)
    {
        Room!.TreasureRooms[treasureRoom.Coords.X][treasureRoom.Coords.Y] = treasureRoom;
        StateHasChanged();
        _treasureRoomComponentRef.CallStateHasChanged(Room);
    }

    private void SetTimer()
    {
        Timer.Stop();
        Timer.Elapsed -= OnTimedEvent;

        Timer.Interval = TimeSpan.FromMilliseconds(Quiz.TickRate).TotalMilliseconds;
        Timer.Elapsed += OnTimedEvent;
        Timer.AutoReset = true;
        Timer.Start();
    }

    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        if (Countdown > 0)
        {
            Countdown -= Quiz.TickRate;
        }
        else
        {
            Timer.Stop();
            Timer.Elapsed -= OnTimedEvent;
        }

        StateHasChanged();
        _treasureRoomComponentRef.CallStateHasChanged(Room);
    }

}
