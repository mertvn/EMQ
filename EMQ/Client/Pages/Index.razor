@page "/"
@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@inject NavigationManager Navigation
@inject HttpClient Client
@inject ILogger<Index> _logger
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager

<h1>Eroge Music Quiz</h1>

<div>
    @if (ClientState.Session != null && !LoginInProgress)
    {
        <div>
            Currently logged in as @ClientState.Session.Player.Username<br/>

            <button class="btn btn-primary" @onclick="Logout">Logout</button>
            <br/>

            <div id="playerPreferences" style="border: 1px solid black; padding: 5px; margin-top: 5px;">
                <h4>Preferences</h4>
                <EditForm Model="@ClientState.Session.Player.Preferences" OnValidSubmit="@(() => UpdatePlayerPreferences(ClientState.Session.Player.Preferences))">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <InputCheckbox id="WantsVideo" @bind-Value="ClientState.Session.Player.Preferences.WantsVideo" style="margin: 5px"></InputCheckbox>
                    <label for="WantsVideo">Prefer video links over sound links</label>
                    <br/>

                    <InputSelect id="LinkHost" @bind-Value="ClientState.Session.Player.Preferences.LinkHost" style="margin: 5px">
                        @foreach (SongLinkType songLinkType in Enum.GetValues<SongLinkType>().Where(x => x != SongLinkType.Unknown))
                        {
                            <option value="@songLinkType">@songLinkType</option>
                        }
                    </InputSelect>
                    <label for="LinkHost">Preferred host</label>
                    <br/>

                    <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Save preferences"/>
                </EditForm>
                <p>@PreferencesSavedText</p>
            </div>

            @if (ClientState.Session.VndbInfo.Labels is not null)
            {
                <br/>
                <p> You can include or exclude VNDB labels here. If a VN is labeled with both Exclude and Include, it will be excluded. </p>

                <button class="btn btn-primary" @onclick="@(() => FetchLabels(ClientState.Session.VndbInfo))">Fetch labels</button>
                <br/>

                <div class="labels d-flex flex-row flex-wrap" style="max-width: 1600px">
                    @foreach (var label in Labels)
                    {
                        <div class="labelCard card" style="margin: 16px; min-width:200px; max-width: 340px; min-height:120px;">
                            <div class="labelCardBody card-body">
                                <span>#@label.Id @label.Name (@label.VnUrls.Count)</span>
                                @if (label.IsPrivate)
                                {
                                    <span> Private </span>
                                }
                                else
                                {
                                    <span> Public </span>
                                }

                                <br/>
                                <div class="btn-group btn-group-toggle" data-toggle="buttons" style="margin-top: 30px">
                                    <label class="btn btn-outline-primary"
                                           style="background-color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Include, "green", "transparent");
                                            color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Include, "white", "black");">
                                        <input type="radio" name="@("options" + label.Id)" id="option1" autocomplete="off" checked="@(label.Kind == LabelKind.Include)"
                                               @onclick="@(() => OnLabelKindChanged(label, LabelKind.Include))"> Include
                                    </label>
                                    <label class="btn btn-outline-primary"
                                           style="background-color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Maybe, "gray", "transparent");
                                            color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Maybe, "white", "black");">
                                        <input type="radio" name="@("options" + label.Id)" id="option2" autocomplete="off" checked="@(label.Kind == LabelKind.Maybe)"
                                               @onclick="@(() => OnLabelKindChanged(label, LabelKind.Maybe))"> Maybe
                                    </label>
                                    <label class="btn btn-outline-primary"
                                           style="background-color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Exclude, "red", "transparent");
                                           color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Exclude, "white", "black");">
                                        <input type="radio" name="@("options" + label.Id)" id="option3" autocomplete="off" checked="@(label.Kind == LabelKind.Exclude)"
                                               @onclick="@(() => OnLabelKindChanged(label, LabelKind.Exclude))"> Exclude
                                    </label>
                                </div>

                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else if (LoginInProgress || ClientState.Session == null)
    {
        <p>Welcome to EMQ, please login.</p>
        <div>

            <EditForm Model="@_loginModel" OnValidSubmit="@(() => Login(_loginModel))">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <label for="Username">Username: </label>
                <br/>
                <InputText id="Username" type="text" @bind-Value="_loginModel.Username"/>
                <br/>

                @* Password:<br/> *@
                @* <input @bind="Password" type="password" name="Password"/><br/> *@

                <label for="VndbId">VNDB Id (Optional): </label>
                <br/>
                <InputText id="VndbId" type="text" @bind-Value="_loginModel.VndbId"/>
                <br/>

                <label for="VndbApiToken">VNDB API Token (Optional, only required if your list is private): </label>
                <br/>
                <InputText id="VndbApiToken" type="text" @bind-Value="_loginModel.VndbApiToken"/>
                <br/>

                <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Login" disabled="@(ClientState.Session != null || LoginInProgress)"/>
            </EditForm>

        </div>

        <div>
            @foreach (var item in LoginProgressDisplay)
            {
                <p>@item</p>
            }
        </div>
    }
</div>
