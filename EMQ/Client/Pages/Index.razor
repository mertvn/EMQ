@page "/"
@using EMQ.Shared.Auth.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Response
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations
@using EMQ.Shared.VNDB.Business
@using Juliet.Model.Param
@using Juliet.Model.VNDBObject
@inject NavigationManager Navigation
@inject HttpClient Client
@inject ILogger<Index> _logger
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager

<h1>Eroge Music Quiz</h1>

<div>
    @if (ClientState.Session != null && !LoginInProgress)
    {
        <div>
            Currently logged in as @ClientState.Session.Player.Username<br/>

            <button class="btn btn-primary" @onclick="Logout">Logout</button>
            <br/>

            @if (ClientState.Session!.VndbInfo.Labels is not null)
            {
                <br/>
                <p> You can include or exclude VNDB labels here. Exclude takes priority over Include currently.</p>

                <button class="btn btn-primary" @onclick="@(() => FetchLabels(ClientState.Session.VndbInfo))">Fetch labels</button>
                <br/>

                <div class="labels d-flex flex-row flex-wrap" style="max-width: 1600px">
                    @foreach (var label in Labels)
                    {
                        <div class="labelCard card" style="margin: 16px; min-width:200px; max-width: 340px; min-height:120px;">
                            <div class="labelCardBody card-body">
                                <span>#@label.Id @label.Name (@label.VnUrls.Count)</span>
                                @if (label.IsPrivate)
                                {
                                    <span> Private </span>
                                }
                                else
                                {
                                    <span> Public </span>
                                }

                                <br/>
                                <div class="btn-group btn-group-toggle" data-toggle="buttons" style="margin-top: 30px">
                                    <label class="btn btn-outline-primary">
                                        <input type="radio" name="@("options" + label.Id)" id="option1" autocomplete="off" checked="@(label.Kind == LabelKind.Include)"
                                               @onclick="@(() => OnLabelKindChanged(label, LabelKind.Include))"> Include
                                    </label>
                                    <label class="btn btn-outline-primary">
                                        <input type="radio" name="@("options" + label.Id)" id="option2" autocomplete="off" checked="@(label.Kind == LabelKind.Ignore)"
                                               @onclick="@(() => OnLabelKindChanged(label, LabelKind.Ignore))"> Ignore
                                    </label>
                                    <label class="btn btn-outline-primary">
                                        <input type="radio" name="@("options" + label.Id)" id="option3" autocomplete="off" checked="@(label.Kind == LabelKind.Exclude)"
                                               @onclick="@(() => OnLabelKindChanged(label, LabelKind.Exclude))"> Exclude
                                    </label>
                                </div>

                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else if (LoginInProgress || ClientState.Session == null)
    {
        <p>Welcome to EMQ, please login.</p>
        <div>

            <EditForm Model="@_loginModel" OnValidSubmit="@(() => OnValidSubmit(_loginModel))">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <label for="Username">Username: </label>
                <br/>
                <InputText id="Username" type="text" @bind-Value="_loginModel.Username"/>
                <br/>

                @* Password:<br/> *@
                @* <input @bind="Password" type="password" name="Password"/><br/> *@

                <label for="VndbId">VNDB Id (Optional): </label>
                <br/>
                <InputText id="VndbId" type="text" @bind-Value="_loginModel.VndbId"/>
                <br/>

                <label for="VndbApiToken">VNDB API Token (Optional, only required if your list is private): </label>
                <br/>
                <InputText id="VndbApiToken" type="text" @bind-Value="_loginModel.VndbApiToken"/>
                <br/>

                <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Submit" disabled="@(ClientState.Session != null || LoginInProgress)"/>
            </EditForm>

        </div>

        <div>
            @foreach (var item in LoginProgressDisplay)
            {
                <p>@item</p>
            }
        </div>
    }
</div>

@code
{
    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = "";

        public string Password { get; set; } = "";

        [RegularExpression(RegexPatterns.VndbIdRegex, ErrorMessage = "Invalid VNDB Id: make sure it looks like 'u1234567'")]
        public string? VndbId { get; set; }

    // [MinLength(32, ErrorMessage = "Invalid VNDB API Token")] // todo prevents login if users enter something random, and then deletes it
        public string? VndbApiToken { get; set; }
    }

    private LoginModel _loginModel = new();

    public List<string> LoginProgressDisplay { get; set; } = new();

    public bool LoginInProgress { get; set; } = false;

    public List<Label> Labels { get; set; } = new();

    private async Task Logout()
    {
        if (ClientState.Session is not null)
        {
            HttpResponseMessage res = await Client.PostAsJsonAsync("Auth/RemoveSession", new ReqRemoveSession(ClientState.Session.Token));
            if (res.IsSuccessStatusCode)
            {
                _logger.LogInformation("Logged out");
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
    // todo
            }
        }
    }

    private async Task OnValidSubmit(LoginModel loginModel)
    {
        if (ClientState.Session is null)
        {
            LoginProgressDisplay = new List<string>();
            LoginInProgress = true;
            StateHasChanged();

            if (!string.IsNullOrWhiteSpace(loginModel.VndbApiToken))
            {
                LoginProgressDisplay.Add("Validating VNDB API Token...");
                var resAuth = await Juliet.Api.GET_authinfo(new Param() { APIToken = loginModel.VndbApiToken });
                if (resAuth != null)
                {
                    const string vndbPermName = "listread"; // todo
                    if (!resAuth.Permissions.Contains(vndbPermName))
                    {
                        LoginProgressDisplay.Add($"Error: VNDB API Token does not have the necessary permissions: {vndbPermName}");
                        LoginInProgress = false;
                        LoginProgressDisplay.Add("Login cancelled.");
                        StateHasChanged();
                        return;
                    }
                    else
                    {
                        LoginProgressDisplay.Add("Successfully validated VNDB API Token.");
                        StateHasChanged();
                    }
                }
                else
                {
                    LoginProgressDisplay.Add("Error: Failed to validate VNDB API Token.");
                    LoginInProgress = false;
                    LoginProgressDisplay.Add("Login cancelled.");
                    StateHasChanged();
                    return;
                }
            }

            LoginProgressDisplay.Add($"Creating session...");
            StateHasChanged();
            HttpResponseMessage res = await Client.PostAsJsonAsync("Auth/CreateSession",
                new ReqCreateSession(
                    loginModel.Username,
                    loginModel.Password,
                    new PlayerVndbInfo() { VndbId = loginModel.VndbId, VndbApiToken = loginModel.VndbApiToken }));

            if (res.IsSuccessStatusCode)
            {
                ResCreateSession? resCreateSession = await res.Content.ReadFromJsonAsync<ResCreateSession>();
                if (resCreateSession != null)
                {
                    LoginProgressDisplay.Add($"Created session.");
                    StateHasChanged();
                    _logger.LogInformation("token: " + resCreateSession.Session);

                    ClientState.Session = resCreateSession.Session;
                    if (ClientState.Session.VndbInfo.Labels is not null)
                    {
                        Labels = ClientState.Session.VndbInfo.Labels.ToList();
                        LoginProgressDisplay.Add("Grabbed VNs from VNDB.");
                        StateHasChanged();
                    }

                    LoginProgressDisplay.Add($"Initializing websocket connection...");
                    StateHasChanged();
                    await _clientConnectionManager.StartManagingConnection();
                    LoginProgressDisplay.Add($"Initialized websocket connection.");
                    StateHasChanged();

                    LoginProgressDisplay.Add($"Successfully logged in. Navigating to Hotel.");
                    StateHasChanged();
                    LoginInProgress = false;

                    if (ClientState.Session.VndbInfo.Labels is null)
                    {
                        Navigation.NavigateTo("/HotelPage");
                    }
                }
            }
            else
            {
                LoginProgressDisplay.Add("Login failed.");
                StateHasChanged();
                LoginInProgress = false;
            }
        }
    }

    private async Task FetchLabels(PlayerVndbInfo vndbInfo)
    {
        Labels.Clear();
        List<Label> newLabels = new();

        VNDBLabel[] vndbLabels = await VndbMethods.GetLabels(vndbInfo);
        foreach (VNDBLabel vndbLabel in vndbLabels)
        {
            newLabels.Add(Label.FromVndbLabel(vndbLabel));
        }

        Console.WriteLine(vndbInfo.Labels!.Count + "-" + newLabels.Count);
        List<Label> final = Label.MergeLabels(vndbInfo.Labels!, newLabels);
        Labels.AddRange(final);
        StateHasChanged();
    }

    private async Task OnLabelKindChanged(Label label, LabelKind newLabelKind)
    {
        if (label.Kind == newLabelKind)
        {
            return;
        }

        label.Kind = newLabelKind;
        HttpResponseMessage res = await Client.PostAsJsonAsync("Auth/UpdateLabel",
            new ReqUpdateLabel(ClientState.Session!.Token, label));

        if (res.IsSuccessStatusCode)
        {
            var updatedLabel = await res.Content.ReadFromJsonAsync<Label>();
            if (updatedLabel != null)
            {
                Label oldLabel = Labels.Single(x => x.Id == updatedLabel.Id);
                oldLabel.Kind = updatedLabel.Kind;
                oldLabel.VnUrls = updatedLabel.VnUrls;
            }
        }
        else
        {
    // todo
        }
    }
}
