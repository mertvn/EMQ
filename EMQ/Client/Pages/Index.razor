@page "/"
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core
@inject NavigationManager _navigation
@inject HttpClient _client
@inject ILogger<Index> _logger
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager

@* <a href="MethodCallStatistics">Method Call Statistics</a> *@
@* <a href="RenderTimeStatistics">Render Time Statistics</a> *@

<h1>@Constants.WebsiteName</h1>

<div>
    @if (ClientState.Session != null && !LoginInProgress)
    {
        bool isUserOrGreater = ClientState.Session.UserRoleKind >= UserRoleKind.User;
        bool isModeratorOrGreater = ClientState.Session.UserRoleKind >= AuthStuff.LowestModeratorRole;
        string roleStr = ClientState.Session.UserRoleKind.ToString();
        <div>
            Currently logged in as @ClientState.Session.Player.Username
            <br/>
            @if (true || isModeratorOrGreater)
            {
                <span>Role: @roleStr</span>
                <br/>
            }

            <button type="button" class="btn btn-primary" @onclick="Logout">Logout</button>
            <br/>

            @if (isUserOrGreater)
            {
                // todo
               @* <details>
                    <summary>Change email</summary>
                    <ChangeEmailComponent Username="@ClientState.Session.Player.Username"></ChangeEmailComponent>
                    <br/>
                </details> *@

                <details>
                    <summary>Change password</summary>
                    <ChangePasswordComponent Username="@ClientState.Session.Player.Username"></ChangePasswordComponent>
                    <br/>
                </details>
            }

        </div>
    }
    else if (LoginInProgress || ClientState.Session == null)
    {
        <p>Welcome to EMQ, please login.</p>
        <div>

            <EditForm Model="@_loginModel" OnValidSubmit="@(() => Login(_loginModel))">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <InputText id="Username" type="text" @bind-Value="_loginModel.UsernameOrEmail" style="margin: 5px"/>
                <label for="Username">Username</label> @* todo UsernameOrEmail *@
                <br/>

                <InputText id="VndbId" type="text" @bind-Value="_loginModel.VndbId" style="margin: 5px"/>
                <label for="VndbId">VNDB Id (Optional)</label>
                <br/>

                <InputText id="VndbApiToken" type="text" @bind-Value="_loginModel.VndbApiToken" style="margin: 5px"/>
                <label for="VndbApiToken">
                    <a href="https://vndb.org/u/tokens" target="_blank">VNDB API Token</a> (Optional, only required if your list is private, not sent to server)
                </label>
                <br/>

                <input style="margin-top: 5px" type="submit" class="btn btn-primary" value="Login" disabled="@(ClientState.Session != null || LoginInProgress)"/>
            </EditForm>

        </div>

        <div>
            <ul>
                @foreach (string item in LoginProgressDisplay)
                {
                    <li>@item</li>
                }
            </ul>
        </div>

        <details style="display: inline">
            <summary></summary>
            <p>Account system beta</p>
            <p>You can test it out if you want, but the accounts you register may be deleted in the future.</p>
            <InputText id="Password" type="password" @bind-Value="_loginModel.Password" style="margin: 5px"/>
            <label for="Password">Password</label>
            <br/>

            <a id="register" class="link-primary" style="cursor: pointer" @onclick="@(Onclick_Register)">Register new account</a>
            <br/>
            <a id="forgottenPassword" class="link-primary" style="cursor: pointer" @onclick="@(Onclick_ForgottenPassword)">Reset forgotten password</a>
        </details>
    }
</div>
