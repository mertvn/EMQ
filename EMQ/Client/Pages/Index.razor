@page "/"
@using EMQ.Shared.Auth
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Auth.Entities.Concrete.Dto.Request
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Response
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@inject NavigationManager Navigation
@inject HttpClient Client
@inject ILogger<Index> _logger
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager

<h1>Hello, EMQ!</h1>

<div>
    @if (ClientState.Session != null)
    {
        <div>
            Currently logged in as @ClientState.Session.Player.Username<br/>
            <button class="btn btn-primary" @onclick="Logout" disabled="@(ClientState.Session == null)">Logout</button>
        </div>
    }
    else
    {
        <p>Welcome to EMQ, please login.</p>
        <div>
            Username:<br/>
            <input @bind="Username" type="text" name="Username"/><br/>
            @* Password:<br/> *@
            @* <input @bind="Password" type="password" name="Password"/><br/> *@
            <button class="btn btn-primary" @onclick="Login" disabled="@(ClientState.Session != null)">Login</button>
        </div>
    }
</div>

@code
{
    private string Username { get; set; } = "";

    private string Password { get; set; } = "";

    private async Task Login()
    {
        if (ClientState.Session is null)
        {
    // todo proper auth
            HttpResponseMessage res = await Client.PostAsJsonAsync("Auth/CreateSession", new ReqCreateSession(Username, Password));
            if (res.IsSuccessStatusCode)
            {
                ResCreateSession? resCreateSession = await res.Content.ReadFromJsonAsync<ResCreateSession>();
                if (resCreateSession != null)
                {
                    _logger.LogInformation("token: " + resCreateSession.Token);

                    var player = new Player(resCreateSession.PlayerId, Username);
                    ClientState.Session = new Session(player, resCreateSession.Token);

                    await _clientConnectionManager.StartManagingConnection();

                    Navigation.NavigateTo("/HotelPage");
                }
            }
            else
            {
    // todo
            }
        }
    }

    private async Task Logout()
    {
        if (ClientState.Session is not null)
        {
            HttpResponseMessage res = await Client.PostAsJsonAsync("Auth/RemoveSession", new ReqRemoveSession(ClientState.Session.Token));
            if (res.IsSuccessStatusCode)
            {
                _logger.LogInformation("Logged out");
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
    // todo
            }
        }
    }
}
