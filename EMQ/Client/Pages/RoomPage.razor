@page "/RoomPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core
@using EMQ.Shared.Core.UI
@inject HttpClient Client
@inject ILogger<RoomPage> _logger
@inject NavigationManager Navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager

<h3>Room</h3>

<div id="roomInfo">
    Name:<br/>
    <p>@Room?.Name</p>
    Owner:<br/>
    <p>@Room?.Owner.Username</p>
    Settings:<br/>
    <p>@JsonSerializer.Serialize(Room?.QuizSettings, Utils.Jso)</p>
</div>

@if (Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing && (Room?.QuizSettings.IsHotjoinEnabled ?? false))
{
    <button class="btn btn-primary" @onclick="Hotjoin">Hotjoin Quiz</button>
}

@if (Room?.Owner.Id == ClientState.Session?.Player.Id)
{
    <button class="btn btn-primary" @onclick="StartQuiz">Start Quiz</button>

    <button class="btn btn-secondary" type="button" @onclick="OnclickShowQuizSettings" style="margin: 5px;">
        @UiHelpers.Bool2Text(ShowQuizSettings, "Hide quiz settings", "Show quiz settings")
    </button>
    <div style="display: @UiHelpers.Bool2Display(ShowQuizSettings)" id="collapseQuizSettings">

        <EditForm Model="@ClientQuizSettings" OnValidSubmit="@(() => SendChangeRoomSettingsReq(ClientQuizSettings))">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <InputCheckbox id="OnlyFromLists" @bind-Value="ClientQuizSettings.OnlyFromLists" style="margin: 5px"></InputCheckbox>
            <label for="OnlyFromLists">Only from VNDB lists?</label>
            <br/>

            <InputCheckbox id="IsHotjoinEnabled" @bind-Value="ClientQuizSettings.IsHotjoinEnabled" style="margin: 5px"></InputCheckbox>
            <label for="IsHotjoinEnabled">Enable hotjoin?</label>
            <br/>

            <InputNumber id="NumSongs" @bind-Value="ClientQuizSettings.NumSongs" style="margin: 5px"></InputNumber>
            <label for="NumSongs">Maximum number of songs</label>
            <br/>

            <InputNumber id="TeamSize" @bind-Value="ClientQuizSettings.TeamSize" style="margin: 5px"></InputNumber>
            <label for="TeamSize">Team size (only 1 and Max are supported currently)</label>
            <br/>

            <InputNumber id="MaxLives" @bind-Value="ClientQuizSettings.MaxLives" style="margin: 5px"></InputNumber>
            <label for="MaxLives">Lives (0 for unlimited)</label>
            <br/>

            <InputNumber id="GuessMs" @bind-Value="ClientQuizSettings.GuessMs" style="margin: 5px"></InputNumber>
            <label for="GuessMs">Guess time (ms)</label>
            <br/>

            <InputNumber id="ResultsMs" @bind-Value="ClientQuizSettings.ResultsMs" style="margin: 5px"></InputNumber>
            <label for="ResultsMs">Results time (ms)</label>
            <br/>

            <input style="margin: 5px" type="submit" class="btn btn-primary" value="Submit"/>
            <button style="margin: 5px" class="btn btn-warning" @onclick="ResetQuizSettings">Reset to default</button>
        </EditForm>
    </div>
}

<div id="playersDiv" style="display:flex; justify-content:center; align-items:center;">
    @if (Room?.Players.Any() ?? false)
    {
        @foreach (var player in Room.Players)
        {
            <div class="playerDiv" style="margin: 20px">
                @* <p> Id: @player.Id</p> *@
                <p> Name: @player.Username</p>
                <img width="200px" height="200px" src="@Avatar.GetUrlByPlayerState(player.Avatar, PlayerStatus.Default)" alt="Avatar">
            </div>
        }
    }

</div>

@code {

    public RoomPage()
    {
        _handlers = new Dictionary<string, (Type[] types, Func<object?[], Task> value)>
        {
            { "ReceivePlayerJoinedRoom", (new Type[] { }, async _ => { await OnReceivePlayerJoinedRoom(); }) },
            { "ReceiveQuizEntered", (new Type[] { }, async _ => { await OnReceiveQuizEntered(); }) }
        };
    }

    private QuizSettings ClientQuizSettings { get; set; } = new();

    private Room? Room { get; set; }

    private readonly Dictionary<string, (Type[] types, Func<object?[], Task> value)> _handlers;

    public bool ShowQuizSettings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _clientConnectionManager.SetHandlers(_handlers);

        Room = await _clientUtils.SyncRoom();
        ClientQuizSettings = JsonSerializer.Deserialize<QuizSettings>(JsonSerializer.Serialize(Room!.QuizSettings))!; // need a deep copy
        StateHasChanged();

        // breaks the leave button on QuizPage
        // if (Room!.Quiz?.QuizState.QuizStatus is QuizStatus.Playing && Room.QuizSettings.IsHotjoinEnabled)
        // {
        //     Hotjoin();
        // }
    }

    private async Task StartQuiz()
    {
        if (Room!.Owner.Id == ClientState.Session!.Player.Id)
        {
            HttpResponseMessage res1 = await Client.PostAsJsonAsync("Quiz/StartQuiz", new ReqStartQuiz(ClientState.Session.Token, Room.Id));
            if (res1.IsSuccessStatusCode)
            {
            }
        }
    }

    private async Task OnReceiveQuizEntered()
    {
        _logger.LogInformation("Navigating from Room to Quiz");
        Navigation.NavigateTo("/QuizPage");
    }

    private async Task OnReceivePlayerJoinedRoom()
    {
        _logger.LogInformation("Syncing room because ReceivePlayerJoinedRoom");
        Room = await _clientUtils.SyncRoom();
        StateHasChanged();
    // _logger.LogInformation(JsonSerializer.Serialize(Room));
    }

    private void Hotjoin()
    {
        _logger.LogInformation("Hotjoining Quiz");
        Navigation.NavigateTo("/QuizPage");
    }

    private async Task ChangeTeam(int teamId)
    {
    // todo
    }

    private async Task ResetQuizSettings()
    {
        ClientQuizSettings = new QuizSettings();
        await SendChangeRoomSettingsReq(ClientQuizSettings); // todo remove
    }

    private async Task SendChangeRoomSettingsReq(QuizSettings clientQuizSettings)
    {
        if (Room!.Owner.Id == ClientState.Session!.Player.Id)
        {
            HttpResponseMessage res1 = await Client.PostAsJsonAsync("Quiz/ChangeRoomSettings", new ReqChangeRoomSettings(
                ClientState.Session.Token, Room.Id, "TODO", clientQuizSettings));

            if (res1.IsSuccessStatusCode)
            {
                ShowQuizSettings = false;
                Room = await _clientUtils.SyncRoom();
                StateHasChanged();
            }
        }
    }

    private async Task OnclickShowQuizSettings()
    {
        Room = await _clientUtils.SyncRoom();
        if (Room?.QuizSettings != null)
        {
            ClientQuizSettings = JsonSerializer.Deserialize<QuizSettings>(JsonSerializer.Serialize(Room!.QuizSettings))!;
        }

        ShowQuizSettings = !ShowQuizSettings;
        StateHasChanged();
    }

}
