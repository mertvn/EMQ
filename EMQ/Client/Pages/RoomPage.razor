@page "/RoomPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@inject ILogger<RoomPage> _logger
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@implements IDisposable

@code {

    public void Dispose()
    {
        _chatComponent?.Dispose();
    }

}

<QuizSettingsComponent @ref="_quizSettingsComponent"
                       Room="@Room"
                       ParentStateHasChangedCallback="@CallStateHasChanged"
                       IsReadOnly="@(Room?.Owner.Id != ClientState.Session?.Player.Id || Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing)"/>

<GenericModal @ref="@_leaveModalRef"
              Title="Leave?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await LeaveRoom(); })">
    <span>Are you sure you want to leave the room?</span>
</GenericModal>

<button type="button" class="btn btn-warning" @onclick="@(() => _leaveModalRef?.Show())"
        style="position: relative; top: 2px; left: 2px; margin: 10px 2px; padding: 2px; width: 60px; height: 30px;">
    Leave
</button>

@if (Room?.Chat != null)
{
    <div style="margin-top: 20px;">
         <ChatComponent @ref="_chatComponent"></ChatComponent>
    </div>
}

<div id="roomInfo" style="margin: 10px; max-width: 800px; max-height: 600px;">
    Name:<br/>
    <p>@Room?.Name</p>

    Owner:<br/>
    <p>@Room?.Owner.Username</p>

    @* Settings:<br/> *@
    @* <p style="margin: 10px; max-width: 1000px; max-height: 600px; word-wrap: break-word">@JsonSerializer.Serialize(Room?.QuizSettings, Utils.Jso)</p> *@
    @* Tags:<br/> *@
    @*
    @* <p> *@
    @*     @JsonSerializer.Serialize( *@
    @*         Room?.QuizSettings.Filters.CategoryFilters.Select(x => $"{x.SongSourceCategory.VndbId} {x.SongSourceCategory.Name} ({x.Trilean})"), *@
    @*         Utils.Jso) *@
    @* </p> *@
</div>

@if (Room?.Owner.Id == ClientState.Session?.Player.Id)
{
    <button type="button" class="btn btn-primary" @onclick="StartQuiz" disabled="@(Room is {Quiz.QuizState.QuizStatus: QuizStatus.Playing })">
        Start Quiz
    </button>
}

<button type="button" id="buttonQuizSettings" class="btn btn-secondary" style="padding: 5px; margin: 5px; width: 120px; height: 35px"
        @onclick="@(() => _quizSettingsComponent!.OnclickShowQuizSettings())">
    Room Settings
</button>

 <div id="playersDiv" style="display:flex; margin: auto; align-items:flex-end; max-width: 65vw; overflow-x: auto;">
    @if (Room?.Players.Any() ?? false)
    {
        @foreach (var player in Room.Players)
        {
            <div class="playerDiv" style="margin: 10px; max-width: 160px; max-height: 280px;">
                @* <p> Id: @player.Id</p> *@
                <p> Name: @player.Username</p>
                <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(player.Avatar, PlayerStatus.Default)" alt="Avatar">
            </div>
        }
    }

</div>

@* todo readying up *@
