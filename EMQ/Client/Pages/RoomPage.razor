@page "/RoomPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject ILogger<RoomPage> _logger
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@implements IDisposable

@code {

    public void Dispose()
    {
        _chatComponent?.Dispose();
        _locationChangingRegistration?.Dispose();
    }

}

<QuizSettingsComponent @ref="_quizSettingsComponent"
                       Room="@Room"
                       ParentStateHasChangedCallback="@CallStateHasChanged"
                       IsQuizPage="false"
                       IsReadOnly="@(Room?.Owner.Id != ClientState.Session?.Player.Id || Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing)"/>

<GenericModal @ref="@_leaveModalRef"
              Title="Leave?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await LeaveRoom(); })">
    <span>Are you sure you want to leave the room?</span>
</GenericModal>

<GenericModal @ref="@_forceStartModalRef"
              Title="Force start quiz?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await ForceStartQuiz(); })">
    <p>The following players are not ready: </p>
    <ul>
        @if (Room != null)
        {
            foreach (var player in Room.Players.Where(x => !x.IsReadiedUp && x.Id != Room?.Owner.Id))
            {
                <li>@player.Username</li>
            }
        }
    </ul>
    <p>Are you sure you still want to start the quiz?</p>
</GenericModal>

<GenericModal @ref="@_changeRoomNameAndPasswordModalRef"
              Title="Change room name and password"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await ChangeRoomNameAndPassword(); })">
    <input id="RoomName" type="text" @bind="RoomName"/>
    <label for="RoomName">Room name</label>
    <br/>
    <br/>

    <input id="RoomPassword" type="text" @bind="RoomPassword"/>
    <label for="RoomPassword">Room password</label>
    <br/>
</GenericModal>

<button type="button" class="btn btn-warning" @onclick="@(() => _leaveModalRef?.Show())"
        style="position: relative; top: 2px; left: 2px; margin: 10px 2px; padding: 2px; width: 60px; height: 30px;">
    Leave
</button>

@if (Room?.Chat != null)
{
    <div style="margin-top: 20px;">
        <ChatComponent @ref="_chatComponent"></ChatComponent>
    </div>
}

<div id="roomInfo" style="margin: 10px; max-width: 800px; max-height: 600px;">
    Name:<br/>
    <p>@Room?.Name</p>

    Owner:<br/>
    <p>@Room?.Owner.Username</p>

    @* Settings:<br/> *@
    @* <p style="margin: 10px; max-width: 1000px; max-height: 600px; word-wrap: break-word">@JsonSerializer.Serialize(Room?.QuizSettings, Utils.Jso)</p> *@
    @* Tags:<br/> *@
    @*
    @* <p> *@
    @*     @JsonSerializer.Serialize( *@
    @*         Room?.QuizSettings.Filters.CategoryFilters.Select(x => $"{x.SongSourceCategory.VndbId} {x.SongSourceCategory.Name} ({x.Trilean})"), *@
    @*         Utils.Jso) *@
    @* </p> *@
</div>

@if (Room?.Owner.Id == ClientState.Session?.Player.Id)
{
    <button type="button"
            class="btn btn-primary"
            @onclick="StartQuiz"
            disabled="@(Room is {Quiz.QuizState.QuizStatus: QuizStatus.Playing })"
            style="margin: 5px;">
        @if (IsStartingQuiz)
        {
            <span>Starting...</span>
        }
        else
        {
            <span>Start Quiz</span>
        }

    </button>
}
else if (IsSpectator)
{
    <button type="button" class="btn btn-primary"
            disabled="@(Room is null || Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing)"
            @onclick="SendConvertSpectatorToPlayerInRoom"
            style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
        Join as player
    </button>
}
else
{
    <button type="button" class="btn btn-primary"
            disabled="@(Room is null)"
            @onclick="SendToggleReadiedUp"
            style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 78px; height: 30px;">
        @UiHelpers.Bool2Text(Room?.Players.SingleOrDefault(x => x.Id == ClientState.Session?.Player.Id)?.IsReadiedUp, $"Unready", "Ready", "Ready")
    </button>

    <button type="button" class="btn btn-primary"
            disabled="@(Room is null || Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing)"
            @onclick="SendConvertPlayerToSpectatorInRoom"
            style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
        Spectate
    </button>
}

<button type="button" id="buttonQuizSettings" class="btn btn-secondary" style="padding: 5px; margin: 5px; width: 120px; height: 35px"
        @onclick="@(() => _quizSettingsComponent!.OnclickShowQuizSettings())">
    Room Settings
</button>

@if (Room?.Owner.Id == ClientState.Session?.Player.Id)
{
    <button type="button" class="btn btn-primary" @onclick="@OnclickChangeRoomNameAndPassword" style="margin:5px; padding: 5px;">
        Change room name and password
    </button>

    <button type="button" class="btn" style="background-color: var(--bs-emphasis-color); color: var(--bs-body-bg)" @onclick="@(async () => { await Onclick_InviteLink(); })">
        @InviteLinkButtonText
    </button>
}

<div id="playersDiv" style="display:flex; margin: auto; align-items:flex-end; max-width: 65vw; overflow-x: auto;">
    @if (Room?.Players.Any() ?? false)
    {
        @foreach (var player in Room.Players)
        {
            <div class="playerDiv" style="margin: 10px; width: 160px; height: 310px; opacity: @UiHelpers.Bool2Text(player.HasActiveConnection, "inherit", "0.5")">
                <p style="text-align: center;">@(player.IsReadiedUp || Room?.Owner.Id == player.Id ? "Ready" : "Not ready")</p>

                <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(player.Avatar, PlayerStatus.Default)" alt="Avatar">

                <div style="background-color:rgba(0, 0, 0, 0.9); height:25px; width: 160px; display: flex; justify-content:center; align-items:center;">
                    @* todo make text smaller as it gets longer *@
                    <span style="color: white; max-width: 130px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @player.Username
                    </span>
                </div>
                @if (Room?.Owner.Id == ClientState.Session?.Player.Id && player.Id != ClientState.Session?.Player.Id)
                {
                    <div style="display: flex; justify-content:center; align-items:center;">
                        <button type="button" class="btn btn-primary"
                                disabled="@(Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing)"
                                @onclick="@(() => OnclickTransferRoomOwnership(player.Id))" style="margin:5px; padding: 5px;">
                            Transfer ownership
                        </button>
                        <button type="button" class="btn btn-primary"
                                disabled="@(Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing)"
                                @onclick="@(() => OnclickKickFromRoom(player.Id))" style="margin:5px; padding: 5px;">
                            Kick
                        </button>
                    </div>
                }
            </div>
        }
    }

</div>

@* // todo move to chat component *@
@if (Room?.Spectators.Any() ?? false)
{
    <div style="padding: 2px; margin: 5px;">
        Spectators:
        <ul style="padding-left: 0">
            @foreach (var spectator in Room.Spectators)
            {
                <li>@spectator.Username</li>
            }
        </ul>
    </div>
}
