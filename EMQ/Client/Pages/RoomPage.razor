@page "/RoomPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@inject HttpClient Client
@inject ILogger<RoomPage> _logger
@inject NavigationManager Navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@implements IDisposable

@code {

    public void Dispose()
    {
        _chatComponent?.Dispose();
    }

}

<button class="btn btn-warning" @onclick="Onclick_Leave"
        style="position: relative; top: 2px; left: 2px; margin: 10px 2px; padding: 2px; width: 60px; height: 30px;">
    Leave
</button>

@if (Room?.Chat != null)
{
    <ChatComponent @ref="_chatComponent"></ChatComponent>
}

<div id="roomInfo" style="margin: 10px; max-width: 1000px; max-height: 600px;">
    Name:<br/>
    <p>@Room?.Name</p>
    Owner:<br/>
    <p>@Room?.Owner.Username</p>
    Settings:<br/>
    <p style="margin: 10px; max-width: 1000px; max-height: 600px; word-wrap: break-word">@JsonSerializer.Serialize(Room?.QuizSettings, Utils.Jso)</p>
    Tags:<br/>
    <p>
        @JsonSerializer.Serialize(
            Room?.QuizSettings.Filters.CategoryFilters.Select(x => $"{x.SongSourceCategory.VndbId} {x.SongSourceCategory.Name} ({x.Trilean})"),
            Utils.Jso)
    </p>
</div>

@if (Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Playing && (Room?.QuizSettings.IsHotjoinEnabled ?? false))
{
    <button class="btn btn-primary" @onclick="Hotjoin">Hotjoin Quiz</button>
}

@if (Room?.Owner.Id == ClientState.Session?.Player.Id)
{
    <button class="btn btn-primary" @onclick="StartQuiz" disabled="@(Room is {Quiz.QuizState.QuizStatus: QuizStatus.Playing })">
        Start Quiz
    </button>

    <button class="btn btn-secondary" type="button" @onclick="OnclickShowQuizSettings" style="margin: 5px;"
            disabled="@(Room is {Quiz.QuizState.QuizStatus: QuizStatus.Playing })">
        @UiHelpers.Bool2Text(ShowQuizSettings, "Hide quiz settings", "Show quiz settings")
    </button>
    <div style="display: @UiHelpers.Bool2Display(ShowQuizSettings)" id="collapseQuizSettings">

        <EditForm Model="@ClientQuizSettings" OnValidSubmit="@(() => SendChangeRoomSettingsReq(ClientQuizSettings))">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <InputCheckbox id="OnlyFromLists" @bind-Value="ClientQuizSettings.OnlyFromLists" style="margin: 5px"></InputCheckbox>
            <label for="OnlyFromLists">Only from VNDB lists?</label>
            <br/>

            <InputCheckbox id="Duplicates" @bind-Value="ClientQuizSettings.Duplicates" style="margin: 5px"></InputCheckbox>
            <label for="Duplicates">Duplicates?</label>
            <br/>

            <InputCheckbox id="IsHotjoinEnabled" @bind-Value="ClientQuizSettings.IsHotjoinEnabled" style="margin: 5px"></InputCheckbox>
            <label for="IsHotjoinEnabled">Enable hotjoin?</label>
            <br/>

            <InputSelect id="SongSelectionKind" @bind-Value="ClientQuizSettings.SongSelectionKind" style="margin: 5px">
                @foreach (SongSelectionKind songSelectionKind in Enum.GetValues<SongSelectionKind>())
                {
                    <option value="@songSelectionKind">@songSelectionKind</option>
                }
            </InputSelect>
            <label for="SongSelectionKind">Song selection method</label>
            <br/>

            <InputNumber id="NumSongs" @bind-Value="ClientQuizSettings.NumSongs" style="margin: 5px"></InputNumber>
            <label for="NumSongs">Maximum number of songs</label>
            <br/>

            <InputNumber id="TeamSize" @bind-Value="ClientQuizSettings.TeamSize" style="margin: 5px"></InputNumber>
            <label for="TeamSize">Team size (only 1 and Max are supported currently)</label>
            <br/>

            <InputNumber id="MaxLives" @bind-Value="ClientQuizSettings.MaxLives" style="margin: 5px"></InputNumber>
            <label for="MaxLives">Lives (0 for unlimited)</label>
            <br/>

            <InputNumber id="GuessMs" @bind-Value="ClientQuizSettings.GuessMs" style="margin: 5px"></InputNumber>
            <label for="GuessMs">Guess time (ms)</label>
            <br/>

            <InputNumber id="ResultsMs" @bind-Value="ClientQuizSettings.ResultsMs" style="margin: 5px"></InputNumber>
            <label for="ResultsMs">Results time (ms)</label>
            <br/>

            <InputNumber id="LootingMs" @bind-Value="ClientQuizSettings.LootingMs" style="margin: 5px"></InputNumber>
            <label for="LootingMs">Looting time (ms)</label>
            <br/>

            <InputNumber id="InventorySize" @bind-Value="ClientQuizSettings.InventorySize" style="margin: 5px"></InputNumber>
            <label for="InventorySize">Looting inventory size</label>
            <br/>

            <InputNumber id="WaitPercentage" @bind-Value="ClientQuizSettings.WaitPercentage" style="margin: 5px"></InputNumber>
            <label for="WaitPercentage">The percentage of players that need to have finished buffering in order to start the next song</label>
            <br/>

            <input style="margin: 5px" type="submit" class="btn btn-primary" value="Submit"/>
            <button style="margin: 5px" class="btn btn-warning" @onclick="ResetQuizSettings">Reset to default</button>
        </EditForm>
    </div>

    <button class="btn btn-primary" @onclick="RandomizeTags" disabled="@(Room is {Quiz.QuizState.QuizStatus: QuizStatus.Playing })">Randomize tags</button>
    <button class="btn btn-primary" @onclick="ClearTags" disabled="@(Room is {Quiz.QuizState.QuizStatus: QuizStatus.Playing })">Clear tags</button>
}

<div id="playersDiv" style="display:flex; justify-content:center; align-items:flex-end;">
    @if (Room?.Players.Any() ?? false)
    {
        @foreach (var player in Room.Players)
        {
            <div class="playerDiv" style="margin: 10px; max-width: 160px; max-height: 280px;">
                @* <p> Id: @player.Id</p> *@
                <p> Name: @player.Username</p>
                <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(player.Avatar, PlayerStatus.Default)" alt="Avatar">
            </div>
        }
    }

</div>

@* todo readying up *@
