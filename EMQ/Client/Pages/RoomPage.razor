@page "/RoomPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Request
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Client
@inject ILogger<RoomPage> _logger
@inject NavigationManager Navigation
@inject ClientUtils _clientUtils

<h3>Room</h3>

<div id="roomInfo">
    Name:<br/>
    <p>@Room?.Name</p>
    Owner:<br/>
    <p>@Room?.Owner.Username</p>
    Settings:<br/>
    <p>@JsonSerializer.Serialize(Room?.Quiz?.QuizSettings)</p>
</div>

<div id="playersDiv" style="display:flex; justify-content:center; align-items:center;">
    @if (Room?.Players.Any() ?? false)
    {
        @foreach (var player in Room.Players)
        {
            <div class="playerDiv" style="margin: 20px">
                @* <p> Id: @player.Id</p> *@
                <p> Name: @player.Username</p>
                <img width="200px" height="200px" src="@player.Avatar?.Url" alt="Avatar">
            </div>
        }
    }

</div>

<button class="btn btn-primary" disabled="@(Room?.Owner.Id != ClientState.Session?.Player.Id)" @onclick="StartQuiz">Start Quiz</button>
@* <button class="btn btn-primary" disabled="@(!Room?.Quiz?.QuizState!.IsActive)" @onclick="Hotjoin">Hotjoin Quiz</button> *@

@code {
    private Room? Room { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ClientState.Session!.hubConnection!.On("ReceivePlayerJoinedRoom", async () => { await OnReceivePlayerJoinedRoom(); });
        ClientState.Session!.hubConnection!.On("ReceiveQuizEntered", async () => { await OnReceiveQuizEntered(); });

        Room = await _clientUtils.SyncRoom();
        StateHasChanged();

        if (Room!.Quiz?.QuizState.QuizStatus != null && Room!.Quiz?.QuizState.QuizStatus != QuizStatus.Ended
            && (Room!.Quiz?.QuizSettings.IsHotjoinEnabled ?? false))
        {
            Hotjoin();
        }
    }

    private async Task StartQuiz()
    {
        if (Room!.Owner.Id == ClientState.Session!.Player.Id)
        {
            HttpResponseMessage res1 = await Client.PostAsJsonAsync("Quiz/StartQuiz", new ReqStartQuiz(ClientState.Session.Player.Id, Room.Id));
            if (res1.IsSuccessStatusCode)
            {
            }
        }
    }

    private async Task OnReceiveQuizEntered()
    {
        _logger.LogInformation("Navigating from Room to Quiz");
        Navigation.NavigateTo("/QuizPage");
    }

    private async Task OnReceivePlayerJoinedRoom()
    {
        _logger.LogInformation("Syncing room because ReceivePlayerJoinedRoom");
        Room = await _clientUtils.SyncRoom();
        StateHasChanged();
    // _logger.LogInformation(JsonSerializer.Serialize(Room));
    }

    private void Hotjoin()
    {
        _logger.LogInformation("Hotjoining Quiz");
        Navigation.NavigateTo("/QuizPage");
    }

}
