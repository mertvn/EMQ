@page "/QuizPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Client.Components
@using System.Globalization
@inject IJSRuntime _jsRuntime
@inject ILogger<QuizPage> _logger
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager
@implements IAsyncDisposable

<QuizSettingsComponent @ref="_quizSettingsComponent" Room="@Room" IsReadOnly="true" IsQuizPage="true"/>

<GenericModal @ref="@_leaveModalRef"
              Title="Leave?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await LeaveQuiz(); })">
    <span>Are you sure you want to leave the quiz? Your score will not be restored if you return.</span>
</GenericModal>

<GenericModal @ref="@_returnToRoomModalRef"
              Title="Return to room?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await ReturnToRoom(); })">
    <span>Are you sure you want to return to room? This will end the quiz for all players.</span>
</GenericModal>

<GenericModal @ref="@_inventoryModalRef"
              Title="Inventory"
              Size="@Blazorise.ModalSize.ExtraLarge">
    @if (Room?.Players.Any() ?? false)
    {
        @if (Room.QuizSettings.SongSelectionKind == SongSelectionKind.Looting && Room.QuizSettings.AllowViewingInventoryDuringQuiz)
        {
            var ownPlayer = Room.Players.SingleOrDefault(x => ClientState.Session != null && x.Id == ClientState.Session.Player.Id);
            var inventory = ownPlayer?.LootingInfo.Inventory;
            @if (inventory != null)
            {
                <ol>
                    @foreach (var treasure in inventory)
                    {
                        <li>
                            @Converters.GetSingleTitle(treasure.ValidSource.Value).LatinTitle
                        </li>
                    }
                </ol>
            }
        }
    }
</GenericModal>

<SongHistoryWrapperComponent @ref="_songHistoryWrapperComponent" SongsHistory="@ClientSongsHistory"></SongHistoryWrapperComponent>

<EditBotPlayerWrapperComponent @ref="_editBotPlayerWrapperComponent" Model="_editBotPlayerModel" IsReadOnly="true"/>

<div id="quizPageDiv">
@if (!ClientConnectionManager.IsConnected)
{
    <p style="color: @UiHelpers.Bool2Color(ClientConnectionManager.IsConnected, "green", "red")">
        @UiHelpers.Bool2Text(ClientConnectionManager.IsConnected, "Connected", "Disconnected")
    </p>
}

@if (Room?.Quiz != null)
{
    @if (Room?.Owner.Id == ClientState.Session?.Player.Id)
    {
        <button type="button" class="btn btn-primary"
                disabled="@(Room?.Owner.Id != ClientState.Session?.Player.Id || Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || Room?.Quiz?.QuizState.sp < 0)"
                @onclick="SendTogglePause"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 80px; height: 30px; z-index: 10;">
            @UiHelpers.Bool2Text(Room?.Quiz?.QuizState.IsPaused, "Unpause", "Pause")
        </button>
    }

    @if (IsSpectator)
    {
        @if (Room!.QuizSettings.AnsweringKind == AnsweringKind.Mixed)
        {
            var player = Room.Spectators.Single(x => x.Id == ClientState.Session!.Player.Id);
            <select @bind:get="@((int)player.AnsweringKind)" @bind:set="@SetAnsweringKindAsync" @bind:event="oninput">
                @foreach (var value in Enum.GetValues<AnsweringKind>().Where(x => x != AnsweringKind.Mixed))
                {
                    <option value="@((int)value)">@value.GetDescription()</option>
                }
            </select>
        }

        <button type="button" class="btn btn-primary"
                disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || !Room.QuizSettings.IsHotjoinEnabled || Room.HotjoinQueue.Any(x => x.Id == ClientState.Session!.Player.Id))"
                @onclick="SendHotjoinQuiz"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
            @UiHelpers.Bool2Text(Room?.HotjoinQueue.Any(x => x.Id == ClientState.Session!.Player.Id), $"Hotjoining...", "Hotjoin Quiz")
        </button>
    }
    else
    {
        int isSkippingCount = Room!.Players.Count(x => !x.IsBot && x.IsSkipping);
        int skipNumber = (int)Math.Round((float)Room.Players.Count(x => !x.IsBot) * 0.8, MidpointRounding.AwayFromZero);
        <button type="button" class="btn btn-primary"
                disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || Room?.Quiz?.QuizState.sp < 0 || (Room?.Quiz?.QuizState.IsPaused ?? false) || (Room?.QuizSettings.GamemodeKind != GamemodeKind.Radio && !(Room?.Quiz?.QuizState.RemainingMs > 2000 && Room?.Quiz?.QuizState.Phase is QuizPhaseKind.Guess or QuizPhaseKind.Results)))"
                @onclick="SendToggleSkip"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
            @UiHelpers.Bool2Text(Room?.Players.SingleOrDefault(x => x.Id == ClientState.Session?.Player.Id)?.IsSkipping, $"Skipping {isSkippingCount}/{skipNumber}", "Skip")
        </button>
    }

    <button type="button" id="buttonQuizSettings" class="btn btn-secondary" style="position: relative; top: 2px; left: 2px; padding: 2px; margin: 2px; width: 120px; height: 30px; z-index: 10;"
            @onclick="@(() => _quizSettingsComponent!.OnclickShowQuizSettings())">
        Room Settings
    </button>

    <button type="button" id="buttonSongHistory" class="btn btn-secondary" style="position: relative; top: 2px; left: 2px; padding: 2px; margin: 2px; width: 120px; height: 30px; z-index: 10;"
            @onclick="@(() => OnClickButtonSongHistory(true))">
        Song History
    </button>

    @if (Room != null && Room.QuizSettings.SongSelectionKind == SongSelectionKind.Looting && Room.QuizSettings.AllowViewingInventoryDuringQuiz)
    {
        <button type="button" id="buttonInventory" class="btn btn-secondary" style="position: relative; top: 2px; left: 2px; padding: 2px; margin: 2px; width: 120px; height: 30px; z-index: 10;"
                @onclick="@(() => _inventoryModalRef?.Show())">
            Inventory
        </button>
    }

    <button type="button" class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="@(async () => await ResetVideo())"
            style="display: none; position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 160px; height: 30px; z-index: 10;">
        Reload video player
    </button>

    <button type="button" class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="@(async () => await PlayVideo())"
            style="display: none; position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 160px; height: 30px; z-index: 10;">
        Play video
    </button>

    @if (Room?.Owner.Id == ClientState.Session?.Player.Id)
    {
        <button type="button" class="btn btn-warning"
                disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || Room?.Quiz?.QuizState.sp < 0 || Room?.Quiz?.QuizState.Phase != QuizPhaseKind.Results)"
                @onclick="@(() => _returnToRoomModalRef?.Show())"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
            Return to room
        </button>
    }

    <button type="button" class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="@(() => _leaveModalRef?.Show())"
            style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 60px; height: 30px; z-index: 10;">
        Leave
    </button>

    @if (ClientState.Session?.Player != null)
    {
        <div style="display: inline-block;">
            <div style="max-width: 400px; display: flex; align-items: center; align-content: center;">
                <Blazorise.Slider style="max-width: 100px;" id="QPVolumeMaster" @bind-Value="@ClientState.Preferences.VolumeMaster" Min="0" Max="100"/>
                <label for="QPVolumeMaster" style="margin-left: 5px;">Master Volume</label>
                <br/>
            </div>
        </div>
    }

    // todo move to chat component
    @if (Room!.Spectators.Any())
    {
        <div style="padding: 2px; margin: 5px; position: fixed; top: 10vh; left: 0; text-align: center; overflow: auto">
            Spectators:
            <ul style="padding-left: 0">
                @foreach (var spectator in Room.Spectators)
                {
                    <li>@spectator.Username</li>
                }
            </ul>
        </div>
    }
}

<div id="numSongsContainer" style="display:flex; justify-content:center; align-items:center;">
    <span id="sp">@(Room?.Quiz?.QuizState.sp + 1)</span>/<span id="numSongs"> @Room?.Quiz?.QuizState.NumSongs</span>
</div>

@if (PageState.IsDebug)
{
    <div style="visibility: @UiHelpers.Bool2Vis(PageState.IsDebug)">
        <p>Quiz status: @Room?.Quiz?.QuizState.QuizStatus</p>
        @* <p>Phase: @_quizState.Phase</p> *@
        <p>RemainingMs: @Room?.Quiz?.QuizState.RemainingMs</p>
        <p>sp: @Room?.Quiz?.QuizState.sp</p>
    </div>

    <div style="float:right;">
        @foreach (var debug in PageState.DebugOut)
        {
            <p style="padding: 0; margin:0;">@debug</p>
        }
    </div>
}

@if (Room?.Chat != null)
{
    <ChatComponent @ref="_chatComponent"></ChatComponent>
}

<div id="correctAnswerInfoDiv"
     style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility || _currentSong != null && (_currentSong.Sources.Any() || _currentSong.Artists.Any() || _currentSong.Titles.Any()));
      width: 19vw; min-height: 21vh; max-height: 93vh; float:right; padding-right: 20px">

    @if (_correctAnswer != null || _currentSong != null) // necessary for hints to show up on the first song because of SongInfoCardComponent.ShouldRender()
    {
        <SongInfoCardComponent
            Song="@(_correctAnswer ?? _currentSong)"
            ShowDevelopers="@(Room != null && Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Developer, out var d) && d)"
            IsQuizPage="true"/>
    }

    @if (ClientState.Session != null && Room?.Quiz != null && ClientSongsHistory.TryGetValue(Room.Quiz.QuizState.sp, out var songHistory))
    {
        bool ownPgiExists = songHistory.PlayerGuessInfos.TryGetValue(ClientState.Session.Player.Id, out var ownPgi1);
        if (ownPgiExists)
        {
            var ownPgi = ownPgi1!.GetValueOrDefault(GuessKind.Mst);
            @if (ownPgi.PlayerSongStats != null && ownPgi.PlayerSongStats.TimesPlayed > 0)
            {
                <div class="card" id="playerSongStatsCard">
                    <div class="card-body">
                        <h5>My song stats</h5>

                        <div class="playerSongStatsGuessRate">
                            Guess rate: @(Math.Round(ownPgi.PlayerSongStats.CorrectPercentage, 2))% (@(ownPgi.PlayerSongStats.TimesCorrect)/@(ownPgi.PlayerSongStats.TimesPlayed))
                        </div>
                        @if (ownPgi.PlayerSongStats.TimesGuessed > 0)
                        {
                            <div class="playerSongStatsGuessTime">
                                Average guess time: @(Math.Round((float)ownPgi.PlayerSongStats.AverageGuessMs / 1000, 2))s (@ownPgi.PlayerSongStats.TimesGuessed)
                            </div>
                        }

                    </div>
                </div>
            }

            @if (ClientState.Preferences.ShowSpacedRepetitionInfo && ownPgi.PreviousUserSpacedRepetition != null && ownPgi.CurrentUserSpacedRepetition != null)
            {
                <div class="card" id="spacedRepetitionCard">
                    <div class="card-body">
                        <h5>Spaced repetition info</h5>
                        <ul>
                            @if (ownPgi.PreviousUserSpacedRepetition.due_at != default)
                            {
                                <details>
                                    <summary>Previous</summary>
                                    <li>
                                        Interval: @ownPgi.PreviousUserSpacedRepetition.interval_days days
                                    </li>
                                    <li>
                                        Due date: @ownPgi.PreviousUserSpacedRepetition.due_at.ToString("s")
                                    </li>
                                    <li>
                                        Review date: @ownPgi.PreviousUserSpacedRepetition.reviewed_at.ToString("s")
                                    </li>
                                </details>
                            }
                            <details open>
                                <summary>New</summary>
                                <li>
                                    Interval: @ownPgi.CurrentUserSpacedRepetition.interval_days days
                                </li>
                                <li>
                                    Due date: @ownPgi.CurrentUserSpacedRepetition.due_at.ToString("s")
                                </li>
                            </details>
                        </ul>
                    </div>
                </div>
            }
        }
    }
</div>

@{
    int count = EnabledGuessKindCount;
    float width = 40 - (1.2f * count);
    float height = 44 - (4.5f * count);
    float playerHeight = 8.6f + (2.5f * count);
    string widthStr = $"{width.ToString(CultureInfo.InvariantCulture)}vw";
    string heightStr = $"{height.ToString(CultureInfo.InvariantCulture)}vh";
    string playerHeightStr = $"{playerHeight.ToString(CultureInfo.InvariantCulture)}vh";
}

<div id="quizGrid" style="display:grid; justify-content:center; align-items:center;">

    <ul id="correctAnswerSources" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility); width: @widthStr; min-height: 52px">
        @if (_correctAnswer?.Sources != null)
        {
            foreach (SongSource source in _correctAnswer.Sources)
            {
                var sourceTitle = Converters.GetSingleTitle(source.Titles);
                <li class="correctAnswerSourceTitle">
                    @* todo? autoresize text *@
                    @sourceTitle.ToString()
                </li>
            }
        }
    </ul>

<div class="videoWrapper"
     style="position: relative; background: dimgrey; width:@widthStr; height:@heightStr; cursor: @UiHelpers.Bool2CursorPointer(PageState.VideoPlayerVisibility)"
     onclick="@(() => { if (PageState.VideoPlayerVisibility || Room?.QuizSettings.Filters.ScreenshotKind != ScreenshotKind.None) ClientState.Preferences.HideVideo = !ClientState.Preferences.HideVideo; })">

    @if (ClientState.Preferences.HideVideo &&
         (PageState.VideoPlayerVisibility || Room?.QuizSettings.Filters.ScreenshotKind != ScreenshotKind.None))
    {
        <p style="position: absolute; top: 40%; right: 22%; font-size: xxx-large; color: white; z-index: 3000">Click to show video</p>

        @if (_correctAnswer != null)
        {
            @if (_correctAnswer.Attributes.HasFlag(SongAttributes.Spoilers))
            {
                <p style="position: absolute; top: 55%; right: 22%; font-size: xxx-large; color: white; z-index: 3000">Contains spoilers!</p>
            }

            @if (_correctAnswer.Attributes.HasFlag(SongAttributes.FlashingLights))
            {
                <p style="position: absolute; top: 70%; right: 14%; font-size: xxx-large; color: white; z-index: 3000">Contains flashing lights!</p>
            }
        }
    }

    <div class="videoPlayer" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility && !ClientState.Preferences.HideVideo)">

            @{
                string? video1Src;
                string? video2Src;

                if (VisibleVideoElementId == "video1")
                {
                    video1Src = _currentSong != null && _currentSong.Links.Any() ? $"{_currentSong?.Links.First().Url}#t={_currentSong?.StartTime}" : null;
                    video2Src = _nextSong != null && _nextSong.Links.Any() ? $"{_nextSong?.Links.First().Url}#t={_nextSong?.StartTime}" : null;

                    if (!(ClientState.Preferences.MuteWhenDuca && IsDuca) && DateTime.UtcNow - LastSetVideoMuted > TimeSpan.FromMilliseconds(10))
                    {
                        LastSetVideoMuted = DateTime.UtcNow;
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video2", "muted");
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video1", "");
                    }
                }
                else
                {
                    video2Src = _currentSong != null && _currentSong.Links.Any() ? $"{_currentSong?.Links.First().Url}#t={_currentSong?.StartTime}" : null;
                    video1Src = _nextSong != null && _nextSong.Links.Any() ? $"{_nextSong?.Links.First().Url}#t={_nextSong?.StartTime}" : null;

                    if (!(ClientState.Preferences.MuteWhenDuca && IsDuca) && DateTime.UtcNow - LastSetVideoMuted > TimeSpan.FromMilliseconds(10))
                    {
                        LastSetVideoMuted = DateTime.UtcNow;
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video1", "muted");
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video2", "");
                    }
                }
            }

            <video src="@(video1Src)"
                   id="video1" autoplay
                   style="background: black; display: @UiHelpers.Bool2Display(VisibleVideoElementId == "video1"); width: @widthStr; height: @heightStr;">
            </video>

            <video src="@(video2Src)"
                   id="video2" autoplay
                   style="background: black; display: @UiHelpers.Bool2Display(VisibleVideoElementId == "video2"); width: @widthStr; height: @heightStr;">
            </video>

            @if (PageState.VideoPlayerVisibility && _currentSong is not null && (!_currentSong.Links.FirstOrDefault()?.Url.IsVideoLink() ?? false))
            {
                @if (ClientState.Preferences.ShowVndbCovers && !string.IsNullOrEmpty(_currentSong.CoverUrl))
                {
                    <div id="vnCoverDiv" style="position: absolute; top: 0; right: 0; cursor: pointer; visibility: @UiHelpers.Bool2Vis(!ClientState.Preferences.HideVideo);">
                        <img src="@_currentSong.CoverUrl" alt="" style="object-fit: contain; width:@widthStr; height:@heightStr;">
                    </div>
                }
                else
                {
                    <p style="position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); font-size: xxx-large; color: white; z-index: 3000">Sound only</p>
                }
            }
    </div>

        <div id="quizInfoDiv" style="position: absolute; top: 3%; left: 3%; font-size: xx-large; color: white; z-index: 3000;">
            @if (Room?.Quiz?.QuizState.IsPaused ?? false)
            {
                <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                    Paused
                </p>
            }

            <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                @(Room?.Quiz?.QuizState.ExtraInfo)
            </p>

            @if (Room is {Quiz: { } })
            {
                @if (Room.Quiz.QuizState.RemainingMs <= 0)
                {
                    List<Player> buffered = Room.Players.Where(x => x.IsBuffered).ToList();
                    List<Player> notBuffered = Room.Players.Where(x => !x.IsBuffered && !x.IsBot).ToList();
                    @if (buffered.Count > 0 && notBuffered.Count < 5)
                    {
                        // TODO: this says that we are waiting on inactive players even though we actually aren't
                        @foreach (Player player in notBuffered)
                        {
                            <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000; font-size: x-large;">
                                Waiting for @player.Username
                            </p>
                        }
                    }
                }
            }
        </div>

    @if (!PageState.VideoPlayerVisibility)
    {
        @if (!string.IsNullOrEmpty(_currentSong?.ScreenshotUrl))
        {
            <div id="screenshotDiv" style="position: absolute; top: 0; right: 0; cursor: pointer; visibility: @UiHelpers.Bool2Vis(!ClientState.Preferences.HideVideo);">
                <img src="@_currentSong.ScreenshotUrl" alt="" style="object-fit: contain; width:@widthStr; height:@heightStr;">
            </div>
        }
        else
        {
            <div id="countdownDiv" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); font-size: xxx-large; color: white;">
                @((int)Math.Round(PageState.Countdown / 1000))
            </div>
        }
    }
</div>

<div class="progress" style="height: 5px; max-width: @widthStr">
    <div class="progress-bar" role="progressbar" style="transition: width .017s ease; width:@(PageState.ProgressValue)%"></div>
</div>

@if (IsMultipleChoice || (IsSpectator && Room != null && Room.Quiz != null && Room.Quiz.MultipleChoiceOptions.Any()))
{
    <div id="GuessInput" style="padding-left: 10px; padding-right: 10px; margin-top: 10px;
                         pointer-events:@UiHelpers.Bool2PointerEvents(!PageState.VideoPlayerVisibility);">
        @{
            int div = Math.Min((Room?.QuizSettings.NumMultipleChoiceOptions / 4) ?? 1, 4);
            int vw = (16 / div) + 5;
        }

        <div id="MultipleChoiceContainer"
             style="width: 50vw; display: grid; grid-template-columns: repeat(auto-fit, minmax(0, min(100%/1, max(@(vw)vw, 100%/@(div + 1))))); row-gap: 5px; justify-items: center;">
            @if (Room!.Quiz?.MultipleChoiceOptions != null && Room.Quiz.QuizState.sp >= 0)
            {
                if (Room.Quiz.MultipleChoiceOptions.TryGetValue(Room.Quiz.QuizState.sp, out var current))
                {
                    foreach (var title in current)
                    {
                        string displayTitle = ClientState.Preferences.WantsOriginalTitle ? (title.NonLatinTitle ?? title.LatinTitle) : title.LatinTitle;
                        bool selected = PageState.Guess?.Dict[GuessKind.Mst] == title.LatinTitle;
                        <div class="MultipleChoiceOption" title="@(title.ToString())"
                             @onclick="@(async () => { if (!IsSpectator) await SetGuess(new PlayerGuess { Dict = { [GuessKind.Mst] = title.LatinTitle } }); })"
                             style="
cursor: @UiHelpers.Bool2CursorPointer(!IsSpectator);
color: @UiHelpers.Bool2Color(selected, "deepskyblue", "white");
width: @(vw)vw;
/*height: 26px;*/
max-height: 100px;
max-width: 100%;
overflow: hidden;
text-overflow: ellipsis;
/*white-space: nowrap;*/
background-color: black;
border-radius: 10px;
padding: 1px 5px 1px 5px;
text-align: center;
/*causes issues when overflow is hidden*/
/*display: flex;*/
/*justify-content: center;*/
/*align-items: center;*/
word-wrap: break-word;
">
                            @displayTitle
                        </div>
                    }
                }
            }
        </div>
        <br/>
    </div>
}
else
{
    <div id="GuessInput" style="max-width:@widthStr; padding-left: 10px; padding-right: 10px; margin-top: 10px;
                         pointer-events:@UiHelpers.Bool2PointerEvents(!PageState.VideoPlayerVisibility);">

        @if (Room != null)
        {
            // do not modify Placeholder texts without changing the javascript file as well
            @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Mst, out bool mst) && mst)
            {
                <GuessInputComponent @ref="AutocompleteComponentDict[GuessKind.Mst]"
                                     Placeholder="Enter your guess here"
                                     IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                     IsQuizPage="true"
                                     @bind-Guess="@PageState.Guess.Dict[GuessKind.Mst]">
                </GuessInputComponent>
            }

            @if (ClientState.Preferences.SwapArtistNameAndSongTitleDropdowns)
            {
                @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Mt, out bool mt) && mt)
                {
                    <AutocompleteMtComponent @ref="AutocompleteComponentDict[GuessKind.Mt]"
                                             Placeholder="Enter song title here"
                                             IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                             IsQuizPage="true"
                                             @bind-Guess="@PageState.Guess.Dict[GuessKind.Mt]">
                    </AutocompleteMtComponent>
                }

                @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.A, out bool a) && a)
                {
                    <AutocompleteAComponent @ref="AutocompleteComponentDict[GuessKind.A]"
                                            Placeholder="Enter artist name here"
                                            IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                            IsQuizPage="true"
                                            GuessKind="GuessKind.A"
                                            @bind-GuessLatin="@PageState.Guess.Dict[GuessKind.A]">
                    </AutocompleteAComponent>
                }
            }
            else
            {
                @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.A, out bool a) && a)
                {
                    <AutocompleteAComponent @ref="AutocompleteComponentDict[GuessKind.A]"
                                            Placeholder="Enter artist name here"
                                            IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                            IsQuizPage="true"
                                            GuessKind="GuessKind.A"
                                            @bind-GuessLatin="@PageState.Guess.Dict[GuessKind.A]">
                    </AutocompleteAComponent>
                }

                @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Mt, out bool mt) && mt)
                {
                    <AutocompleteMtComponent @ref="AutocompleteComponentDict[GuessKind.Mt]"
                                             Placeholder="Enter song title here"
                                             IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                             IsQuizPage="true"
                                             @bind-Guess="@PageState.Guess.Dict[GuessKind.Mt]">
                    </AutocompleteMtComponent>
                }
            }

            @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Rigger, out bool rigger) && rigger)
            {
                <AutocompletePlayerComponent @ref="AutocompleteComponentDict[GuessKind.Rigger]"
                                     Placeholder="Enter player name here"
                                     IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                     IsQuizPage="true"
                                     @bind-Guess="@PageState.Guess.Dict[GuessKind.Rigger]"
                                     AutocompleteData="Room.Players.Select(x => x.Username).ToArray()">
                </AutocompletePlayerComponent>
            }

            @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Developer, out bool developer) && developer)
            {
                <AutocompleteDeveloperComponent @ref="AutocompleteComponentDict[GuessKind.Developer]"
                                             Placeholder="Enter developer name here"
                                             IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                             IsQuizPage="true"
                                             @bind-Guess="@PageState.Guess.Dict[GuessKind.Developer]">
                </AutocompleteDeveloperComponent>
            }

            @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Composer, out bool c) && c)
            {
                <AutocompleteAComponent @ref="AutocompleteComponentDict[GuessKind.Composer]"
                                        Placeholder="Enter composer name here"
                                        IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                        IsQuizPage="true"
                                        GuessKind="GuessKind.Composer"
                                        @bind-GuessLatin="@PageState.Guess.Dict[GuessKind.Composer]">
                </AutocompleteAComponent>
            }

            @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Arranger, out bool arr) && arr)
            {
                <AutocompleteAComponent @ref="AutocompleteComponentDict[GuessKind.Arranger]"
                                        Placeholder="Enter arranger name here"
                                        IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                        IsQuizPage="true"
                                        GuessKind="GuessKind.Arranger"
                                        @bind-GuessLatin="@PageState.Guess.Dict[GuessKind.Arranger]">
                </AutocompleteAComponent>
            }

            @if (Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Lyricist, out bool l) && l)
            {
                <AutocompleteAComponent @ref="AutocompleteComponentDict[GuessKind.Lyricist]"
                                        Placeholder="Enter lyricist name here"
                                        IsDisabled="@(Room.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                                        IsQuizPage="true"
                                        GuessKind="GuessKind.Lyricist"
                                        @bind-GuessLatin="@PageState.Guess.Dict[GuessKind.Lyricist]">
                </AutocompleteAComponent>
            }
        }

    </div>
}

    <div id="playersDiv" style="display:flex; margin: auto; align-items:flex-end; max-width: 65vw; overflow-x: auto;">
        @if (Room?.Players.Any() ?? false)
        {
            var ownPlayer = Room.Players.SingleOrDefault(x => ClientState.Session != null && x.Id == ClientState.Session.Player.Id) ??
                            Room.Spectators.SingleOrDefault(x => ClientState.Session != null && x.Id == ClientState.Session.Player.Id);

            IGrouping<int, Player>? team1 = null;
            IGrouping<int, Player>? team2 = null;
            @if (Room.QuizSettings.GamemodeKind == GamemodeKind.NGMC)
            {
                var teams = Room.Players.GroupBy(x => x.TeamId).ToArray();
                team1 = teams.ElementAtOrDefault(0);
                team2 = teams.ElementAtOrDefault(1);
            }

            @foreach (var player in Room.Players)
            {
                if (_playerGuesses.TryGetValue(player.Id, out var playerGuess))
                {
                }

                string boxShadowColor = player.PlayerStatus switch
                {
                    PlayerStatus.Guessed => "#ff0",
                    PlayerStatus.Correct => "#0f0",
                    PlayerStatus.Wrong => "#f00",
                    _ => "initial"
                    };

                <div class="playerDiv"
                     style="margin: 10px; max-width: 160px; opacity: @UiHelpers.Bool2Text(player.HasActiveConnectionQuiz, "inherit", "0.5");
box-shadow: inset 0 0 2px @boxShadowColor, 0 0 5px @boxShadowColor, 0 0 5px @boxShadowColor, 0 0 5px @boxShadowColor;">
                    <div class="playerGuessDiv" style="visibility: @UiHelpers.Bool2Vis(PageState.GuessesVisibility);
                                     cursor: @UiHelpers.Bool2CursorPointer(Room?.Quiz?.QuizState.Phase == QuizPhaseKind.Guess && (playerGuess?.Dict.Any(x => !string.IsNullOrWhiteSpace(x.Value)) ?? false));"
                         @onclick="@(() => SetGuess(playerGuess ?? new PlayerGuess()))">
                        <div class="playerIsCorrectDiv" style="display: flex; justify-content:center; align-items:center;">
                            <span class="playerGuessSpan" style="word-wrap: anywhere; height: @playerHeightStr; display: block; z-index: 5; padding: 2px;
                                                                 color: @UiHelpers.Bools2Color(player.PlayerStatus == PlayerStatus.Correct, player.PlayerStatus is PlayerStatus.Wrong or PlayerStatus.Dead, "green", "red")">
                                @if (playerGuess != null)
                                {
                                    @if (Room != null && Room.QuizSettings.EnabledGuessKinds.Count(x => x.Value) > 1)
                                    {
                                        bool swap = ClientState.Preferences.SwapArtistNameAndSongTitleDropdowns &&
                                                    Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.A, out bool a) && a &&
                                                    Room.QuizSettings.EnabledGuessKinds.TryGetValue(GuessKind.Mt, out bool mt) && mt;
                                        <ul style="list-style: none; padding: 0; margin: 0;">
                                            @foreach ((GuessKind key, bool value) in Room.QuizSettings.EnabledGuessKinds)
                                            {
                                                // meh.
                                                var k = key;
                                                @if (swap)
                                                {
                                                    k = key switch
                                                    {
                                                        GuessKind.A => GuessKind.Mt,
                                                        GuessKind.Mt => GuessKind.A,
                                                        _ => k
                                                        };
                                                }

                                                @if (value)
                                                {
                                                    bool? isCorrect = null;
                                                    _ = player.IsGuessKindCorrectDict?.TryGetValue(k, out isCorrect);
                                                    <li style="color: @UiHelpers.Bool2Color(isCorrect, "green", "red"); display: flex; align-items: flex-start;">
                                                        <span style="margin-right: 6px;">•</span>
                                                        <AutoResizeText Text="@(playerGuess.Dict[k])" MinFontSize="8" MaxFontSize="16" ContainerSelector=".playerIsCorrectDiv"/>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <AutoResizeText Text="@(playerGuess.ToString())" MinFontSize="8" MaxFontSize="16"/>
                                    }
                                }
                            </span>
                        </div>
                    </div>

                    @if (Room != null && Room.QuizSettings.GamemodeKind == GamemodeKind.NGMC)
                    {
                        <span class="playerNGMCGuessesCurrent"> Guesses: @player.NGMCGuessesCurrent</span>
                    }

                    @if (Room?.QuizSettings.MaxLives > 0)
                    {
                        <span class="playerLives"> Lives: @player.Lives</span>
                    }

                    <div style="position: relative">
                        @{
                            Avatar avatar = ClientState.Preferences.ForceDefaultAvatar ? Avatar.DefaultAvatar : player.Avatar;
                        }
                        <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(avatar, player.PlayerStatus)" alt="Avatar" class="@player.PlayerStatus">

                        @if (Room != null && Room.QuizSettings.GamemodeKind == GamemodeKind.NGMC)
                        {
                            @if (ownPlayer != null && !IsSpectator && player.TeamId == ownPlayer.TeamId)
                            {
                                var ownTeam = ownPlayer.TeamId == 1 ? team1 : team2;
                                var ownTeamCaptain = ownTeam?.First();
                                @if (ownTeamCaptain?.Id == ownPlayer.Id)
                                {
                                    bool canBurn = ownTeamCaptain.NGMCCanBurn && Room.QuizSettings.NGMCAllowBurning;
                                    bool canBePicked = player.NGMCCanBePicked;

                                    @if (canBurn)
                                    {
                                        @if (player.Id == ownTeamCaptain.Id)
                                        {
                                            <button type="button" class="btn btn-secondary" disabled="@(!canBurn)" @onclick="@(() => NGMCDontBurn())"
                                                    style="position: absolute; top: 39%; left: 33%; margin: 2px; padding: 2px; width: 60px; z-index: 10;">
                                                Skip burning
                                            </button>
                                        }

                                        @if (player.NGMCGuessesCurrent > 0)
                                        {
                                            <button type="button" class="btn btn-danger" disabled="@(!canBurn)" @onclick="@(() => NGMCBurnPlayer(player.Id))"
                                                    style="position: absolute; top: 69%; left: 33%; margin: 2px; padding: 2px; width: 60px; height: 30px; z-index: 10;">
                                                Burn
                                            </button>
                                        }
                                    }
                                    else if (canBePicked)
                                    {
                                        <button type="button" class="btn btn-success" disabled="@(!canBePicked)" @onclick="@(() => NGMCPickPlayer(player.Id))"
                                                style="position: absolute; top: 69%; left: 33%; margin: 2px; padding: 2px; width: 60px; height: 30px; z-index: 10;">
                                            Pick
                                        </button>
                                    }
                                }
                            }
                        }

                        <div style="background-color:rgba(0, 0, 0, 0.9); height:25px; width: 160px; display: flex; justify-content:center; align-items:center;">
                            <span class="scoreSpan" style="color: white; position: absolute; bottom: 0; left: 0; height:25px; width: 18px;">
                                <AutoResizeText Text="@player.Score.ToString()" ContainerSelector=".scoreSpan"/>
                            </span>

                            @if (Room != null && Room.QuizSettings.AnsweringKind == AnsweringKind.Mixed)
                            {
                                string answeringKindStr = player.AnsweringKind == AnsweringKind.Typing ? "✎" : "⌸";
                                <span style="color: white; text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;
                                 position: absolute; bottom: 14%; left: 2%;">
                                    @answeringKindStr
                                </span>
                            }

                            @if (player.IsBot)
                            {
                                <span style="color: white; text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;
                                 position: absolute; bottom: 14%; font-weight: bold; font-size: large;">
                                    Bot
                                </span>
                            }

                            @if (UserDetailsDict.TryGetValue(player.Id, out var userInfo))
                            {
                                string tooltipText = $"<ul><li>Song count: {userInfo.SongCount}</li><li>Guess rate: {userInfo.GuessRate}%</li></ul>";
                                <Blazorise.Tooltip Text="@tooltipText">
                                    <span style="color: white; max-width: 130px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer;"
                                          @onclick="@(() => Onclick_Username(player.Id))">
                                        @player.Username
                                    </span>
                                </Blazorise.Tooltip>
                            }
                            else
                            {
                                <span style="color: white; max-width: 130px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer;"
                                      @onclick="@(() => Onclick_Username(player.Id))">
                                    @player.Username
                                </span>
                            }

                            @{
                                if (_correctAnswerPlayerLabels.ContainsKey(player.Id))
                                {
                                    var labels = _correctAnswerPlayerLabels[player.Id];
                                    @if (labels.Any() && (labels.First().Name == "Looted" || labels.First().VNs.Any())) // todo this is a band-aid
                                    {
                                        @* todo *@
                                        string text = labels.First().Name == "Looted" ? "L" : (labels.First().VNs.First().Value / 10f).ToString(CultureInfo.InvariantCulture);

                                        @* todo special cases for default labels (S for Stalled etc.) *@
                                        text = text == "-0.1" ? "V" : text;

                                        <div style="position: absolute; top: 0; right: 2%; visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility);">
                                            <Blazorise.Tooltip Text="@string.Join(", ", labels.Select(x => x.Name))">
                                                <span style="color: white; font-weight: bold; font-size: 25px; text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                                                    @(text)
                                                </span>
                                            </Blazorise.Tooltip>
                                        </div>
                                    }
                                }

                                if (_correctAnswerPlayerVotes.ContainsKey(player.Id))
                                {
                                    string text = (_correctAnswerPlayerVotes[player.Id] / 10f).ToString(CultureInfo.InvariantCulture);
                                    <div style="position: absolute; bottom: 10%; right: 2%; visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility);">
                                        <span style="color: white; font-weight: bold; font-size: 25px; text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                                            @(text)
                                        </span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }

    </div>
</div>
</div>
