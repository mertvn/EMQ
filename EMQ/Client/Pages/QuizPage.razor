@page "/QuizPage"
@using Microsoft.Extensions.Logging
@using System.Timers
@using System.Threading
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Request
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Response
@using Microsoft.AspNetCore.SignalR.Client
@using Timer = System.Timers.Timer
@using System.Text.Encodings.Web
@using EMQ.Shared.Core
@inject IJSRuntime _jsRuntime
@inject ILogger<QuizPage> _logger
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager
@implements IAsyncDisposable

<CascadingValue Value="@this" IsFixed="true">
    @if (!_clientConnectionManager.IsConnected)
    {
        <p style="color: @UiHelpers.Bool2Color(_clientConnectionManager.IsConnected, "green", "red")">
            @UiHelpers.Bool2Text(_clientConnectionManager.IsConnected, "Connected", "Disconnected")
        </p>
    }

    @if (Room?.Owner.Id == ClientState.Session?.Player.Id)
    {
        <button class="btn btn-primary" disabled="@(Room?.Owner.Id != ClientState.Session?.Player.Id)" @onclick="SendPauseQuiz"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 80px; height: 30px;">
            @UiHelpers.Bool2Text(Room?.Quiz?.QuizState.IsPaused, "Unpause", "Pause")
        </button>
    }

    <button class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="Onclick_Leave"
            style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 60px; height: 30px;">
        Leave
    </button>

    <div style="display:flex; justify-content:center; align-items:center;">
        <p style="">@(Room?.Quiz?.QuizState.sp + 1)/@Room?.Quiz?.QuizState.NumSongs</p>
    </div>

    @if (PageState.IsDebug)
    {
        <div style="visibility: @UiHelpers.Bool2Vis(PageState.IsDebug)">
            <p>Quiz status: @Room?.Quiz?.QuizState.QuizStatus</p>
            @* <p>Phase: @_quizState.Phase</p> *@
            <p>RemainingMs: @Room?.Quiz?.QuizState.RemainingMs</p>
            <p>sp: @Room?.Quiz?.QuizState.sp</p>
        </div>

        <div style="float:right;">
            @foreach (var debug in PageState.DebugOut)
            {
                <p style="padding: 0; margin:0;">@debug</p>
            }
        </div>
    }

    <div id="correctAnswerInfoDiv" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility); min-width:200px; max-width: 400px; min-height:200px; float:right; padding-right: 20px">
        @* todo Latin vs NonLatin title option *@
        <SongInfoCardComponent song="@_correctAnswer" selectedMusicSourceTitle="@null"/>
    </div>

    <div id="quizGrid" style="display:grid; justify-content:center; align-items:center;">

        <div id="correctAnswerSourceDiv" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility); max-width: 720px;">
            @JsonSerializer.Serialize(_correctAnswer?
                .Sources.SelectMany(x => x.Titles)
                .Where(x => x.Language is "ja" or "en" or "tr") // todo
                .Select(x => x.LatinTitle).Concat(_correctAnswer?
                    .Sources.SelectMany(x => x.Titles)
                    .Where(x => x.Language is "ja" or "en" or "tr") // todo
                    .Select(x => x.NonLatinTitle).Where(x => x != null)!).Distinct(), Utils.Jso)
        </div>

        <div class="videoWrapper" style="position: relative; background: dimgrey; width:720px; height:400px;">
            <div class="videoPlayer" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility)">
                @* TODO: How to select The One Link? *@
                <video src="@(string.IsNullOrEmpty(_currentSong?.Data) ? _currentSong?.Links.First().Url : _currentSong?.Data)#t=@(_currentSong?.StartTime)"
                       id="video" width="720px" height="400px" autoplay="autoplay" style="background: black;">
                </video>
                @if (PageState.VideoPlayerVisibility && _currentSong is not null && !_currentSong.Links.First().Url.IsVideoLink())
                {
                    <p style="position: absolute; top: 40%; right: 33%; font-size: xxx-large; color: white; z-index: 300000">Sound only</p>
                }
            </div>

            <div id="quizExtraInfoDiv" style="position: absolute; top: 3%; left: 3%; font-size: xx-large; color: white; z-index: 300000;">
                <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                    @(Room?.Quiz?.QuizState.ExtraInfo)
                </p>
            </div>

            @if (!PageState.VideoPlayerVisibility)
            {
@* TODO: properly center this *@
                <div id="countdownDiv" style="position: absolute; top: 40%; right: 45%; font-size: xxx-large; color: white;">
                    @((int) Math.Round(PageState.Countdown / 1000))
                </div>
            }
        </div>

        <div class="progress" style="height: 5px; max-width: 720px">
            <div class="progress-bar" role="progressbar" style="transition: width .017s ease; width:@(PageState.ProgressValue)%"></div>
        </div>

        <div id="GuessInput" style="max-width:720px; padding-left: 10px; padding-right: 10px; margin-top: 10px;
             pointer-events:@UiHelpers.Bool2PointerEvents(!PageState.VideoPlayerVisibility);">
            @* todo should be false on judgement phase as well *@
            <GuessInputComponent @ref="_guessInputComponent"></GuessInputComponent>
        </div>

        <div id="playersDiv" style="display:flex; justify-content:center; align-items:flex-end;">
            @if (Room?.Players.Any() ?? false)
            {
                @foreach (var player in Room.Players)
                {
                    <div class="playerDiv" style="margin: 20px; max-width: 200px; max-height: 320px;">
                        <div class="playerGuessDiv" style="display: @UiHelpers.Bool2Display(PageState.GuessesVisibility)">
                            <div class="playerIsCorrectDiv">
                                <p style="color: @UiHelpers.Bools2Color(player.PlayerStatus == PlayerStatus.Correct, player.PlayerStatus is PlayerStatus.Wrong or PlayerStatus.Dead, "green", "red")"> @player.Guess</p>
                            </div>
                        </div>
                        @* <p> Id: @player.Id</p> *@
                        <p> Name: @player.Username</p>
                        <p> Score: @player.Score</p>

                        @if (Room?.QuizSettings.MaxLives > 0)
                        {
                            <p> Lives: @player.Lives</p>
                        }

                        <img width="200px" height="200px" src="@Avatar.GetUrlByPlayerState(player.Avatar, player.PlayerStatus)" alt="Avatar">
                    </div>
                }
            }

        </div>
    </div>

</CascadingValue>

@code {

    public QuizPage()
    {
        _handlers = new()
        {
            { "ReceiveQuizStarted", (new Type[] { }, async _ => { await OnReceiveQuizStarted(); }) },
            { "ReceiveQuizEnded", (new Type[] { }, async _ => { await OnReceiveQuizEnded(); }) },
            { "ReceiveResyncRequired", (new Type[] { }, async _ => { await OnReceiveResyncRequired(); }) },
            { "ReceivePhaseChanged", (new Type[] { typeof(int) }, async phase => { await OnReceivePhaseChanged((int) phase[0]!); }) },
            { "ReceiveCorrectAnswer", (new Type[] { typeof(Song) }, async correctAnswer => { await OnReceiveCorrectAnswer((Song) correctAnswer[0]!); }) },
        };

        PageState.Timer.Stop();
        PageState.Timer.Elapsed -= OnTimedEvent;
        PageState = new QuizPageState();
        Room = null;
        _clientSongs = new List<Song?>(new Song[Room?.Quiz?.QuizState.NumSongs ?? 1000]) { };
        _currentSong = null;
        _correctAnswer = null;
        PreloadCancellationSource = new CancellationTokenSource();
        PreloadCancellationRegistration = new CancellationTokenRegistration();
    }

    private readonly Dictionary<string, (Type[] types, Func<object?[], Task> value)> _handlers;

    public class QuizPageState
    {
        public bool IsDebug { get; } = false;
        public readonly List<string> DebugOut = new() { "" };

        public float ProgressValue { get; set; } = 0;
        public float ProgressDivisor { get; set; } = 1;

        public bool VideoPlayerVisibility { get; set; }
        public bool GuessesVisibility { get; set; } = true;
    // public bool GuessInputDisabled { get; set; } = true;

        public string? Guess { get; set; }

        public float Countdown { get; set; }
        public Timer Timer { get; } = new();
    }

    public static QuizPageState PageState { get; set; } = new() { };

    private static Room? Room { get; set; }

    private readonly List<Song?> _clientSongs;

    private Song? _currentSong;

    private Song? _correctAnswer;

    private CancellationTokenSource PreloadCancellationSource { get; set; }

    private CancellationTokenRegistration PreloadCancellationRegistration { get; set; }

    private GuessInputComponent _guessInputComponent;

    protected override async Task OnInitializedAsync()
    {
    // todo reset page state between quizzes
        PageState.DebugOut.Add("init QuizPage");

        if (ClientState.Session!.hubConnection is not null)
        {
            await _clientConnectionManager.SetHandlers(_handlers);
            PageState.DebugOut.Add("initialized QuizPage hubConnection handlers");
        }
        else
        {
    // await _clientConnectionManager.StartManagingConnection();
    // todo warn error, reload
    // todo restore session from cookie or smth
        }

        await SyncWithServer();
        if (Room?.Quiz?.QuizState.QuizStatus == QuizStatus.Starting)
        {
            Song? nextSong = await NextSong(0);
            if (nextSong is not null)
            {
                nextSong.Data = (await DlSong(nextSong)).Data;
                _clientSongs[0] = nextSong;
                await ClientState.Session.hubConnection!.SendAsync("SendPlayerIsBuffered", ClientState.Session.Player.Id);
            }
        }

        await ClientState.Session.hubConnection!.SendAsync("SendPlayerJoinedQuiz", ClientState.Session.Player.Id);
    }

    private async Task OnReceiveResyncRequired()
    {
        await SyncWithServer();
    }

    private async Task OnReceiveCorrectAnswer(Song correctAnswer)
    {
        _correctAnswer = correctAnswer;
    }

    public async ValueTask DisposeAsync()
    {
        if (ClientState.Session!.hubConnection is not null)
        {
            await ClientState.Session.hubConnection.DisposeAsync();
        }
    }

    public async Task<Song?> NextSong(int index)
    {
        HttpResponseMessage res = await _client.PostAsJsonAsync("Quiz/NextSong", new ReqNextSong(ClientState.Session!.RoomId!.Value, index));
        if (res.IsSuccessStatusCode)
        {
            ResNextSong? nextSong = await res.Content.ReadFromJsonAsync<ResNextSong>().ConfigureAwait(false);
            if (nextSong is not null)
            {
                Song song = new Song
                {
                    StartTime = nextSong.StartTime,
                    Links = new List<SongLink>
                    {
                        new()
                        {
                            Url = nextSong.Url
                        }
                    }
                };
                return song;
            }
        }
        else
        {
    // todo
        }
        return null;
    }

    private void SetTimer()
    {
        PageState.Timer.Stop();
        PageState.Timer.Elapsed -= OnTimedEvent;

        PageState.Timer.Interval = TimeSpan.FromMilliseconds(Quiz.TickRate).TotalMilliseconds;
        PageState.Timer.Elapsed += OnTimedEvent;
        PageState.Timer.AutoReset = true;
        PageState.Timer.Start();
    }

    private async Task SyncWithServer()
    {
        Room = await _clientUtils.SyncRoom();
        StateHasChanged();
    }

    private async Task OnReceiveQuizStarted()
    {
        await SyncWithServer();
        PageState.Countdown = Room!.Quiz!.QuizState.RemainingMs;
        StateHasChanged();
        SetTimer();
    }

    private async Task OnReceiveQuizEnded()
    {
        await SyncWithServer();
    // TODO: do endgame stuff
        await Task.Delay(TimeSpan.FromSeconds(20));
        _navigation.NavigateTo("/RoomPage");
    }

    private async Task Onclick_Leave()
    {
        await SyncWithServer();

        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Really leave? If you return your score will not be restored.");
        if (confirmed)
        {
            await ClientState.Session!.hubConnection!.SendAsync("SendPlayerLeaving");
            await SyncWithServer();

    // i have no idea why, but if we don't visit RoomPage first, the next room a player enters will have double timer tick etc.
            _navigation.NavigateTo("/RoomPage");
            _navigation.NavigateTo("/HotelPage");
        }
    }

    public async Task OnReceivePhaseChanged(int phase)
    {
        await SyncWithServer();

        QuizPhaseKind phaseKind = (QuizPhaseKind) phase;
        switch (phaseKind)
        {
            case QuizPhaseKind.Guess:
                PreloadCancellationRegistration.Unregister();
                PreloadCancellationSource.Dispose();
                PreloadCancellationSource = new CancellationTokenSource();
                PreloadCancellationRegistration = PreloadCancellationSource.Token.Register(() => _jsRuntime.InvokeVoidAsync("Helpers.abortFetch"));

                PageState.Guess = "";
                await _guessInputComponent.ClearInputField();

                PageState.ProgressValue = 0;
                PageState.ProgressDivisor = Room!.QuizSettings.GuessMs;
                PageState.VideoPlayerVisibility = false;

                if (!(Room.QuizSettings.TeamSize > 1))
                {
                    PageState.GuessesVisibility = false; // todo: should be able to toggle players' guesses separately (for multi-team games)
                }

                _correctAnswer = null;
                PageState.Countdown = Room!.Quiz!.QuizState.RemainingMs;
                StateHasChanged();

                await SwapSongs(Room.Quiz.QuizState.sp);
                StateHasChanged();
                _guessInputComponent.CallStateHasChanged();
                break;
            case QuizPhaseKind.Judgement:
                await ClientState.Session!.hubConnection!.SendAsync("SendGuessChanged", PageState.Guess);
                await SyncWithServer();
                PageState.GuessesVisibility = true;
                PageState.Countdown = 0;
                StateHasChanged();
                _guessInputComponent.CallStateHasChanged();
                break;
            case QuizPhaseKind.Results:
    // TODO: restart song (option?)
                PageState.ProgressValue = 0;
                PageState.ProgressDivisor = Room!.QuizSettings.ResultsMs;
                PageState.VideoPlayerVisibility = true;
                StateHasChanged();
                _guessInputComponent.CallStateHasChanged();

                if (Room!.Quiz!.QuizState.sp + Room.QuizSettings.PreloadAmount < Room.Quiz.QuizState.NumSongs)
                {
                    PreloadCancellationSource.CancelAfter(TimeSpan.FromMilliseconds(Room.QuizSettings.ResultsMs));
                    await Preload(Room.Quiz!.QuizState.sp, Room.QuizSettings.PreloadAmount);
                }
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        PageState.ProgressValue += 100 / PageState.ProgressDivisor * Quiz.TickRate;

        if (PageState.Countdown > 0)
        {
            PageState.Countdown -= Quiz.TickRate;
        }

        StateHasChanged();
    }

    private async Task SwapSongs(int index)
    {
        if (index < _clientSongs.Count)
        {
            PageState.DebugOut.Add("index: " + index);
    // _clientState._debug.Add("cs: " + JsonSerializer.Serialize(_clientSongs));

            if (_clientSongs.ElementAtOrDefault(index) is not null)
            {
                _currentSong = _clientSongs[index];
            }

            if (string.IsNullOrEmpty(_currentSong?.Data))
            {
                await LoadMissingSong(index);
            }

            await _jsRuntime.InvokeAsync<string>("reloadVideo", _currentSong!.StartTime);
        }
        else
        {
            _logger.LogError($"Attempted to swap to a song that does not exist -- probably desynchronized;" +
                             $" index: {index}, clientSongs.Count: {_clientSongs.Count}");
        }
    }

    private async Task LoadMissingSong(int index)
    {
        PageState.DebugOut.Add("Loading missing song");
        var nextSong = await NextSong(index);
        if (nextSong is not null)
        {
            _currentSong = new Song()
            {
                StartTime = nextSong.StartTime,
                Links = new List<SongLink>
                {
                    new()
                    {
                        Url = nextSong.Links.First().Url // todo
                    }
                }
            };
            StateHasChanged();
        }
        else
        {
            PageState.DebugOut.Add("Failed loading missing song");
        }
    }

    private async Task Preload(int index, int amount = 1)
    {
        for (int i = 1; i <= amount; i++)
        {
            if (index + i < _clientSongs.Count)
            {
                var song = await NextSong(index + i);
                if (song is not null)
                {
                    if (string.IsNullOrEmpty(song.Data))
                    {
                        song.Data = (await DlSong(song)).Data;
                    }

                    _clientSongs[index + i] = song;
                    if (string.IsNullOrEmpty(song.Data))
                    {
                        PageState.DebugOut.Add($"preload cancelled: {song.Links.First().Url}"); // todo link selection
                    }
                    else
                    {
                        PageState.DebugOut.Add($"preloaded: {song.Links.First().Url}"); // todo link selection
                        await ClientState.Session!.hubConnection!.SendAsync("SendPlayerIsBuffered", ClientState.Session.Player.Id);
                    }
                }
                else
                {
                    _logger.LogWarning("preload failed");
                }
            }
            else
            {
                _logger.LogWarning("no song to preload");
            }
        }
    }

    private async Task<Song> DlSong(Song song)
    {
        var ret = new Song
        {
            Links = song.Links,
        };

        try
        {
            PageState.DebugOut.Add($"downloading {song.Links.First().Url}");
            _logger.LogInformation("Startjs");
    // TODO: How to select The One Link?
            string data = await _jsRuntime.InvokeAsync<string>("Helpers.fetchObjectUrl", PreloadCancellationSource.Token, song.Links.First().Url);
            _logger.LogInformation("Endjs");
            PreloadCancellationRegistration.Unregister();

            ret.Data = data;
        }
        catch (Exception e)
        {
            _logger.LogWarning($"download cancelled {e}");
        }

        return ret;
    }

    private async Task SendPauseQuiz()
    {
        if (Room is {Quiz: { } } && Room.Quiz.QuizState.QuizStatus == QuizStatus.Playing)
        {
            await ClientState.Session!.hubConnection!.SendAsync("SendPauseQuiz");
            await SyncWithServer();
        }
    }

}
