@page "/QuizPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Client.Components
@using System.Globalization
@inject IJSRuntime _jsRuntime
@inject ILogger<QuizPage> _logger
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject ClientConnectionManager _clientConnectionManager
@implements IAsyncDisposable

<QuizSettingsComponent @ref="_quizSettingsComponent" Room="@Room" IsReadOnly="true" IsQuizPage="true"/>

<GenericModal @ref="@_leaveModalRef"
              Title="Leave?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await LeaveQuiz(); })">
    <span>Are you sure you want to leave the quiz? Your score will not be restored if you return.</span>
</GenericModal>

<GenericModal @ref="@_returnToRoomModalRef"
              Title="Return to room?"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await ReturnToRoom(); })">
    <span>Are you sure you want to return to room? This will end the quiz for all players.</span>
</GenericModal>

<GenericModal @ref="@_inventoryModalRef"
              Title="Inventory"
              Size="@Blazorise.ModalSize.ExtraLarge">
    @if (Room?.Players.Any() ?? false)
    {
        @if (Room.QuizSettings.SongSelectionKind == SongSelectionKind.Looting && Room.QuizSettings.AllowViewingInventoryDuringQuiz)
        {
            var ownPlayer = Room.Players.SingleOrDefault(x => ClientState.Session != null && x.Id == ClientState.Session.Player.Id);
            var inventory = ownPlayer?.LootingInfo.Inventory;
            @if (inventory != null)
            {
                <ol>
                    @foreach (var treasure in inventory)
                    {
                        <li>
                            @Converters.GetSingleTitle(treasure.ValidSource.Value).LatinTitle
                        </li>
                    }
                </ol>
            }
        }
    }
</GenericModal>

<SongHistoryComponent @ref="_songHistoryComponent" SongsHistory="@ClientSongsHistory"></SongHistoryComponent>

@if (!_clientConnectionManager.IsConnected)
{
    <p style="color: @UiHelpers.Bool2Color(_clientConnectionManager.IsConnected, "green", "red")">
        @UiHelpers.Bool2Text(_clientConnectionManager.IsConnected, "Connected", "Disconnected")
    </p>
}

@if (Room?.Quiz != null)
{
    @if (Room?.Owner.Id == ClientState.Session?.Player.Id)
    {
        <button type="button" class="btn btn-primary"
                disabled="@(Room?.Owner.Id != ClientState.Session?.Player.Id || Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || Room?.Quiz?.QuizState.sp < 0)"
                @onclick="SendTogglePause"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 80px; height: 30px; z-index: 10;">
            @UiHelpers.Bool2Text(Room?.Quiz?.QuizState.IsPaused, "Unpause", "Pause")
        </button>
    }

    @if (IsSpectator)
    {
        <button type="button" class="btn btn-primary"
                disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || !Room.QuizSettings.IsHotjoinEnabled || Room.HotjoinQueue.Any(x => x.Id == ClientState.Session!.Player.Id))"
                @onclick="SendHotjoinQuiz"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
            @UiHelpers.Bool2Text(Room?.HotjoinQueue.Any(x => x.Id == ClientState.Session!.Player.Id), $"Hotjoining...", "Hotjoin Quiz")

        </button>
    }
    else
    {
        int isSkippingCount = Room!.Players.Count(x => x.IsSkipping);
        int skipNumber = (int)Math.Round((float)Room.Players.Count * 0.8, MidpointRounding.AwayFromZero);
        <button type="button" class="btn btn-primary"
                disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || Room?.Quiz?.QuizState.sp < 0 || !(Room?.Quiz?.QuizState.RemainingMs > 2000 && Room?.Quiz?.QuizState.Phase is QuizPhaseKind.Guess or QuizPhaseKind.Results && !(Room?.Quiz?.QuizState.IsPaused ?? false)))"
                @onclick="SendToggleSkip"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
            @UiHelpers.Bool2Text(Room?.Players.SingleOrDefault(x => x.Id == ClientState.Session?.Player.Id)?.IsSkipping, $"Skipping {isSkippingCount}/{skipNumber}", "Skip")
        </button>
    }

    <button type="button" id="buttonQuizSettings" class="btn btn-secondary" style="position: relative; top: 2px; left: 2px; padding: 2px; margin: 2px; width: 120px; height: 30px; z-index: 10;"
            @onclick="@(() => _quizSettingsComponent!.OnclickShowQuizSettings())">
        Room Settings
    </button>

    <button type="button" id="buttonSongHistory" class="btn btn-secondary" style="position: relative; top: 2px; left: 2px; padding: 2px; margin: 2px; width: 120px; height: 30px; z-index: 10;"
            @onclick="@OnClickButtonSongHistory">
        Song History
    </button>

    @if (Room != null && Room.QuizSettings.SongSelectionKind == SongSelectionKind.Looting && Room.QuizSettings.AllowViewingInventoryDuringQuiz)
    {
        <button type="button" id="buttonInventory" class="btn btn-secondary" style="position: relative; top: 2px; left: 2px; padding: 2px; margin: 2px; width: 120px; height: 30px; z-index: 10;"
                @onclick="@(() => _inventoryModalRef?.Show())">
            Inventory
        </button>
    }

    <button type="button" class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="@(async () => await ResetVideo())"
            style="display: none; position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 160px; height: 30px; z-index: 10;">
        Reload video player
    </button>

    <button type="button" class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="@(async () => await PlayVideo())"
            style="display: none; position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 160px; height: 30px; z-index: 10;">
        Play video
    </button>

    @if (Room?.Owner.Id == ClientState.Session?.Player.Id)
    {
        <button type="button" class="btn btn-warning"
                disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing || Room?.Quiz?.QuizState.sp < 0)"
                @onclick="@(() => _returnToRoomModalRef?.Show())"
                style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 120px; height: 30px; z-index: 10;">
            Return to room
        </button>
    }

    <button type="button" class="btn btn-warning" disabled="@(Room?.Quiz?.QuizState.QuizStatus != QuizStatus.Playing)" @onclick="@(() => _leaveModalRef?.Show())"
            style="position: relative; top: 2px; left: 2px; margin: 2px; padding: 2px; width: 60px; height: 30px; z-index: 10;">
        Leave
    </button>

    // todo move to chat component
    @if (Room!.Spectators.Any())
    {
        <div style="padding: 2px; margin: 5px; position: fixed; top: 10vh; left: 0; text-align: center; overflow: auto">
            Spectators:
            <ul style="padding-left: 0">
                @foreach (var spectator in Room.Spectators)
                {
                    <li>@spectator.Username</li>
                }
            </ul>
        </div>
    }
}

<div id="numSongsContainer" style="display:flex; justify-content:center; align-items:center;">
    <span id="sp">@(Room?.Quiz?.QuizState.sp + 1)</span>/<span id="numSongs"> @Room?.Quiz?.QuizState.NumSongs</span>
</div>

@if (PageState.IsDebug)
{
    <div style="visibility: @UiHelpers.Bool2Vis(PageState.IsDebug)">
        <p>Quiz status: @Room?.Quiz?.QuizState.QuizStatus</p>
        @* <p>Phase: @_quizState.Phase</p> *@
        <p>RemainingMs: @Room?.Quiz?.QuizState.RemainingMs</p>
        <p>sp: @Room?.Quiz?.QuizState.sp</p>
    </div>

    <div style="float:right;">
        @foreach (var debug in PageState.DebugOut)
        {
            <p style="padding: 0; margin:0;">@debug</p>
        }
    </div>
}

@if (Room?.Chat != null)
{
    <ChatComponent @ref="_chatComponent"></ChatComponent>
}

<div id="correctAnswerInfoDiv"
     style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility); width: 330px; min-height:200px; max-height: 700px; float:right; padding-right: 20px">
    @* todo Latin vs NonLatin title option *@
    <SongInfoCardComponent Song="@_correctAnswer"/>
</div>

<div id="quizGrid" style="display:grid; justify-content:center; align-items:center;">

    <ul id="correctAnswerSources" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility); width: 720px; min-height: 52px">
        @if (_correctAnswer?.Sources != null)
        {
            foreach (SongSource source in _correctAnswer.Sources)
            {
                var sourceTitle = Converters.GetSingleTitle(source.Titles);
                <li class="correctAnswerSourceTitle">
                    @sourceTitle.ToString()
                    @* todo tooltip with all of the other titles? *@
                </li>
            }
        }
    </ul>

<div class="videoWrapper"
     style="position: relative; background: dimgrey; width:720px; height:400px; cursor: @UiHelpers.Bool2CursorPointer(PageState.VideoPlayerVisibility)"
     onclick="@(() => { if (PageState.VideoPlayerVisibility || Room?.QuizSettings.Filters.ScreenshotKind != ScreenshotKind.None) ClientState.Session!.Player.Preferences.HideVideo = !ClientState.Session!.Player.Preferences.HideVideo; })">

    @if (ClientState.Session != null && ClientState.Session.Player.Preferences.HideVideo && (PageState.VideoPlayerVisibility || Room?.QuizSettings.Filters.ScreenshotKind != ScreenshotKind.None))
    {
        <p style="position: absolute; top: 40%; right: 22%; font-size: xxx-large; color: white; z-index: 3000">Click to show video</p>
    }

    <div class="videoPlayer" style="visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility && !ClientState.Session!.Player.Preferences.HideVideo)">

            @{
                string? video1Src;
                string? video2Src;

                if (VisibleVideoElementId == "video1")
                {
                    video1Src = _currentSong != null ? $"{_currentSong?.Links.First().Url}#t={_currentSong?.StartTime}" : null;
                    video2Src = _nextSong != null ? $"{_nextSong?.Links.First().Url}#t={_nextSong?.StartTime}" : null;

                    if (DateTime.UtcNow - LastSetVideoMuted > TimeSpan.FromMilliseconds(10))
                    {
                        LastSetVideoMuted = DateTime.UtcNow;
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video2", "muted");
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video1", "");
                    }
                }
                else
                {
                    video2Src = _currentSong != null ? $"{_currentSong?.Links.First().Url}#t={_currentSong?.StartTime}" : null;
                    video1Src = _nextSong != null ? $"{_nextSong?.Links.First().Url}#t={_nextSong?.StartTime}" : null;

                    if (DateTime.UtcNow - LastSetVideoMuted > TimeSpan.FromMilliseconds(10))
                    {
                        LastSetVideoMuted = DateTime.UtcNow;
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video1", "muted");
                        _jsRuntime.InvokeVoidAsync("setVideoMuted", "video2", "");
                    }
                }
            }

            <video src="@(video1Src)"
                   id="video1" width="720px" height="400px" autoplay
                   style="background: black; display: @UiHelpers.Bool2Display(VisibleVideoElementId == "video1")">
            </video>

            <video src="@(video2Src)"
                   id="video2" width="720px" height="400px" autoplay
                   style="background: black; display: @UiHelpers.Bool2Display(VisibleVideoElementId == "video2")">
            </video>

            @if (PageState.VideoPlayerVisibility && _currentSong is not null && !_currentSong.Links.First().Url.IsVideoLink())
            {
                @if (ClientState.Session != null && ClientState.Session.Player.Preferences.ShowVndbCovers && !string.IsNullOrEmpty(_currentSong.CoverUrl))
                {
                    <div id="vnCoverDiv" style="position: absolute; top: 0; right: 0; cursor: pointer; visibility: @UiHelpers.Bool2Vis(!ClientState.Session!.Player.Preferences.HideVideo);">
                        <img width="720px" height="400px" src="@_currentSong.CoverUrl" alt="" style="object-fit: contain;">
                    </div>
                }
                else
                {
                    <p style="position: absolute; top: 40%; right: 33%; font-size: xxx-large; color: white; z-index: 3000">Sound only</p>
                }
            }
    </div>

        <div id="quizInfoDiv" style="position: absolute; top: 3%; left: 3%; font-size: xx-large; color: white; z-index: 3000;">
            @if (Room?.Quiz?.QuizState.IsPaused ?? false)
            {
                <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                    Paused
                </p>
            }

            <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000;">
                @(Room?.Quiz?.QuizState.ExtraInfo)
            </p>

            @if (Room is {Quiz: { } })
            {
                @if (Room.Quiz.QuizState.RemainingMs <= 0)
                {
                    List<Player> buffered = Room.Players.Where(x => x.IsBuffered).ToList();
                    List<Player> notBuffered = Room.Players.Where(x => !x.IsBuffered).ToList();
                    @if (buffered.Count > 0 && notBuffered.Count < 5)
                    {
                        // TODO: this says that we are waiting on inactive players even though we actually aren't
                        @foreach (Player player in notBuffered)
                        {
                            <p style="text-shadow: 1px 0 0 #000, 0 -1px 0 #000, 0 1px 0 #000, -1px 0 0 #000; font-size: x-large;">
                                Waiting for @player.Username
                            </p>
                        }
                    }
                }
            }
        </div>

    @if (!PageState.VideoPlayerVisibility)
    {
        @if (!string.IsNullOrEmpty(_currentSong?.ScreenshotUrl))
        {
            <div id="screenshotDiv" style="position: absolute; top: 0; right: 0; cursor: pointer; visibility: @UiHelpers.Bool2Vis(!ClientState.Session!.Player.Preferences.HideVideo);">
                <img width="720px" height="400px" src="@_currentSong.ScreenshotUrl" alt="" style="object-fit: contain;">
            </div>
        }
        else
        {
                 @* TODO: properly center this *@
                <div id="countdownDiv" style="position: absolute; top: 40%; right: 45%; font-size: xxx-large; color: white;">
                    @((int)Math.Round(PageState.Countdown / 1000))
                </div>
            }
        }
    </div>

<div class="progress" style="height: 5px; max-width: 720px">
    <ProgressBarComponent ProgressValue="@PageState.ProgressValue"></ProgressBarComponent>
</div>

@if (Room?.QuizSettings.AnsweringKind == AnsweringKind.MultipleChoice)
{
    <div id="GuessInput" style="max-width:720px; padding-left: 10px; padding-right: 10px; margin-top: 10px;
                         pointer-events:@UiHelpers.Bool2PointerEvents(!PageState.VideoPlayerVisibility);">

        <div id="MultipleChoiceContainer" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(0, min(100%/1, max(320px, 100%/2)))); row-gap: 5px; justify-items: center;">
            @if (Room.Quiz?.MultipleChoiceOptions != null && Room.Quiz.QuizState.sp >= 0)
            {
                if (Room.Quiz.MultipleChoiceOptions.TryGetValue(Room.Quiz.QuizState.sp, out var current))
                {
                    foreach (var title in current)
                    {
                        string tooltipText = title.ToString();
                        bool selected = PageState.Guess == title.LatinTitle;
                        <Blazorise.Tooltip
                            Inline="false"
                            Text="@tooltipText">
                            <div
                                class="MultipleChoiceOption"
                                @onclick="@(async () => { if (!IsSpectator) await SetGuess(title.LatinTitle); })"
                                style="
cursor: @UiHelpers.Bool2CursorPointer(!IsSpectator);
color: @UiHelpers.Bool2Color(selected, "deepskyblue", "white");
width: 320px;
height: 26px;
max-width: 100%;
overflow: hidden;
text-overflow: ellipsis;
white-space: nowrap;
background-color: black;
border-radius: 10px;
padding: 1px 5px 1px 5px;
text-align: center;
">
                                @title.LatinTitle
                            </div>
                        </Blazorise.Tooltip>
                    }
                }
            }
        </div>
        <br/>
    </div>
}
else
{
@* do not modify Placeholder text without changing the javascript file as well *@
    <div id="GuessInput" style="max-width:720px; padding-left: 10px; padding-right: 10px; margin-top: 10px;
                         pointer-events:@UiHelpers.Bool2PointerEvents(!PageState.VideoPlayerVisibility);">
        <GuessInputComponent @ref="_guessInputComponent"
                             Placeholder="Enter your guess here"
                             FreeTyping="true"
                             IsDisabled="@(Room?.Quiz?.QuizState.Phase is QuizPhaseKind.Judgement or QuizPhaseKind.Results || IsSpectator)"
                             IsQuizPage="true"
                             @bind-Guess="@PageState.Guess">
        </GuessInputComponent>
        <br/>
    </div>
}

    <div id="playersDiv" style="display:flex; margin: auto; align-items:flex-end; max-width: 65vw; overflow-x: auto;">
        @if (Room?.Players.Any() ?? false)
        {
            var ownPlayer = Room.Players.SingleOrDefault(x => ClientState.Session != null && x.Id == ClientState.Session.Player.Id) ??
                            Room.Spectators.SingleOrDefault(x => ClientState.Session != null && x.Id == ClientState.Session.Player.Id);

            IGrouping<int, Player>? team1 = null;
            IGrouping<int, Player>? team2 = null;
            @if (Room.QuizSettings.GamemodeKind == GamemodeKind.NGMC)
            {
                var teams = Room.Players.GroupBy(x => x.TeamId).ToArray();
                team1 = teams.ElementAtOrDefault(0);
                team2 = teams.ElementAtOrDefault(1);
            }

            @foreach (var player in Room.Players)
            {
                if (_playerGuesses.TryGetValue(player.Id, out string? playerGuess))
                {
                }

                <div class="playerDiv" style="margin: 10px; max-width: 160px; max-height: 290px; opacity: @UiHelpers.Bool2Text(player.HasActiveConnection, "inherit", "0.5")">
                    <div class="playerGuessDiv" style="visibility: @UiHelpers.Bool2Vis(PageState.GuessesVisibility);
                                     cursor: @UiHelpers.Bool2CursorPointer(Room?.Quiz?.QuizState.Phase == QuizPhaseKind.Guess && !string.IsNullOrWhiteSpace(playerGuess));"
                         @onclick="@(() => SetGuess(playerGuess))">
                        <div class="playerIsCorrectDiv" style="display: flex; justify-content:center; align-items:center;">
                            <span class="playerGuessSpan" style="word-wrap: anywhere; height: 90px; display: block;
                                             color: @UiHelpers.Bools2Color(player.PlayerStatus == PlayerStatus.Correct, player.PlayerStatus is PlayerStatus.Wrong or PlayerStatus.Dead, "green", "red")">
                                @* todo make text smaller as it gets longer *@
                                @playerGuess
                            </span>
                        </div>
                    </div>

                    @if (Room != null && Room.QuizSettings.GamemodeKind == GamemodeKind.NGMC)
                    {
                        <span class="playerNGMCGuessesCurrent"> Guesses: @player.NGMCGuessesCurrent</span>
                    }

                    @if (Room?.QuizSettings.MaxLives > 0)
                    {
                        <span class="playerLives"> Lives: @player.Lives</span>
                    }

                    <div style="position: relative">
                        <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(player.Avatar, player.PlayerStatus)" alt="Avatar">

                        @if (Room != null && Room.QuizSettings.GamemodeKind == GamemodeKind.NGMC)
                        {
                            @if (ownPlayer != null && !IsSpectator && player.TeamId == ownPlayer.TeamId)
                            {
                                var ownTeam = ownPlayer.TeamId == 1 ? team1 : team2;
                                var ownTeamCaptain = ownTeam?.First();
                                @if (ownTeamCaptain?.Id == ownPlayer.Id)
                                {
                                    bool canBurn = ownTeamCaptain.NGMCCanBurn && Room.QuizSettings.NGMCAllowBurning;
                                    bool canBePicked = player.NGMCCanBePicked;

                                    @if (canBurn)
                                    {
                                        @if (player.Id == ownTeamCaptain.Id)
                                        {
                                            <button type="button" class="btn btn-secondary" disabled="@(!canBurn)" @onclick="@(() => NGMCDontBurn())"
                                                    style="position: absolute; top: 39%; left: 33%; margin: 2px; padding: 2px; width: 60px; z-index: 10;">
                                                Skip burning
                                            </button>
                                        }

                                        @if (player.NGMCGuessesCurrent > 0)
                                        {
                                            <button type="button" class="btn btn-danger" disabled="@(!canBurn)" @onclick="@(() => NGMCBurnPlayer(player.Id))"
                                                    style="position: absolute; top: 69%; left: 33%; margin: 2px; padding: 2px; width: 60px; height: 30px; z-index: 10;">
                                                Burn
                                            </button>
                                        }
                                    }
                                    else if (canBePicked)
                                    {
                                        <button type="button" class="btn btn-success" disabled="@(!canBePicked)" @onclick="@(() => NGMCPickPlayer(player.Id))"
                                                style="position: absolute; top: 69%; left: 33%; margin: 2px; padding: 2px; width: 60px; height: 30px; z-index: 10;">
                                            Pick
                                        </button>
                                    }
                                }
                            }
                        }

                        <div style="background-color:rgba(0, 0, 0, 0.9); height:25px; width: 160px; display: flex; justify-content:center; align-items:center;">

                            @* todo make text smaller as it gets longer *@
                            <span style="color: white; max-width: 130px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @player.Username
                            </span>

                            <span style="color: white; position: absolute; bottom: 0%; left: 2%; ">@player.Score</span>
                            @{
                                if (_correctAnswerPlayerLabels.ContainsKey(player.Id))
                                {
                                    var labels = _correctAnswerPlayerLabels.Single(x => x.Key == player.Id).Value;
                                    @if (labels.Any() && (labels.First().Name == "Looted" || labels.First().VNs.Any())) // todo this is a band-aid
                                    {
                                        @* todo *@
                                        string text = labels.First().Name == "Looted" ? "L" : (labels.First().VNs.First().Value / 10f).ToString(CultureInfo.InvariantCulture);

                                        @* todo special cases for default labels (S for Stalled etc.) *@
                                        text = text == "-0.1" ? "V" : text;

                                        <div style="position: absolute; top: 0%; right: 2%; visibility: @UiHelpers.Bool2Vis(PageState.VideoPlayerVisibility);">
                                            <Blazorise.Tooltip Text="@string.Join(", ", labels.Select(x => x.Name))">
                                                <span>@(text)</span>
                                            </Blazorise.Tooltip>
                                        </div>
                                    }
                                }
                            }

                        </div>
                    </div>
                </div>
            }
        }

    </div>
</div>
