@page "/HotelPage"
@using Microsoft.Extensions.Logging
@using EMQ.Client.Components
@using EMQ.Shared.Auth.Entities.Concrete
@inject HttpClient _client
@inject ILogger<HotelPage> _logger
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject IJSRuntime _jsRuntime

<h3>Hotel</h3>

<p>Welcome to EMQ Hotel. Here you can join an existing room or reserve a new room in order to play.</p>

<GenericModal @ref="@_passwordModalRef"
              Title="Enter room password"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await JoinRoom(SelectedRoomId, SelectedRoomPassword); })">
    <input type="text" @bind="SelectedRoomPassword"/>
</GenericModal>

<div>
    <EditForm Model="@_createNewRoomModel" OnValidSubmit="@(() => SendCreateRoomReq(_createNewRoomModel))">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <InputText id="RoomName" @bind-Value="_createNewRoomModel.RoomName" style="margin: 5px" maxlength="100"
                   disabled="@(!AuthStuff.HasPermission(ClientState.Session, PermissionKind.SendChatMessage))"/>
        <label for="RoomName">Room name</label>
        <br/>

        @* todo type= password | text toggle *@
        <InputText id="RoomPassword" type="text" @bind-Value="_createNewRoomModel.RoomPassword" style="margin: 5px" maxlength="16"/>
        <label for="RoomPassword">Room password</label>
        <br/>

        @if (ClientState.Session != null)
        {
            @if (ClientState.ServerStats.Config.IsServerReadOnly)
            {
                <p>Server is in read-only mode.</p>
            }
            else
            {
                <input style="margin: 5px" type="submit" class="btn btn-primary" value="Reserve Room"/>
            }
        }

    </EditForm>
</div>

@if (IsJoiningRoom)
{
    <p>Joining room...</p>
}

<div class="rooms d-flex flex-row flex-wrap" style="max-width: 1600px">
    @foreach (var room in Rooms)
    {
        <div class="roomCard card" style="margin: 16px">
            <div class="roomCardBody card-body">
                <div>
                    <div>
                        <h5 class="roomName card-title">@room.Name</h5>
                    </div>
                    <div>
                        @if (AuthStuff.HasPermission(ClientState.Session, PermissionKind.Admin))
                        {
                            <span style="position: absolute; top: 0; right: 2%; cursor: pointer;" @onclick="@(() => ForceRemoveRoom(room.Id))">🗑</span>
                        }

                        @{
                            int botCount = room.Players.Count(x => x.IsBot);
                        }
                        <p> Owner: @room.Owner.Username</p>
                        <p title="@(string.Join(", ", room.Players.Select(x => x.Username)))">
                            Players: @(room.Players.Count - botCount)
                        </p>
                        @if (room.Spectators.Count > 0)
                        {
                            <p title="@(string.Join(", ", room.Spectators.Select(x => x.Username)))">
                                Spectators: @(room.Spectators.Count)
                            </p>
                        }

                        @if (botCount > 0)
                        {
                            <p> Bots: @botCount</p>
                        }

                        @if (room.Quiz != null)
                        {
                            <p> Status: @room.Quiz?.QuizState.QuizStatus</p>
                            <p> Progress: @(room.Quiz?.QuizState.sp + 1)/@(room.Quiz?.QuizState.NumSongs)</p>
                        }
                    </div>
                </div>
            </div>

            @* todo type= password | text toggle *@
            <button type="button"
                    class="btn btn-primary"
                    style="margin: 16px"
                    disabled="@(ClientState.Session == null || IsJoiningRoom)"
                    @onclick="@(async () => { SelectedRoomId = room.Id; SelectedRoomPassword = ""; await JoinRoom(SelectedRoomId, SelectedRoomPassword); })">
                @(room.IsPrivate ? "🔒" : "") Join
            </button>
        </div>
    }
</div>
