@page "/SetPasswordPage"
@using EMQ.Shared.Auth.Entities.Concrete.Dto.Request
@using System.ComponentModel.DataAnnotations
@using System.Net
@using EMQ.Shared.Auth.Entities.Concrete
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils

<h3>Set password</h3>

<p>Passwords must be between @AuthStuff.MinPasswordLength and @AuthStuff.MaxPasswordLength characters long. Use a password manager.</p>

<EditForm Model="@Model" OnValidSubmit="@(() => SendSetPasswordReq(Model))">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="password1" type="password" @bind-Value="@Model.Password1" style="margin: 5px; width: 250px;"></InputText>
    <label for="password1">Password</label>
    <br/>

    <InputText id="password2" type="password" @bind-Value="@Model.Password2" style="margin: 5px; width: 250px;"></InputText>
    <label for="password2">Confirm password</label>
    <br/>

    <button type="submit" disabled="@(!Ready)" class="btn btn-primary">
        Submit
    </button>
</EditForm>

@StatusText

@code {

    public class SetPasswordDoublePasswordModel
    {
        [Required]
        [StringLength(AuthStuff.MaxPasswordLength, MinimumLength = AuthStuff.MinPasswordLength)]
        public string Password1 { get; set; } = "";

        [Required]
        [StringLength(AuthStuff.MaxPasswordLength, MinimumLength = AuthStuff.MinPasswordLength)]
        [Compare(nameof(Password1))]
        public string Password2 { get; set; } = "";
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Username { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    private SetPasswordDoublePasswordModel Model { get; } = new();

    private string StatusText { get; set; } = "";

    private bool Ready { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (Username is null || Token is null)
        {
            StatusText = "Could not get Username or Token1";
            return;
        }
    }

    private async Task SendSetPasswordReq(SetPasswordDoublePasswordModel model)
    {
        if (Username is null || Token is null)
        {
            StatusText = "Could not get Username or Token2";
            return;
        }

        Ready = false;
        StatusText = "Processing...";
        StateHasChanged();

        var req = new ReqSetPassword(Username, Token, model.Password1);
        var res = await _client.PostAsJsonAsync("Auth/SetPassword", req);
        if (res.IsSuccessStatusCode)
        {
            var session = await res.Content.ReadFromJsonAsync<Session>();
            ClientState.Session = session;
            await _clientUtils.SaveSessionToLocalStorage();

            StatusText = "Successfully set password. You will be redirected in 3 seconds.";
            model.Password1 = "";
            model.Password2 = "";
            StateHasChanged();

            await Task.Delay(TimeSpan.FromSeconds(3));
            _navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            switch (res.StatusCode)
            {
                case HttpStatusCode.TooManyRequests:
                    StatusText = "You have been rate-limited. Try again in a minute.";
                    break;
                default:
                    StatusText = "Something went wrong when setting password.";
                    break;
            }
        }

        Ready = true;
        StateHasChanged();
    }

}
