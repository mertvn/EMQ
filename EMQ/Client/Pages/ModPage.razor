@page "/ModPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Client.Components
@inject HttpClient _client
@inject ILogger<ModPage> _logger
@inject ClientUtils _clientUtils
@inject NavigationManager _navigation
@inject IJSRuntime _jsRuntime

<h3>ModPage</h3>

@if (ClientState.Session != null)
{
    <span>Logged in as @ClientState.Session.UserRoleKind.ToString() @ClientState.Session.Player.Username</span>
}
<br/>

<button type="button" class="btn btn-primary" @onclick="@(async () => { await OnClick_DownloadSongLite(); })">
    Download SongLite.json
</button>
<button type="button" class="btn btn-primary" @onclick="@(async () => { await OnClick_DownloadSongLite_MB(); })">
    Download SongLite_MB.json
</button>
<br/>

@if (ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Admin))
{
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunGc(); })">
        Run GC
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunAnalysis(); })">
        Run Analysis
    </button>
    <br/>

    @ClientState.ServerStats.IsServerReadOnly
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_ToggleIsServerReadOnly(); })">
        Toggle IsServerReadOnly
    </button>
    <br/>
    @ClientState.ServerStats.IsSubmissionDisabled
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_ToggleIsSubmissionDisabled(); })">
        Toggle IsSubmissionDisabled
    </button>
    <br/>
}

<pre>
@JsonSerializer.Serialize(SongReports, Utils.JsoIndented)
</pre>
