@page "/ModPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Client.Components
@inject HttpClient _client
@inject ILogger<ModPage> _logger
@inject ClientUtils _clientUtils
@inject NavigationManager _navigation
@inject IJSRuntime _jsRuntime

<h3>ModPage</h3>

@if (ClientState.Session != null)
{
    <span>Logged in as @ClientState.Session.UserRoleKind.ToString() @ClientState.Session.Player.Username</span>
}
<br/>

<p>May take over a minute before these are downloaded.</p>
<button type="button" class="btn btn-primary" @onclick="@(async () => { await OnClick_DownloadSongLite(); })">
    Download SongLite.json
</button>
<button type="button" class="btn btn-primary" @onclick="@(async () => { await OnClick_DownloadSongLite_MB(); })">
    Download SongLite_MB.json
</button>
<br/>

@if (ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Admin))
{
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunGc(); })">
        Run GC
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunAnalysis(); })">
        Run Analysis
    </button>
    <br/>

    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunVndbImporter(); })">
        Run VndbImporter
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunMusicBrainzImporter(); })">
        Run MusicBrainzImporter
    </button>
    <br/>

    @ClientState.ServerStats.IsServerReadOnly
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_ToggleIsServerReadOnly(); })">
        Toggle IsServerReadOnly
    </button>
    <br/>
    @ClientState.ServerStats.IsSubmissionDisabled
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_ToggleIsSubmissionDisabled(); })">
        Toggle IsSubmissionDisabled
    </button>
    <br/>
}

<div class="songs d-flex flex-row flex-wrap" style="max-width: 1500px;">
    @foreach (var song in ImporterPendingSongs)
    {
        string key = (song.MusicBrainzRecordingGid is not null ? song.MusicBrainzRecordingGid.ToString() : song.ToSongLite().EMQSongHash)!;
        <div class="song card" style="margin: 16px; width: 330px;" @key="@key">
            <SongInfoCardComponent Song="song"></SongInfoCardComponent>

            <button type="button"
                    class="btn btn-primary"
                    @onclick="@(async () => await InsertSong(song))">
                This is a completely new song
            </button>

            @if (song.MusicBrainzRecordingGid is not null)
            {
                <button type="button"
                        class="btn btn-primary"
                        @onclick="@(async () => await InsertSongBatchMusicBrainzRelease(song))">
                    This is a completely new release
                </button>
            }

            <button type="button"
                    class="btn btn-primary"
                    @onclick="@(async () => await OverwriteMusic(song))">
                This is a modification of an existing song
            </button>
        </div>
    }
</div>

<pre>
@JsonSerializer.Serialize(SongReports, Utils.JsoIndented)
</pre>
