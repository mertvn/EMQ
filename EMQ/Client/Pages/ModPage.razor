@page "/ModPage"
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Client.Components
@inject HttpClient _client
@inject ILogger<ModPage> _logger
@inject ClientUtils _clientUtils
@inject NavigationManager _navigation
@inject IJSRuntime _jsRuntime

<h3>ModPage</h3>

@if (ClientState.Session != null)
{
    <span>Logged in as @ClientState.Session.UserRoleKind.ToString() @ClientState.Session.Player.Username</span>
}
<br/>

<button type="button" class="btn btn-primary" @onclick="@(async () => { await OnClick_DownloadSongLite(); })">
    Download SongLite.json
</button>
<button type="button" class="btn btn-primary" @onclick="@(async () => { await OnClick_DownloadSongLite_MB(); })">
    Download SongLite_MB.json
</button>
<br/>

@if (ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session, PermissionKind.Admin))
{
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_RunGc(); })">
        Run GC
    </button>
    <button type="button" class="btn btn-primary" disabled @onclick="@(async () => { await Onclick_RunAnalysis(); })">
        Run Analysis
    </button>
    <br/>
    <br/>

    <div style="border: 1px black solid; padding: 10px;">
        <h5>Countdown</h5>
        <label style="padding: 4px;">
            <input type="text" @bind="CountdownMessage"/>
            Message
        </label>
        <label style="padding: 4px;">
            <input type="number" @bind="CountdownMinutes"/>
            Minutes
        </label>
        <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_StartCountdown(); })">
            Start countdown
        </button>
    </div>
    <br/>

    <div style="border: 1px black solid; padding: 10px;">
        <h5>ServerConfig</h5>
        @if (ClientServerConfig != null)
        {
            <label>
                <input type="checkbox" class="form-check-input" @bind="ClientServerConfig.AllowRegistration" @bind:after="@SendSetServerConfigReq"/>
                @(nameof(ClientServerConfig.AllowRegistration))
            </label>
            <br/>

            <label>
                <input type="checkbox" class="form-check-input" @bind="ClientServerConfig.AllowGuests" @bind:after="@SendSetServerConfigReq"/>
                @(nameof(ClientServerConfig.AllowGuests))
            </label>
            <br/>

            <label>
                <input type="checkbox" class="form-check-input" @bind="ClientServerConfig.RememberGuestsBetweenServerRestarts" @bind:after="@SendSetServerConfigReq"/>
                @(nameof(ClientServerConfig.RememberGuestsBetweenServerRestarts))
            </label>
            <br/>

            <label>
                <input type="checkbox" class="form-check-input" @bind="ClientServerConfig.IsServerReadOnly" @bind:after="@SendSetServerConfigReq"/>
                @(nameof(ClientServerConfig.IsServerReadOnly))
            </label>
            <br/>

            <label>
                <input type="checkbox" class="form-check-input" @bind="ClientServerConfig.IsSubmissionDisabled" @bind:after="@SendSetServerConfigReq"/>
                @(nameof(ClientServerConfig.IsSubmissionDisabled))
            </label>
            <br/>

            <label>
                <input type="checkbox" class="form-check-input" @bind="ClientServerConfig.IsChristmasMode" @bind:after="@SendSetServerConfigReq"/>
                @(nameof(ClientServerConfig.IsChristmasMode))
            </label>
            <br/>
        }

    </div>
}

<pre>
@JsonSerializer.Serialize(SongReports, Utils.JsoIndented)
</pre>
