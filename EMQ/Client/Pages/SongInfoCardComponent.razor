@using EMQ.Shared.Quiz.Entities.Concrete

@if (song != null)
{
    <div class="songInfoCard card">
        <div class="songInfoCardBody card-body">
            <div>
                <div>
                    <h5 class="songSourceSongType">
                        @if (true)
                        {
                            Dictionary<List<string>, List<SongSourceSongType>> songSourceVNIDSongTypes = new();

                            @if (!string.IsNullOrWhiteSpace(selectedMusicSourceTitle))
                            {
                                SongSource? songSource = song.Sources.FirstOrDefault(x =>
                                    x.Titles.Any(y => y.LatinTitle == selectedMusicSourceTitle || y.NonLatinTitle == selectedMusicSourceTitle));

                                if (songSource != null)
                                {
                                    songSourceVNIDSongTypes.Add(songSource.Links.Select(x => x.Url).ToList(), songSource.SongTypes);
                                }
                            }
                            else
                            {
                                foreach (SongSource songSource in song.Sources)
                                {
                                    songSourceVNIDSongTypes.Add(songSource.Links.Select(x => x.Url).ToList(), songSource.SongTypes);
                                }
                            }

                            // couldn't get distinct to work
                            List<string> displayedIds = new();

                            @foreach ((List<string> songSourceVNIDs, List<SongSourceSongType>? songTypes) in songSourceVNIDSongTypes)
                            {
                                @foreach (string songSourceVNID in songSourceVNIDs)
                                {
                                    if (!displayedIds.Contains(songSourceVNID))
                                    {
                                        displayedIds.Add(songSourceVNID);

                                        for (int index = 0; index < songTypes.Count; index++)
                                        {
                                            SongSourceSongType songType = songTypes[index];
                                            <span>@songType</span>

                                            if (index + 1 != songTypes.Count)
                                            {
                                                <span>, </span>
                                            }
                                        }

                                        // todo fix underline being too long
                                        <span></span>
                                        <a class="songSourceVNID link-primary" href="@(songSourceVNID)">
                                            <span>(VN)</span>
                                        </a>
                                        <br/>
                                    }
                                }
                            }
                        }
                    </h5>
                    <h5 class="songLatinTitle card-title">@song.Titles.First(x => x.IsMainTitle).LatinTitle</h5>
                </div>
                <div>
                    by
                    @foreach (SongArtist songArtist in song.Artists)
                    {
                        <div>
                            <a class="songArtistsLatinTitle link-primary" href="@("https://vndb.org/" + songArtist.VndbId)">
                                <span>@songArtist.Titles.Single().LatinTitle</span>
                                @if (!string.IsNullOrEmpty(songArtist.Titles.Single().NonLatinTitle))
                                {
                                    <span> (@songArtist.Titles.Single().NonLatinTitle)</span>
                                }
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public Song? song { get; set; }

    [Parameter]
    public string? selectedMusicSourceTitle { get; set; }

}
