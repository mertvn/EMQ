@using System.Collections
@using System.Drawing
@using System.Numerics
@using System.Timers
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.AspNetCore.SignalR.Client
@inject ClientUtils _clientUtils

@* <h6>TreasureRoomComponent</h6> *@

<div id="treasureRoomMainDiv" tabindex="0" @ref="_treasureRoomMainDivRef"
     style="width: 700px; height: 700px; background-color: gray; word-wrap: break-word; position: absolute; left: 50%; transform: translate(-50%, 0);"
     @onkeydown="OnKeyDown" @onkeyup="OnKeyUp">

    @if (Room != null)
    {
        @foreach (var player in Room.Players)
        {
            @if (player.LootingStuff.TreasureRoomId == ClientState.Session!.Player.LootingStuff.TreasureRoomId)
            {
                <div id="treasureRoomPlayerDiv" style="z-index: 3000000; display: inline-block; position: relative; left: @(player.LootingStuff.X)px; top: @(player.LootingStuff.Y)px;">
                    <img width="50px" height="50px" src="@Avatar.GetUrlByPlayerState(player.Avatar, PlayerStatus.Looting)" alt="Avatar"
                         style="border-radius: 50%;">
                </div>
            }
        }
    }

    <div id="treasureRoomInventoryDiv"
         style="position: absolute; left: 5px; top: 10px; max-width: 250px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">
        Inventory
        <br/>
        @if (Inventory != null! && Inventory.Any())
        {
            @foreach (var treasure in Inventory)
            {
                <span style="cursor: pointer"
                      @onclick="@(() => DropTreasure(treasure))">
                    @treasure.Song.Titles.First().LatinTitle
                </span>
                <br/>
            }
        }
    </div>

    @if (Treasures != null! && Treasures.Any())
    {
        @foreach (var treasure in Treasures)
        {
            <div class="treasure"
                 style="word-wrap: break-word; position: absolute; left: @(treasure.Position.X)px; top: @(treasure.Position.Y)px; cursor: pointer;
                  color: @UiHelpers.Bool2Color(treasure.IsGrabbableFromCoords((int) ClientState.Session!.Player.LootingStuff.X, (int) ClientState.Session!.Player.LootingStuff.Y), "green", "red")"
                 @onclick="@(() => PickupTreasure(treasure))">
                @treasure.Song.Titles.First().LatinTitle
            </div>
        }
    }
</div>

@code {

    // apparently these properties are null before they are initialized through the Parameter attribute even though they are supposed to be initialized by the new() (???????)
    [Parameter]
    public List<Treasure> Treasures { get; set; } = new();

    [Parameter]
    public List<Treasure> Inventory { get; set; } = new();

    [Parameter]
    public Room? Room { get; set; }

    private ElementReference _treasureRoomMainDivRef;

    private Timer _movementTimer = new() { Interval = 17 };

    private Dictionary<string, bool> Keys { get; set; } = new()
    {
        { "arrowup", false },
        { "arrowdown", false },
        { "arrowleft", false },
        { "arrowright", false },
        { "w", false },
        { "s", false },
        { "a", false },
        { "d", false },
    };

    protected override async Task OnInitializedAsync()
    {
    // Treasures = new List<Treasure>()
    // {
    //     new Treasure()
    //     {
    //         Song = new Song() { Titles = new List<Title>() { new Title() { LatinTitle = "test1" } } },
    //         Position = new Vector2(50, 100)
    //     },
    //     new Treasure()
    //     {
    //         Song = new Song() { Titles = new List<Title>() { new Title() { LatinTitle = "test2" } } },
    //         Position = new Vector2(300, 300)
    //     },
    // };

        _movementTimer.Elapsed += MovementTimerOnElapsed;
        _movementTimer.Start();
    }

    private void MovementTimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
    // todo? fix diagonal movement being faster
        const float speed = 4f; // todo make this a quiz setting?

        var player = Room!.Players.Single(x => x.Id == ClientState.Session!.Player.Id);
        var newX = player.LootingStuff.X;
        var newY = player.LootingStuff.Y;

        if (Keys["arrowup"] || Keys["w"])
        {
            newY -= speed;
        }

        if (Keys["arrowdown"] || Keys["s"])
        {
            newY += speed;
        }

        if (Keys["arrowleft"] || Keys["a"])
        {
            newX -= speed;
        }

        if (Keys["arrowright"] || Keys["d"])
        {
            newX += speed;
        }

    // bounds check
        if (newX > 0 && newX < 700 - 50)
        {
            player.LootingStuff.X = newX;
        }
        if (newY > 0 && newY < 700 - 50)
        {
            player.LootingStuff.Y = newY;
        }

        StateHasChanged();

#pragma warning disable CS4014
        ReportPositionToServer(newX, newY);
#pragma warning restore CS4014
    }

    private async Task ReportPositionToServer(float newX, float newY)
    {
        await ClientState.Session!.hubConnection!.SendAsync("SendPlayerMoved", ClientState.Session.Player.Id, newX, newY, DateTime.UtcNow);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _treasureRoomMainDivRef.FocusAsync();
        }
    }

    private async Task PickupTreasure(Treasure treasure)
    {
    // todo check if inventory has space
    // todo check if within the same room

    // todo do these checks server-side

    // todo inventory size check
    // if (Inventory.Count < )
    // {
    //
    // }

        if (treasure.TreasureRoomId == ClientState.Session!.Player.LootingStuff.TreasureRoomId)
        {
            if (treasure.IsGrabbableFromCoords((int) ClientState.Session!.Player.LootingStuff.X, (int) ClientState.Session!.Player.LootingStuff.Y))
            {
                Treasures.Remove(treasure);
                Inventory.Add(treasure);
            }
            else
            {
    // todo
            }
        }
        else
        {
    // todo
        }
    }

    private async Task DropTreasure(Treasure treasure)
    {
    // todo check owner


    // todo report to server
        Inventory.Remove(treasure);

    // todo do this server side
    // todo bounds check
        var newX = (int) ClientState.Session!.Player.LootingStuff.X + Random.Shared.Next(10, 78);
        var newY = (int) ClientState.Session!.Player.LootingStuff.Y + Random.Shared.Next(10, 78);

        Treasures.Add(treasure with { Position = new Point(newX, newY) });
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
    // Console.WriteLine(e.Key);
        if (Keys.ContainsKey(e.Key.ToLowerInvariant()))
        {
            Keys[e.Key.ToLowerInvariant()] = true;
        }
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
    // Console.WriteLine(e.Key);
        if (Keys.ContainsKey(e.Key.ToLowerInvariant()))
        {
            Keys[e.Key.ToLowerInvariant()] = false;
        }
    }

}
