@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Core
@using EMQ.Shared.Quiz.Entities.Concrete.Dto.Request
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime _jsRuntime
@inject HttpClient _client

<div style="border: 1px black solid; margin: 10px; padding: 10px; width: 240px;">
    <div id="StartDateFilter" style="max-width: 122px; display: inline-block; margin-right: 5px;">
        <Blazorise.DatePicker TValue="DateTime"
                              @bind-Date="@StartDateFilter"
                              Min="@DateTimeOffset.Parse(Constants.SHDateMin, CultureInfo.InvariantCulture)"
                              Max="@DateTimeOffset.Parse(Constants.QFDateMax, CultureInfo.InvariantCulture)"/>
    </div>
    <label for="StartDateFilter">Start date</label>
    <br/>
    <br/>
    <div id="EndDateFilter" style="max-width: 122px; display: inline-block; margin-right: 5px;">
        <Blazorise.DatePicker TValue="DateTime"
                              @bind-Date="@EndDateFilter"
                              Min="@DateTimeOffset.Parse(Constants.SHDateMin, CultureInfo.InvariantCulture)"
                              Max="@DateTimeOffset.Parse(Constants.QFDateMax, CultureInfo.InvariantCulture)"/>
    </div>
    <label for="EndDateFilter">End date</label>
    <br/>

    <br/>
    <button type="button" class="btn btn-primary" @onclick="Onclick_Search">Search</button>
</div>

<details>
    <summary>Player stats</summary>
    <p>Only counting quizzes that count for stats.</p>
    <PlayerStatsComponent
        PlayerStatsDict="@PlayerStatsComponent.CalculatePlayerStats(SHRoomContainers.SelectMany(x => x.Quizzes.Where(z => z.Quiz.should_update_stats).SelectMany(y => y.SongHistories)).Select(x => x.Value).ToArray(), GuessKind.Mst)">
    </PlayerStatsComponent>
</details>

@foreach (var shRoomContainer in SHRoomContainers)
{
    if (!IsOpenDict.TryGetValue(shRoomContainer.Room.id, out bool isOpen))
    {
        IsOpenDict[shRoomContainer.Room.id] = false;
    }

    <details style="margin: 10px;" open="@isOpen" @ontoggle="@(_ => IsOpenDict[shRoomContainer.Room.id] = !isOpen)">
        <summary>
            @shRoomContainer.Room.created_at.ToString("s") @shRoomContainer.Room.initial_name
            <button type="button" class="btn btn-secondary" @onclick="@(() => DownloadRoomJson(shRoomContainer))">
                Download JSON (Room)
            </button>
        </summary>
        @if (isOpen)
        {
            <div>
                @foreach (var quiz in shRoomContainer.Quizzes)
                {
                    <details style="padding-left: 6px; margin: 10px;">
                        <summary>
                            @quiz.Quiz.created_at.ToString("s") Quiz (@quiz.SongHistories.First().Value.PlayerGuessInfos.Count players)

                            <button type="button" class="btn btn-secondary" @onclick="@(() => CopySettingsCode(quiz))">
                                Copy settings code
                            </button>
                        </summary>
                        <div>
                            @if (quiz.Quiz.should_update_stats)
                            {
                                <p>Counts for stats.</p>
                            }
                            else
                            {
                                <p>Does not count for stats.</p>
                            }

                            <SongHistoryComponent SongsHistory="@quiz.SongHistories"></SongHistoryComponent>
                        </div>
                    </details>
                }
            </div>
        }
    </details>
}

@code {

    [Range(typeof(DateTime), Constants.SHDateMin, Constants.QFDateMax, ErrorMessage = $"Start date must be in range of {Constants.SHDateMin} to {Constants.QFDateMax}")]
    public DateTime StartDateFilter { get; set; } = DateTime.UtcNow.AddDays(-1);

    [Range(typeof(DateTime), Constants.SHDateMin, Constants.QFDateMax, ErrorMessage = $"Start date must be in range of {Constants.SHDateMin} to {Constants.QFDateMax}")]
    public DateTime EndDateFilter { get; set; } = DateTime.UtcNow.AddDays(1);

    public List<SHRoomContainer> SHRoomContainers { get; set; } = new();

    public Dictionary<Guid, bool> IsOpenDict { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetSHRoomContainers();
    }

    public async Task GetSHRoomContainers()
    {
        if (ClientState.Session != null)
        {
            var req = new ReqGetSHRoomContainers(ClientState.Session.Player.Id, StartDateFilter, EndDateFilter);
            var res = await _client.PostAsJsonAsync("Quiz/GetSHRoomContainers", req);
            if (res.IsSuccessStatusCode)
            {
                var content = await res.Content.ReadFromJsonAsync<List<SHRoomContainer>>();
                if (content is not null)
                {
                    SHRoomContainers = content;
                }
            }
        }

        StateHasChanged();
    }

    private async Task DownloadRoomJson(SHRoomContainer room)
    {
        foreach (var shQuizContainer in room.Quizzes)
        {
            shQuizContainer.PlayerStats = PlayerStatsComponent.CalculatePlayerStats(shQuizContainer.SongHistories.Select(x => x.Value).ToArray(), GuessKind.Mst);
        }

        string json = JsonSerializer.Serialize(room, Utils.JsoIndented);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(json);
        await _jsRuntime.InvokeVoidAsync("downloadFile", $"EMQ_Room_{room.Room.created_at:yyyy-MM-ddTHH_mm_ss}.json", "application/json", file);
    }

    private async Task CopySettingsCode(SHQuizContainer quiz)
    {
        await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", quiz.Quiz.settings_b64);
    }

    private async Task Onclick_Search()
    {
        await GetSHRoomContainers();
    }

}
