@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Auth.Entities.Concrete
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Globalization
@using EMQ.Shared.Core.SharedDbEntities
@using EMQ.Shared.Core.UI
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigation

<GenericModal @ref="@_shSongStatsModalRef"
              Title="@(Song?.Id > 0 ? Song.ToStringLatin() : "")"
              Size="@Blazorise.ModalSize.ExtraLarge">
    @if (SHSongStatsDict != null)
    {
        <Blazorise.Tabs SelectedTab="@GuessKind.Mst.ToString()" RenderMode="Blazorise.TabsRenderMode.LazyLoad">
            <Items>
                @foreach ((GuessKind guessKind, IQueryable<SHSongStats> _) in SHSongStatsDict)
                {
                    <Blazorise.Tab Name="@guessKind.ToString()">@guessKind.GetDescription()</Blazorise.Tab>
                }
            </Items>
            <Content>
                @foreach ((GuessKind guessKind, IQueryable<SHSongStats> shSongStats) in SHSongStatsDict)
                {
                    var songStats = Song?.Stats.GetValueOrDefault(guessKind);
                    <Blazorise.TabPanel Name="@guessKind.ToString()">
                        Guess rate: @(Math.Round(songStats?.CorrectPercentage ?? 0, 2))% (@(songStats?.TimesCorrect ?? 0)/@(songStats?.TimesPlayed ?? 0))
                        <div class="grid" tabindex="-1">
                            <QuickGrid Items="@shSongStats">
                                <PropertyColumn Property="@(x => x.PlayedAt)" Title="Date" Sortable="true" Format="s" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
                                <PropertyColumn Property="@(x => x.Username)" Title="Username" Sortable="true"/>
                                <TemplateColumn Title="Correct?" Sortable="true" SortBy="GridSort<SHSongStats>.ByAscending(x => x.IsCorrect)">
                                    @if (context.IsCorrect)
                                    {
                                        <span style="color: green">✓</span>
                                    }
                                    else
                                    {
                                        <span style="color: red">✘</span>
                                    }
                                </TemplateColumn>
                                <TemplateColumn Title="Guess time" Sortable="true" SortBy="GridSort<SHSongStats>.ByAscending(x => x.FirstGuessMs)">
                                    @if (context.FirstGuessMs > 0)
                                    {
                                        <span>@(Math.Round((float)context.FirstGuessMs / 1000, 2))s</span>
                                    }
                                </TemplateColumn>
                                <PropertyColumn Property="@(x => x.Guess)" Title="Guess" Sortable="true"/>
                                <TemplateColumn Title="Sample">
                                    @if (context.StartTime != null && context.Duration != null)
                                    {
                                        <span>@(context.StartTime.Value.ToString("mm\\:ss"))/@(context.Duration.Value.ToString("mm\\:ss"))</span>
                                    }

                                </TemplateColumn>
                            </QuickGrid>
                        </div>
                    </Blazorise.TabPanel>
                }
            </Content>
        </Blazorise.Tabs>
    }
</GenericModal>

<GenericModal @ref="@_MusicVotesModalRef"
              Title="@(Song?.Id > 0 ? Song.ToStringLatin() : "")"
              Size="@Blazorise.ModalSize.Large">
    @if (MusicVotes != null)
    {
        <div class="grid" tabindex="-1">
            <QuickGrid Items="@MusicVotes">
                <PropertyColumn Property="@(x => x.updated_at)" Title="Vote date" Format="s" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
                <TemplateColumn Title="Username">
                    @Utils.UserIdToUsername(ResGetMusicVotes!.UsernamesDict, context.user_id)
                </TemplateColumn>
                <TemplateColumn Title="Vote" Sortable="true" SortBy="@(GridSort<MusicVote>.ByAscending(x => x.vote))">
                    @(((float)context.vote! / 10).ToString(CultureInfo.InvariantCulture))
                </TemplateColumn>
            </QuickGrid>
        </div>
    }
</GenericModal>

@if (Song != null)
{
    bool isDebugMode = ClientState.Preferences.DebugMode;
    @if (ClientState.Session != null && Song.Id > 0 && Song.Links.Any(x => x.IsFileLink))
    {
        <SongReportComponent @ref="_songReportComponent" Song="@Song"/>
    }

    <div class="songInfoCard card">
        @if (ClientState.Session != null && Song.Id > 0 && Song.Links.Any(x => x.IsFileLink))
        {
            <span class="songInfoCardReportButton link-danger"
                  style="position: absolute; right: 10px; top: 5px; cursor: pointer;"
                  @onclick="@(async () => await _songReportComponent.Onclick_Report())">
                Report
            </span>
        }

        <div class="songInfoCardBody card-body" style="padding-bottom: 0;">
            <div class="songInfo">
                @if (isDebugMode)
                {
                    @if (Song.MusicBrainzRecordingGid != null)
                    {
                        <br/>
                        <span> @Song.MusicBrainzRecordingGid </span>
                    }

                    @if (true && ClientUtils.HasAdminPerms())
                    {
                        <br/>
                        <span>@(Song.ToSongLite().EMQSongHash)</span>
                    }
                }

                <div>
                    <h5 class="songSourceSongType">
                        @{
                            // Dictionary<List<string>, List<SongSourceSongType>> songSourceVNIDSongTypes = new();
                            //
                            // foreach (SongSource songSource in Song.Sources)
                            // {
                            //     songSourceVNIDSongTypes.Add(songSource.Links.Select(x => x.Url).ToList(), songSource.SongTypes);
                            // }

                            // foreach (Guid songMusicBrainzRelease in Song.MusicBrainzReleases)
                            // {
                            //     songSourceVNIDSongTypes.Add(
                            //         new List<string>
                            //         {
                            //             $"https://musicbrainz.org/release/{songMusicBrainzRelease}"
                            //         },
                            //         new List<SongSourceSongType> { SongSourceSongType.BGM });
                            // }

                            // couldn't get distinct to work
                            HashSet<string?> displayedIds = new();

                            // foreach ((List<string> songSourceVNIDs, List<SongSourceSongType>? songTypes) in songSourceVNIDSongTypes)
                            foreach (var songSource in Song.Sources)
                            {
                                var vndbLink = songSource.Links.SingleOrDefault(x => x.Type == SongSourceLinkType.VNDB);
                                // var otherLinks = songSource.Links.Where(x => x.Type != SongSourceLinkType.VNDB);
                                var songTypes = songSource.SongTypes;
                                // foreach (string songSourceVNID in songSourceVNIDs)
                                // {
                                if (vndbLink is null || !displayedIds.Contains(vndbLink.Url))
                                {
                                    displayedIds.Add(vndbLink?.Url);

                                    string final = "";
                                    for (int index = 0; index < songTypes.Count; index++)
                                    {
                                        SongSourceSongType songType = songTypes[index];
                                        final += $"{songType}{(index + 1 != songTypes.Count ? ", " : "")}";
                                    }

                                    string href = $"ems{songSource.Id}";
                                    <a href="@href" target="_blank" style="color: inherit; text-decoration-line: inherit;">
                                        @(final)
                                    </a>

                                    @if (Song.Id > 0 || IsModPage || IsEditing) // don't show links when playing with Hints
                                    {
                                        <SourceFaviconsComponent Links="@(songSource.Links)" IsModPage="IsModPage" IsBGM="Song.IsBGM"/>
                                    }

                                    <br/>
                                }
                                // }
                            }
                        }

                    </h5>
                    @if (Song.Titles.Any())
                    {
                        Title mainTitle = Converters.GetSingleTitle(Song.Titles);
                        string latinTitle = mainTitle.LatinTitle;
                        string? nonLatinTitle = mainTitle.NonLatinTitle;

                        // we're not using Title.ToString() here to force a newline between the Latin and NonLatin titles
                        <h4 class="songLatinTitle card-title">@mainTitle.LatinTitle</h4>
                        @if (!string.IsNullOrWhiteSpace(nonLatinTitle) &&
                             !string.Equals(nonLatinTitle, latinTitle, StringComparison.InvariantCultureIgnoreCase))
                        {
                            <h4 class="songNonLatinTitle card-title">(@mainTitle.NonLatinTitle)</h4>
                        }
                    }
                </div>
                <div>
                    @if (Song.Artists.Any())
                    {
                        @foreach (SongArtist songArtist in Song.Artists)
                        {
                            Title songArtistTitle = Converters.GetSingleTitle(songArtist.Titles);

                            <div>
                                @* @if (ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session, PermissionKind.EditSongMetadata)) *@
                                @* { *@
                                @*     // todo should probably show up only on artist's page instead of on every song they've performed in *@
                                @*     <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteArtist(songArtist))">🗑</span> *@
                                @* } *@

                                @for (int index = 0; index < songArtist.Roles.Count; index++)
                                {
                                    var role = songArtist.Roles[index];
                                    <span style="color: @UiHelpers.ArtistRole2Color(role);" title="@role.ToString()">@UiHelpers.ArtistRole2Str(role)</span>
                                    if (index != songArtist.Roles.Count - 1)
                                    {
                                        <span>, </span>
                                    }
                                }

                                @if (true)
                                {
                                    string href = $"ea{songArtist.Id}";
                                    <a href="@href" target="_blank" style="margin-left: 4px; color: inherit; text-decoration-line: inherit;">
                                        @songArtistTitle.ToString()
                                    </a>
                                }

                                @if (Song.Id > 0 || IsModPage || IsEditing) // don't show links when playing with Hints
                                {
                                    <ArtistFaviconsComponent Links="songArtist.Links"/>
                                }

                            </div>
                        }
                    }
                </div>
                <div>
                    @if (ShowDevelopers) // todo this is shown when playing with hints during guess phase when it shouldn't be
                    {
                        var developers = Song.Sources.SelectMany(x => x.Developers).DistinctBy(x => x.Title.LatinTitle).ToArray();
                        if (developers.Any())
                        {
                            <br/>
                            <span>Developers:</span>
                            <br/>
                            @foreach (var developer in developers)
                            {
                                <span>@developer.Title.LatinTitle</span>
                                <br/>
                            }
                        }
                    }
                </div>

            @if (true)
            {
                var songStats = Song.Stats?.GetValueOrDefault(GuessKind.Mst); // do not remove ?
                @if (songStats != null && songStats.TimesPlayed > 0)
                {
                    <br/>
                    <div class="songStats" @onclick="OnclickSongStatsDiv" style="cursor: pointer;">
                        <div class="songStatsGuessRate">
                            Guess rate: @(Math.Round(songStats.CorrectPercentage, 2))% (@(songStats.TimesCorrect)/@(songStats.TimesPlayed))
                        </div>
                        @if (songStats.TimesGuessed > 0)
                        {
                            <div class="songStatsGuessTime">
                                Average guess time: @(Math.Round((float)songStats.AverageGuessMs / 1000, 2))s (@songStats.TimesGuessed)
                            </div>
                        }
                        Unique players: @songStats.UniqueUsers
                    </div>
                }
            }

            <br/>
            @if (Song.Id > 0 || IsEditing)
            {
                @if (Song.VoteCount > 0)
                {
                    <div class="songRating" @onclick="OnclickSongRatingDiv" style="cursor: pointer; margin-bottom: 4px;">
                        Rating: @Song.VoteAverage.ToString("F2", CultureInfo.InvariantCulture) (@Song.VoteCount)
                    </div>
                }

                if (!IsEditing)
                {
                    _ = ClientState.MusicVotes.TryGetValue(Song.Id, out MusicVote? musicVote);
                    <MusicVoteComponent SongId="Song.Id" ParentStateHasChangedCallback="CallStateHasChanged" MusicVote="musicVote"/>
                }

                <br/>
                bool openTypes = Song.Type > SongType.Standard || IsEditing;
                <details open=@openTypes>
                    <summary>Types</summary>
                    @foreach (SongType key in Enum.GetValues<SongType>())
                    {
                        if (key == SongType.Unknown)
                        {
                            continue;
                        }

                        <label>
                            <input type="checkbox" class="form-check-input" disabled="@(!IsEditing)"
                                   @bind:get="@Song.Type.HasFlag(key)"
                                   @bind:set="@(new Func<bool, Task>(async value => await OnSongTypesCheckboxClick(value, key)))"
                                   @bind:event="oninput"
                                   style="margin: 5px"/>
                            @if (!string.IsNullOrEmpty(key.GetDescription()))
                            {
                                @key.GetDescription()
                            }
                            else
                            {
                                @key.ToString()
                            }
                        </label>
                        <br/>
                    }
                </details>

                bool openAttributes = Song.Attributes > SongAttributes.None || IsEditing;
                <details open=@openAttributes>
                    <summary>Attributes</summary>
                    @foreach (SongAttributes key in Enum.GetValues<SongAttributes>())
                    {
                        if (key == SongAttributes.None)
                        {
                            continue;
                        }

                        <label>
                            <input type="checkbox" class="form-check-input" disabled="@(!IsEditing || (key == SongAttributes.Locked && !ClientUtils.HasModPerms()))"
                                   @bind:get="@Song.Attributes.HasFlag(key)"
                                   @bind:set="@(new Func<bool, Task>(async value => await OnSongAttributesCheckboxClick(value, key)))"
                                   @bind:event="oninput"
                                   style="margin: 5px"/>
                            @if (!string.IsNullOrEmpty(key.GetDescription()))
                            {
                                @key.GetDescription()
                            }
                            else
                            {
                                @key.ToString()
                            }
                        </label>
                        <br/>
                    }
                </details>

                SongLink[] externalLinks = Song.Links.Where(x => !x.IsFileLink).ToArray();
                @if (externalLinks.Any() || IsEditing)
                {
                    <details open="@(!IsQuizPage)">
                        <summary>External links</summary>
                        @foreach (SongLink link in externalLinks)
                        {
                            // todo favicon
                            <a href="@link.Url" target="_blank" style="margin-right: 4px;">@link.Type.GetDescription()</a>
                            <br/>
                        }
                        <br/>
                    </details>
                }
            }
            </div>

        </div>

        <div class="songInfoCard bottom" style="display: flex; justify-content: space-between; margin: 0 10px 4px 6px;">
            <span class="songInfoCardMusicId"
                  style="cursor: pointer;"
                  title="Id (click to copy share link)">
                @if (Song.Id > 0)
                {
                    string link = $"{_navigation.BaseUri}LibraryPage?mId={Song.Id}";
                    <span @onclick="@(async () => await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", link))">
                        @Song.Id
                    </span>
                    @if (isDebugMode && ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session, PermissionKind.Delete))
                    {
                        <span style="display: inline-block; cursor: pointer; margin-left: 4px;" @onclick="@(async () => await DeleteSong(Song))">🗑</span>
                    }
                }
            </span>

            <span class="songInfoCardDataSourceKind"
                  title="Data source">
                @if (true)
                {
                    string src = Song.DataSource switch
                    {
                        DataSourceKind.VNDB => "assets/favicon/vndb.ico",
                        DataSourceKind.MusicBrainz => "assets/favicon/musicbrainz.png",
                        DataSourceKind.EMQ => "favicon.ico",
                        // _ => "assets/question-circle.svg"
                        _ => ""
                        };

                    @if (!string.IsNullOrEmpty(src))
                    {
                        <img width="16px" height="16px"
                             src="@src" alt="Data source"
                             style="margin-left: 8px; scale: 1.2;">
                    }
                }
            </span>
        </div>
    </div>
}
