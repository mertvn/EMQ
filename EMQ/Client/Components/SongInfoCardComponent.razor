@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Auth.Entities.Concrete
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IJSRuntime _jsRuntime
@inject HttpClient _client

<GenericModal @ref="@_shSongStatsModalRef"
              Title="@(Song?.Id > 0 ? Song.ToStringLatin() : "")"
              Size="@Blazorise.ModalSize.ExtraLarge">
    @if (SHSongStats != null)
    {
        <div class="grid" tabindex="-1">
            <QuickGrid Items="@SHSongStats">
                <PropertyColumn Property="@(x => x.PlayedAt)" Title="Date" Sortable="true" Format="s" IsDefaultSort="SortDirection.Descending"/>
                <PropertyColumn Property="@(x => x.Username)" Title="Username" Sortable="true"/>
                <TemplateColumn Title="Correct?" Sortable="true" SortBy="GridSort<SHSongStats>.ByAscending(x => x.IsCorrect)">
                    @if (context.IsCorrect)
                    {
                        <span style="color: green">✓</span>
                    }
                    else
                    {
                        <span style="color: red">✘</span>
                    }
                </TemplateColumn>
                <TemplateColumn Title="Guess time" Sortable="true" SortBy="GridSort<SHSongStats>.ByAscending(x => x.FirstGuessMs)">
                    @if (context.FirstGuessMs > 0)
                    {
                        <span>@(Math.Round((float)context.FirstGuessMs / 1000, 2))s</span>
                    }
                </TemplateColumn>
                <PropertyColumn Property="@(x => x.Guess)" Title="Guess" Sortable="true"/>
            </QuickGrid>
        </div>
    }
</GenericModal>

@if (Song != null)
{
    bool isMod = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Moderator);
    bool isAdmin = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Admin);
    bool isDebugMode = ClientState.Preferences.DebugMode;
    @if (ClientState.Session != null && Song.Id > 0 && Song.Links.Any())
    {
        <SongReportComponent @ref="_songReportComponent" Song="@Song"/>
    }

    <div class="songInfoCard card">
        @if (ClientState.Session != null && Song.Id > 0 && Song.Links.Any())
        {
            <span class="songInfoCardReportButton link-danger"
                  style="position: absolute; right: 10px; top: 5px; cursor: pointer;"
                  @onclick="@(async () => await _songReportComponent.Onclick_Report())">
                Report
            </span>
        }

        <div class="songInfoCardBody card-body">
            <div class="songInfo">
                @if (isDebugMode)
                {
                    @if (Song.Id > 0)
                    {
                        @if (isAdmin)
                        {
                            <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteSong(Song))">🗑</span>
                        }

                        <span> @Song.Id </span>
                    }

                    @if (Song.MusicBrainzRecordingGid != null)
                    {
                        <br/>
                        <span> @Song.MusicBrainzRecordingGid </span>
                    }
                }

                <div>
                    <h5 class="songSourceSongType">
                        @{
                            // Dictionary<List<string>, List<SongSourceSongType>> songSourceVNIDSongTypes = new();
                            //
                            // foreach (SongSource songSource in Song.Sources)
                            // {
                            //     songSourceVNIDSongTypes.Add(songSource.Links.Select(x => x.Url).ToList(), songSource.SongTypes);
                            // }

                            // foreach (Guid songMusicBrainzRelease in Song.MusicBrainzReleases)
                            // {
                            //     songSourceVNIDSongTypes.Add(
                            //         new List<string>
                            //         {
                            //             $"https://musicbrainz.org/release/{songMusicBrainzRelease}"
                            //         },
                            //         new List<SongSourceSongType> { SongSourceSongType.BGM });
                            // }

                            // couldn't get distinct to work
                            List<string> displayedIds = new();

                            // foreach ((List<string> songSourceVNIDs, List<SongSourceSongType>? songTypes) in songSourceVNIDSongTypes)
                            foreach (var songSource in Song.Sources)
                            {
                                var vndbLink = songSource.Links.Single(x => x.Type == SongSourceLinkType.VNDB);
                                // var otherLinks = songSource.Links.Where(x => x.Type != SongSourceLinkType.VNDB);
                                var songTypes = songSource.SongTypes;
                                // foreach (string songSourceVNID in songSourceVNIDs)
                                // {
                                if (!displayedIds.Contains(vndbLink.Url))
                                {
                                    displayedIds.Add(vndbLink.Url);

                                    string final = "";
                                    for (int index = 0; index < songTypes.Count; index++)
                                    {
                                        SongSourceSongType songType = songTypes[index];
                                        final += $"{songType}{(index + 1 != songTypes.Count ? ", " : "")}";
                                    }

                                    <span>@(final)</span>

                                    @if (Song.Id > 0 || IsModPage) // don't show links when playing with Hints
                                    {
                                        foreach (var link in songSource.Links.OrderBy(x => x.Type))
                                        {
                                            string src;
                                            if (link.Url.Contains("vndb.org")) // todo
                                            {
                                                src = "assets/favicon/vndb.ico";
                                            }
                                            else if (link.Url.Contains("musicbrainz.org"))
                                            {
                                                src = "assets/favicon/musicbrainz.png";
                                            }
                                            else if (link.Url.Contains("vgmdb.net"))
                                            {
                                                src = "assets/favicon/vgmdb.ico";
                                            }
                                            else
                                            {
                                                // todo?
                                                src = "";
                                            }

                                            @if (!string.IsNullOrEmpty(src))
                                            {
                                                string href = link.Url;
                                                @if (IsModPage && link.Url.Contains("vndb.org/v"))
                                                {
                                                    href += "/hist";
                                                }

                                                <Blazorise.Tooltip Text="@(link.Name)" Inline="true">
                                                    <a class="songSourceVNID link-primary" href="@href" target="_blank">
                                                        <img width="16px" height="16px"
                                                             src="@src" alt="link"
                                                             style="margin-left: 8px; scale: 1.2;">
                                                    </a>
                                                </Blazorise.Tooltip>
                                            }
                                        }
                                    }

                                    <br/>
                                }
                                // }
                            }
                        }

                    </h5>
                    @if (Song.Titles.Any())
                    {
                        Title mainTitle = Converters.GetSingleTitle(Song.Titles);
                        string latinTitle = mainTitle.LatinTitle;
                        string? nonLatinTitle = mainTitle.NonLatinTitle;

                        // we're not using Title.ToString() here to force a newline between the Latin and NonLatin titles
                        <h4 class="songLatinTitle card-title">@mainTitle.LatinTitle</h4>
                        @if (!string.IsNullOrWhiteSpace(nonLatinTitle) &&
                             !string.Equals(nonLatinTitle, latinTitle, StringComparison.InvariantCultureIgnoreCase))
                        {
                            <h4 class="songNonLatinTitle card-title">(@mainTitle.NonLatinTitle)</h4>
                        }
                    }
                </div>
                <div>
                    @if (Song.Artists.Any())
                    {
                        <span>by</span>
                        @foreach (SongArtist songArtist in Song.Artists)
                        {
                            Title songArtistTitle = Converters.GetSingleTitle(songArtist.Titles);

                            <div>
                                <span>@songArtistTitle.ToString()</span>

                                @if (Song.Id > 0 || IsModPage) // don't show links when playing with Hints
                                {
                                    @* TODO: this is a hack because we don't have dedicated musicbrainz artist links yet*@
                                    @if (songArtist.VndbId!.StartsWith("s"))
                                    {
                                        <a class="songArtistsTitle link-primary" href="@(songArtist.VndbId.ToVndbUrl())" target="_blank">
                                            <img width="16px" height="16px"
                                                 src="assets/favicon/vndb.ico" alt="link"
                                                 style="margin-left: 6px; scale: 1.2;">
                                        </a>
                                    }
                                    else
                                    {
                                        <a class="songArtistsTitle link-primary" href="@($"https://musicbrainz.org/artist/{songArtist.VndbId}")" target="_blank">
                                            <img width="16px" height="16px"
                                                 src="assets/favicon/musicbrainz.png" alt="link"
                                                 style="margin-left: 6px; scale: 1.2;">
                                        </a>
                                    }
                                }

                            </div>
                        }
                    }
                </div>
                @if (Song.Stats.TimesPlayed > 0)
                {
                    <br/>
                    <div class="songStats" @onclick="OnclickSongStatsDiv" style="cursor: pointer;">
                        <div class="songStatsGuessRate">
                            Guess rate: @(Math.Round(Song.Stats.CorrectPercentage, 2))% (@(Song.Stats.TimesCorrect)/@(Song.Stats.TimesPlayed))
                        </div>
                        @if (Song.Stats.TimesGuessed > 0)
                        {
                            <div class="songStatsGuessTime">
                                Average guess time: @(Math.Round((float)Song.Stats.AverageGuessMs / 1000, 2))s (@Song.Stats.TimesGuessed)
                            </div>
                        }
                        Unique players: @Song.Stats.UniqueUsers
                    </div>
                }

            @if (Song.Id > 0)
            {
                <br/>
                <details>
                    <summary>Attributes</summary>
                    @foreach (SongAttributes key in Enum.GetValues<SongAttributes>())
                    {
                        if (key == SongAttributes.Spoilers) // todo others, eventually
                        {
                            string id = $"SongAttribute-{Song.Id}-{key}";
                            <input type="checkbox" id="@id" class="form-check-input" disabled="@(!isMod)"
                                   @bind:get="@Song.Attributes.HasFlag(key)"
                                   @bind:set="@(new Func<bool, Task>(async value => await OnSongAttributesCheckboxClick(value, key)))"
                                   @bind:event="oninput"
                                   style="margin: 5px"/>
                            <label for="@id">
                                @if (!string.IsNullOrEmpty(key.GetDescription()))
                                {
                                    @key.GetDescription()
                                }
                                else
                                {
                                    @key.ToString()
                                }
                            </label>
                            <br/>
                        }
                    }
                </details>
            }
            </div>

        </div>
    </div>
}
