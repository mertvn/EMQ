@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core

@if (Song != null)
{
    <div class="songInfoCard card">
        <div class="songInfoCardBody card-body">
            <div class="songInfo">
                <div>
                    <h5 class="songSourceSongType">
                        @{
                            Dictionary<List<string>, List<SongSourceSongType>> songSourceVNIDSongTypes = new();

                            foreach (SongSource songSource in Song.Sources)
                            {
                                songSourceVNIDSongTypes.Add(songSource.Links.Select(x => x.Url).ToList(), songSource.SongTypes);
                            }

                            // couldn't get distinct to work
                            List<string> displayedIds = new();

                            foreach ((List<string> songSourceVNIDs, List<SongSourceSongType>? songTypes) in songSourceVNIDSongTypes)
                            {
                                foreach (string songSourceVNID in songSourceVNIDs)
                                {
                                    if (!displayedIds.Contains(songSourceVNID))
                                    {
                                        displayedIds.Add(songSourceVNID);

                                        for (int index = 0; index < songTypes.Count; index++)
                                        {
                                            SongSourceSongType songType = songTypes[index];
                                            <span>@songType</span>

                                            if (index + 1 != songTypes.Count)
                                            {
                                                <span>, </span>
                                            }
                                        }

                                        // todo fix underline being too long
                                        <span></span>
                                        <a class="songSourceVNID link-primary" href="@songSourceVNID" target="_blank">
                                            <span>(VN)</span>
                                        </a>
                                        <br/>
                                    }
                                }
                            }
                        }

                    </h5>
                    @{
                        Title mainTitle = Song.Titles.First(x => x.IsMainTitle);
                        string latinTitle = mainTitle.LatinTitle;
                        string? nonLatinTitle = mainTitle.NonLatinTitle;

                        <h5 class="songLatinTitle card-title">@mainTitle.LatinTitle</h5>
                        @if (!string.Equals(nonLatinTitle, latinTitle, StringComparison.InvariantCultureIgnoreCase))
                        {
                            if (!string.IsNullOrWhiteSpace(nonLatinTitle))
                            {
                                <h5 class="songLatinTitle card-title">(@mainTitle.NonLatinTitle)</h5>
                            }
                        }
                    }
                </div>
                <div>
                    by
                    @foreach (SongArtist songArtist in Song.Artists)
                    {
                        var songArtistTitle = songArtist.Titles.FirstOrDefault(x => x.IsMainTitle) ?? songArtist.Titles.First();

                        <div>
                            <a class="songArtistsLatinTitle link-primary" href="@(songArtist.VndbId.ToVndbUrl())" target="_blank">
                                <span>@songArtistTitle.ToString()</span>
                            </a>
                        </div>
                    }
                </div>
                @if (Song.Stats.TimesPlayed > 0)
                {
                    <br/>
                    <div class="songStats">
                        <div class="songStatsDifficulty">
                            @* todo coloring *@
                            @* todo tooltip  *@
                            Difficulty: @(Song.Stats.TimesCorrect)/@(Song.Stats.TimesPlayed) (@(Math.Round(Song.Stats.CorrectPercentage, 2))%)
                        </div>
                        @if (Song.Stats.TimesGuessed > 0)
                        {
                            <div class="songStatsGuessTime">
                                Average guess time: @(Math.Round((float)Song.Stats.AverageGuessMs / 1000, 2))s (@Song.Stats.TimesGuessed)
                            </div>
                        }
                    </div>
                }
            </div>

        </div>
    </div>
}
