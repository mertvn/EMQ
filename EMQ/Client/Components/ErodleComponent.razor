@using EMQ.Shared.Library.Entities.Concrete
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core.SharedDbEntities
@using System.Globalization
@using EMQ.Shared.Core
@using EMQ.Shared.Erodle.Entities.Concrete
@using EMQ.Shared.Erodle.Entities.Concrete.Dto.Request
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

@* todo? hints *@
@if (CorrectAnswer != null)
{
    if (CorrectAnswer.ErodleId > 0)
    {
        <h3>Erodle (daily)</h3>
    }
    else
    {
        <h3>Erodle (local)</h3>
    }
}
else
{
    <h3>Erodle</h3>
}

<p>Erodle is a game where you try to find the correct VN using the information given in @Constants.ErodleMaxGuesses guesses or less. Type a VN name below to start.</p>

<div id="SelectedDateFilter" style="max-width: 112px; display: inline-block; margin-right: 5px;">
    <Blazorise.DatePicker TValue="DateTime"
                          Date="SelectedDate"
                          DateChanged="DateChanged"
                          Min="@DateTimeOffset.Parse(Constants.ErodleDateMin, CultureInfo.InvariantCulture)"
                          Max="@DateTimeOffset.UtcNow"/>
</div>
<label for="SelectedDateFilter">Date</label>
<br/>

<details>
    <summary>Leaderboards</summary>
    <label>
        <input type="checkbox" class="form-check-input" value="@ShowAllTimeLeaderboards" @onchange="OnChange_Checkbox"/>
        All-time
    </label>

    @if (ErodlePlayerInfos != null)
    {
        <div>
            <Paginator State="@_paginationErodlePlayerInfos"/>
        </div>
        <div class="grid" tabindex="-1">
            <QuickGrid Items="@ErodlePlayerInfos" Pagination="@_paginationErodlePlayerInfos">
                <TemplateColumn Title="Username" Sortable="true" SortBy="@(GridSort<ErodlePlayerInfo>.ByAscending(x => x.Username))">
                    @context.Username
                </TemplateColumn>
                <PropertyColumn Property="@(x => x.Wins)" Title="Wins" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
                <PropertyColumn Property="@(x => x.Losses)" Title="Losses" Sortable="true"/>
                <PropertyColumn Property="@(x => x.Plays)" Title="Plays" Sortable="true"/>
                <PropertyColumn Property="@(x => x.Guesses)" Title="Guesses" Sortable="true"/>
                <PropertyColumn Property="@(x => x.AvgGuesses)" Title="Avg. guesses per play" Sortable="true"/>
            </QuickGrid>
        </div>
        <br/>
    }
</details>
<br/>

<button type="button" class="btn btn-success" disabled="@(Status is ErodleStatus.Playing)" @onclick="@(() => StartNewGame(null, ErodleKind.Mst))" style="margin: 4px;">New game (local)</button>
<br/>

<button type="button" class="btn btn-danger" disabled="@(Status > ErodleStatus.Playing || CorrectAnswer == null)" @onclick="OnLoss" style="margin: 4px;">Give up</button>
<br/>

@if (Status is ErodleStatus.Playing)
{
    <p>Guess @(PreviousAnswers.Count + 1)/@Constants.ErodleMaxGuesses</p>
}
else
{
    if (Status is ErodleStatus.Won)
    {
        <p>You won!</p>
    }
    else
    {
        <p>You lost.</p>
    }
}

<div style="width: 1170px;">
    <GuessInputComponent @ref="_guessInputComponentRef"
                         Placeholder="Enter your guess here"
                         IsDisabled="@(Status > ErodleStatus.Playing)"
                         IsQuizPage="false"
                         @bind-GuessT="@SelectedMusicSourceTitle"
                         Callback="SelectedResultChangedMst">
    </GuessInputComponent>

    <table style="width: 1170px; margin: 4px;">
        <thead>
        <tr>
            <th>#</th>
            <th>Title</th>
            <th>Year</th>
            <th>Tags</th>
            <th>Developers</th>
            <th>Rating</th>
            <th>Vote count</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var previousAnswer in PreviousAnswers.OrderByDescending(x => x.GuessNumber))
        {
            @if (CorrectAnswer == null)
            {
                continue;
            }

            <tr>
                <td>
                    @previousAnswer.GuessNumber
                </td>
                <td>
                    @if (true)
                    {
                        bool isCorrect = previousAnswer.AutocompleteMst.MSId == CorrectAnswer.AutocompleteMst.MSId;
                        string color = isCorrect ? "green" : "red";
                        <span style="color: @color">
                            @previousAnswer.AutocompleteMst.MSTLatinTitle
                        </span>
                    }
                </td>
                <td>
                    @if (true)
                    {
                        bool isCorrect = previousAnswer.Date.Year == CorrectAnswer.Date.Year;
                        bool isUnder = previousAnswer.Date.Year > CorrectAnswer.Date.Year;
                        string color = isCorrect ? "green" : "red";
                        <span style="color: @color">
                            @(isCorrect ? "" : isUnder ? "↓" : "↑") @previousAnswer.Date.Year
                        </span>
                    }
                </td>
                <td>
                    @foreach (var tag in previousAnswer.Tags)
                    {
                        bool isCorrect = CorrectAnswer.Tags.Any(x => x.Id == tag.Id);
                        string color = isCorrect ? "green" : "red";
                        <span style="color: @color">
                            @tag.Name
                        </span>
                        <br/>
                    }
                </td>
                <td>
                    @foreach (var developer in previousAnswer.Developers)
                    {
                        bool isCorrect = CorrectAnswer.Developers.Any(x => x.VndbId == developer.VndbId);
                        string color = isCorrect ? "green" : "red";
                        <span style="color: @color">
                            @developer.Title.LatinTitle
                        </span>
                        <br/>
                    }
                </td>
                <td>
                    @if (true)
                    {
                        bool isCorrect = previousAnswer.Rating == CorrectAnswer.Rating;
                        bool isUnder = previousAnswer.Rating > CorrectAnswer.Rating;
                        string color = isCorrect ? "green" : "red";
                        <span style="color: @color">
                            @(isCorrect ? "" : isUnder ? "↓" : "↑")
                            @if (previousAnswer.Rating != null)
                            {
                                @((previousAnswer.Rating.Value / 100f).ToString("N2", CultureInfo.InvariantCulture))
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </span>
                    }
                </td>
                <td>
                    @if (true)
                    {
                        bool isCorrect = previousAnswer.VoteCount == CorrectAnswer.VoteCount;
                        bool isUnder = previousAnswer.VoteCount > CorrectAnswer.VoteCount;
                        string color = isCorrect ? "green" : "red";
                        <span style="color: @color">
                            @(isCorrect ? "" : isUnder ? "↓" : "↑")
                            @if (previousAnswer.VoteCount != null)
                            {
                                @previousAnswer.VoteCount.Value
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    private GuessInputComponent _guessInputComponentRef = null!;

    public AutocompleteMst? SelectedMusicSourceTitle { get; set; }

    public List<ErodleAnswer> PreviousAnswers { get; set; } = new();

    public ErodleAnswer? CorrectAnswer { get; set; }

    public ErodleStatus Status { get; set; }

    public DateTime SelectedDate { get; set; } = DateTime.UtcNow;

    private IQueryable<ErodlePlayerInfo>? ErodlePlayerInfos { get; set; }

    private readonly PaginationState _paginationErodlePlayerInfos = new() { ItemsPerPage = 20 };

    public bool ShowAllTimeLeaderboards { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await StartNewGame(DateOnly.FromDateTime(SelectedDate), ErodleKind.Mst);
        StateHasChanged();
        await FetchLeaderboards();
    }

    public async Task OnChange_Checkbox(ChangeEventArgs args)
    {
        ShowAllTimeLeaderboards = (bool)args.Value!;
        await FetchLeaderboards();
    }

    private async Task FetchLeaderboards()
    {
        var req = ShowAllTimeLeaderboards ? null : new ReqGetErodle { Date = DateOnly.FromDateTime(SelectedDate) };
        HttpResponseMessage res1 = await _client.PostAsJsonAsync("Erodle/GetLeaderboards", req);
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ErodlePlayerInfo[]>())!;
            ErodlePlayerInfos = content.AsQueryable();
        }
    }

    private async Task SelectedResultChangedMst()
    {
        if (SelectedMusicSourceTitle is null || CorrectAnswer is null)
        {
            return;
        }

        if (PreviousAnswers.Any(x => x.AutocompleteMst.MSId == SelectedMusicSourceTitle.MSId))
        {
            return;
        }

        HttpResponseMessage res1 = await _client.PostAsJsonAsync("Library/GetSongSource", new SongSource { Id = SelectedMusicSourceTitle.MSId, Categories = new List<SongSourceCategory> { new() } });
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ResGetSongSource>())!;
            var previousAnswer = new ErodleAnswer
            {
                ErodleId = CorrectAnswer.ErodleId,
                GuessNumber = PreviousAnswers.Count + 1,
                AutocompleteMst = SelectedMusicSourceTitle,
                Date = content.SongSource.AirDateStart.Date,
                Tags = content.SongSource.Categories.Where(x => x.SpoilerLevel == SpoilerLevel.None).OrderByDescending(x => x.Rating).Take(5).ToList(),
                Developers = content.SongSource.Developers,
                Rating = content.SongSource.RatingAverage,
                VoteCount = content.SongSource.VoteCount
            };
            PreviousAnswers.Add(previousAnswer);

            if (previousAnswer.ErodleId > 0)
            {
                var res = await _client.PostAsJsonAsync("Erodle/SubmitAnswer", previousAnswer);
                if (!res.IsSuccessStatusCode)
                {
                    await _jsRuntime.InvokeVoidAsync("alert", $"Failed to submit answer.");
                }
            }

            if (previousAnswer.AutocompleteMst.MSId == CorrectAnswer.AutocompleteMst.MSId)
            {
                await OnWin();
            }
            else if ((previousAnswer.GuessNumber + 1) > Constants.ErodleMaxGuesses)
            {
                await OnLoss();
            }
        }

        await _guessInputComponentRef.ClearInputField();
        StateHasChanged();
    }

    private async Task StartNewGame(DateOnly? date, ErodleKind kind)
    {
        PreviousAnswers.Clear();
        CorrectAnswer = null;
        Status = ErodleStatus.Playing;

        int msId;
        int erodleId = -1;
        if (date is null)
        {
            msId = Random.Shared.Next(1, 6546); // this can hit gaps but w/e
        }
        else
        {
            var req = new ReqGetErodle { Date = date.Value, Kind = kind };
            var res = await _client.PostAsJsonAsync("Erodle/GetErodleContainer", req);
            if (res.IsSuccessStatusCode)
            {
                var erodleContainer = await res.Content.ReadFromJsonAsync<ErodleContainer>();
                msId = int.Parse(erodleContainer!.Erodle.correct_answer);
                erodleId = erodleContainer.Erodle.id;
                Status = erodleContainer.Status;
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("alert", "Game not found.");
                return;
            }
        }

        HttpResponseMessage res1 = await _client.PostAsJsonAsync("Library/GetSongSource", new SongSource { Id = msId, Categories = new List<SongSourceCategory> { new() } });
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ResGetSongSource>())!;
            var title = content.SongSource.Titles.FirstOrDefault(y => y.Language == "ja" && y.IsMainTitle) ?? content.SongSource.Titles.First();
            var correctAnswer = new ErodleAnswer
            {
                ErodleId = erodleId,
                AutocompleteMst = new AutocompleteMst(content.SongSource.Id, title.LatinTitle),
                Date = content.SongSource.AirDateStart.Date,
                Tags = content.SongSource.Categories.Where(x => x.SpoilerLevel == SpoilerLevel.None).ToList(),
                Developers = content.SongSource.Developers,
                Rating = content.SongSource.RatingAverage,
                VoteCount = content.SongSource.VoteCount,
            };

            CorrectAnswer = correctAnswer;
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("alert", "Failed to initialize game.");
        }

        if (CorrectAnswer != null)
        {
            if (CorrectAnswer.ErodleId > 0)
            {
                var res = await _client.PostAsJsonAsync("Erodle/GetPreviousAnswers", CorrectAnswer.ErodleId);
                if (res.IsSuccessStatusCode)
                {
                    PreviousAnswers = (await res.Content.ReadFromJsonAsync<List<ErodleAnswer>>())!;
                }
            }

            if (Status == ErodleStatus.Lost)
            {
                AddCorrectAnswerToPreviousAnswers(CorrectAnswer);
            }
        }
    }

    private async Task OnLoss()
    {
        Status = ErodleStatus.Lost;
        if (CorrectAnswer!.ErodleId > 0)
        {
            var req = new ReqUpsertStatus { ErodleId = CorrectAnswer.ErodleId, Status = Status };
            var res = await _client.PostAsJsonAsync("Erodle/UpsertStatus", req);
            if (!res.IsSuccessStatusCode)
            {
                await _jsRuntime.InvokeVoidAsync("alert", "Failed to update game status.");
                return;
            }
        }

        AddCorrectAnswerToPreviousAnswers(CorrectAnswer);
    }

    private void AddCorrectAnswerToPreviousAnswers(ErodleAnswer correctAnswer)
    {
        correctAnswer.Tags = correctAnswer.Tags.Where(x => x.SpoilerLevel == SpoilerLevel.None).OrderByDescending(x => x.Rating).Take(5).ToList();
        correctAnswer.GuessNumber = PreviousAnswers.Count + 1;
        PreviousAnswers.Add(correctAnswer);
    }

    private async Task OnWin()
    {
        Status = ErodleStatus.Won;
        if (CorrectAnswer!.ErodleId > 0)
        {
            var req = new ReqUpsertStatus { ErodleId = CorrectAnswer.ErodleId, Status = Status };
            var res = await _client.PostAsJsonAsync("Erodle/UpsertStatus", req);
            if (!res.IsSuccessStatusCode)
            {
                await _jsRuntime.InvokeVoidAsync("alert", "Failed to update game status.");
            }
        }
    }

    private async Task DateChanged(DateTime arg)
    {
        SelectedDate = arg;
        await StartNewGame(DateOnly.FromDateTime(SelectedDate), ErodleKind.Mst);
        if (!ShowAllTimeLeaderboards)
        {
            await FetchLeaderboards();
        }
    }

}
