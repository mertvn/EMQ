@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Auth.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core.UI
@using EMQ.Shared.VNDB.Business
@using Juliet.Model.VNDBObject
@using Microsoft.Extensions.Logging
@inject HttpClient _client
@inject ILogger<PlayerPreferencesComponent> _logger
@inject ClientUtils _clientUtils

@* setting z-index seems to prevent the modal closing animation from playing sometimes, but we have to do it *@
<Blazorise.Modal @ref="_modalRef" style="z-index: 4000">
    <Blazorise.ModalContent Centered="true" Scrollable="true" Size="Blazorise.ModalSize.ExtraLarge">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Preferences</Blazorise.ModalTitle>
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            @if (ClientState.Session != null)
            {
                <div id="playerPreferences" style="padding: 5px; margin: 2px;">
                    <EditForm Model="@ClientState.Session.Player.Preferences" OnValidSubmit="@(() => UpdatePlayerPreferences(ClientState.Session.Player.Preferences))">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <Blazorise.Tabs SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                            <Items>
                                <Blazorise.Tab Name="TabGeneral">General</Blazorise.Tab>
                                <Blazorise.Tab Name="TabVNDB">VNDB</Blazorise.Tab>
                            </Items>
                            <Content>
                                <Blazorise.TabPanel Name="TabGeneral">
                                    <InputCheckbox id="WantsVideo" class="form-check-input" @bind-Value="ClientState.Session.Player.Preferences.WantsVideo" style="margin: 5px"></InputCheckbox>
                                    <label for="WantsVideo">Prefer video links over sound links</label>
                                    <br/>

                                    <InputCheckbox id="RestartSongsOnResultsPhase" class="form-check-input" @bind-Value="ClientState.Session.Player.Preferences.RestartSongsOnResultsPhase" style="margin: 5px"></InputCheckbox>
                                    <label for="RestartSongsOnResultsPhase">Restart songs on Results Phase</label>
                                    <br/>

                                    <InputCheckbox id="AutoSkipGuessPhase" class="form-check-input" @bind-Value="ClientState.Session.Player.Preferences.AutoSkipGuessPhase" style="margin: 5px"></InputCheckbox>
                                    <label for="AutoSkipGuessPhase">Auto-skip Guess Phase</label>
                                    <br/>

                                    <InputCheckbox id="AutoSkipResultsPhase" class="form-check-input" @bind-Value="ClientState.Session.Player.Preferences.AutoSkipResultsPhase" style="margin: 5px"></InputCheckbox>
                                    <label for="AutoSkipResultsPhase">Auto-skip Results Phase</label>
                                    <br/>

                                    <InputCheckbox id="HideVideo" class="form-check-input" @bind-Value="ClientState.Session.Player.Preferences.HideVideo" style="margin: 5px"></InputCheckbox>
                                    <label for="HideVideo">Hide video</label>
                                    <br/>

                                    <InputSelect id="LinkHost" @bind-Value="ClientState.Session.Player.Preferences.LinkHost" style="margin: 5px">
                                        @foreach (SongLinkType songLinkType in Enum.GetValues<SongLinkType>().Where(x => x != SongLinkType.Unknown))
                                        {
                                            <option value="@songLinkType">@songLinkType</option>
                                        }
                                    </InputSelect>
                                    <label for="LinkHost">Preferred host</label>
                                    <br/>

                                    <div style="max-width: 400px; display: flex; align-items: center; align-content: center;">
                                        <Blazorise.Slider style="max-width: 100px;" id="VolumeMaster" @bind-Value="@ClientState.Session.Player.Preferences.VolumeMaster" Min="0" Max="100"/>
                                        <label for="VolumeMaster" style="margin-left: 5px;">Master Volume</label>
                                        <br/>
                                    </div>

                                </Blazorise.TabPanel>
                                <Blazorise.TabPanel Name="TabVNDB">
                                    @* todo let people access this tab without VndbInfo *@

                                    <InputText id="VndbId" type="text" @bind-Value="@ClientState.Session.VndbInfo.VndbId" style="margin: 5px"/>
                                    <label for="VndbId">VNDB Id</label>
                                    <br/>
                                    <br/>
                                    <InputText id="VndbApiToken" type="text" @bind-Value="@ClientState.Session.VndbInfo.VndbApiToken" style="margin: 5px"/>
                                    <label for="VndbApiToken">VNDB API Token</label>
                                    <br/>

                                    <button type="button" class="btn btn-primary" @onclick="@(() => SetVndbInfo(ClientState.Session.VndbInfo))" style="margin: 5px">
                                        Set VNDB info
                                    </button>
                                    <br/>

                                    <h5> Labels</h5>
                                    @if (ClientState.Session.VndbInfo.Labels is not null)
                                    {
                                        <p> You can include or exclude VNDB labels here. If a VN is labeled with both Exclude and Include, it will be excluded. </p>

                                        <button type="button" class="btn btn-primary" @onclick="@(() => FetchLabels(ClientState.Session.VndbInfo))">
                                            Fetch labels
                                        </button>
                                        <br/>

                                        <div class="labels d-flex flex-row flex-wrap" style="max-width: 1600px">
                                            @foreach (var label in Labels)
                                            {
                                                <div class="labelCard card" style="margin: 16px; min-width:200px; max-width: 340px; min-height:120px;">
                                                    <div class="labelCardBody card-body">
                                                        <span>#@label.Id @label.Name (@label.VNs.Count)</span>
                                                        @if (label.IsPrivate)
                                                        {
                                                            <span> Private </span>
                                                        }
                                                        else
                                                        {
                                                            <span> Public </span>
                                                        }

                                                        <br/>
                                                        <div class="btn-group btn-group-toggle" data-toggle="buttons" style="margin-top: 30px">
                                                            <label class="btn btn-outline-primary"
                                                                   style="background-color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Include, "green", "transparent");
                                            color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Include, "white", "black");">

                                                                <input type="radio" checked="@(label.Kind == LabelKind.Include)"
                                                                       @onclick="@(() => OnLabelKindChanged(label, LabelKind.Include))"> Include
                                                            </label>

                                                            <label class="btn btn-outline-primary"
                                                                   style="background-color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Maybe, "gray", "transparent");
                                            color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Maybe, "white", "black");">

                                                                <input type="radio" checked="@(label.Kind == LabelKind.Maybe)"
                                                                       @onclick="@(() => OnLabelKindChanged(label, LabelKind.Maybe))"> Maybe
                                                            </label>

                                                            <label class="btn btn-outline-primary"
                                                                   style="background-color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Exclude, "red", "transparent");
                                           color: @UiHelpers.Bool2Color(label.Kind == LabelKind.Exclude, "white", "black");">

                                                                <input type="radio" checked="@(label.Kind == LabelKind.Exclude)"
                                                                       @onclick="@(() => OnLabelKindChanged(label, LabelKind.Exclude))"> Exclude
                                                            </label>
                                                        </div>

                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p>Your VNDB info is not set.</p>
                                    }
                                </Blazorise.TabPanel>
                            </Content>
                        </Blazorise.Tabs>
                    </EditForm>
                </div>
            }
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
                Close
            </button>
            <button type="button" class="btn btn-primary"
                    @onclick="@(async () => { if (ClientState.Session != null) { await UpdatePlayerPreferences(ClientState.Session.Player.Preferences); } })">
                Save preferences
            </button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>
