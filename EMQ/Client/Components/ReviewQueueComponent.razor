@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Library.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Core
@using Blazorise
@using Blazorise.DataGrid
@using EMQ.Shared.Auth.Entities.Concrete
@inject HttpClient _client
@inject ILogger<GuessInputComponent> _logger
@inject IJSRuntime _jsRuntime

<ReviewComponent CurrentRQs="CurrentRQs" ParentStateHasChangedCallback="@CallStateHasChanged"></ReviewComponent>

<DataGrid TItem="RQ"
          Data="@CurrentRQs"
          PageSize="25"
          Responsive
          ShowPager
          ShowPageSizes
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowDefaultSortIcon
          RowHoverCursor="@(_ => { return Cursor.Default; })"
          RowSelectable="@(_ => { return false; })"
          PagerPosition="DataGridPagerPosition.TopAndBottom"
          PagerOptions="new DataGridPagerOptions { ButtonSize = Size.Small }">
    <DataGridColumns>
        <DataGridCommandColumn/>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.id)" Caption="ID">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    @if (ClientState.Session != null)
                    {
                        bool canDelete =
                            AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.ReviewSongLink) ||
                            string.Equals(rq.submitted_by, ClientState.Session.Player.Username, StringComparison.InvariantCultureIgnoreCase);

                        @if (canDelete && rq.status == ReviewQueueStatus.Pending)
                        {
                            <span style="display: inline-block; cursor: pointer; margin-right: 2px;" @onclick="@(async () => await DeleteReviewQueueItem(rq.id))">🗑</span>
                        }
                    }

                    <span>@rq.id</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.id)" Caption="Source Title" Sortable="false">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    @* todo link might be different from what's displayed *@
                    string title = Converters.GetSingleTitle(rq.Song.Sources.First().Titles).LatinTitle;
                    <a href="@rq.Song.Sources.First().Links.First(x => x.Type == SongSourceLinkType.VNDB).Url" target="_blank">
                        <Blazorise.Tooltip Text="@(title)">
                            <span style="@CellStyleInlineBlock">@(title)</span>
                        </Blazorise.Tooltip>
                    </a>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.id)" Caption="Song Title" Sortable="false">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    string title = Converters.GetSingleTitle(rq.Song.Titles).LatinTitle;
                    <Blazorise.Tooltip Text="@(title)">
                        <span style="@CellStyleInlineBlock ">@(title)</span>
                    </Blazorise.Tooltip>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.url)" Caption="Url">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    <a href="@rq.url" target="_blank">@rq.url</a>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.is_video)" Caption="Video?">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    <span>@(rq.is_video ? "Video" : "")</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.submitted_by)" Caption="Submitted By"/>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.submitted_on)" Caption="Submitted On">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    <span>@rq.submitted_on.ToString("s")</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.analysis)" Caption="Analysis"/>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.duration)" Caption="Duration">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    <span>@(rq.duration?.ToString("mm\\:ss"))</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.status)" Caption="Status">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    <span style="color: @UiHelpers.Bools2Color(@rq.status == ReviewQueueStatus.Approved, @rq.status == ReviewQueueStatus.Rejected, "green", "red")">
                        @rq.status
                    </span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellStyle="@(_ => { return CellStyle; })" Field="@nameof(RQ.reason)" Caption="Notes">
            <DisplayTemplate>
                @{
                    var rq = (context as RQ)!;
                    <Blazorise.Tooltip Text="@rq.reason">
                        <span style="@CellStyleInlineBlock">@(rq.reason)</span>
                    </Blazorise.Tooltip>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>
