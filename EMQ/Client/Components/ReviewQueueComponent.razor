@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Library.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Core
@using Blazorise
@using Blazorise.DataGrid
@using EMQ.Shared.Auth.Entities.Concrete
@inject HttpClient _client
@inject ILogger<GuessInputComponent> _logger
@inject IJSRuntime _jsRuntime
@using Microsoft.AspNetCore.Components.QuickGrid

<CascadingValue Value="@this" IsFixed="true">
    <ReviewComponent CurrentRQs="@(CurrentRQs)" ParentStateHasChangedCallback="@CallStateHasChanged"></ReviewComponent>

    <div class="page-size-chooser">
        Items per page:
        <select @bind="@_pagination.ItemsPerPage">
            <option>10</option>
            <option>25</option>
            <option>50</option>
            <option>100</option>
            <option>250</option>
        </select>
    </div>

    <div>
        <Paginator Value="@_pagination"/>
    </div>

    <div class="grid" tabindex="-1">
        <QuickGrid Items="@CurrentRQs" Pagination="_pagination">
            <TemplateColumn Title="ID" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.id))" IsDefaultSort="Microsoft.AspNetCore.Components.QuickGrid.SortDirection.Descending">
                @if (true)
                {
                    @if (ClientState.Session != null)
                    {
                        bool canDelete =
                            AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.ReviewSongLink) ||
                            string.Equals(context.submitted_by, ClientState.Session.Player.Username, StringComparison.InvariantCultureIgnoreCase);

                        @if (canDelete && context.status == ReviewQueueStatus.Pending)
                        {
                            <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteReviewQueueItem(context.id))">🗑</span>
                        }
                    }

                    <span>@context.id</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Source Title" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => Converters.GetSingleTitle(x.Song.Sources.First().Titles, "ja", "en").LatinTitle))">
                @if (true)
                {
                    @* todo link might be different from what's displayed *@
                    string title = Converters.GetSingleTitle(context.Song.Sources.First().Titles).LatinTitle;
                    <a href="@context.Song.Sources.First().Links.First(x => x.Type == SongSourceLinkType.VNDB).Url" target="_blank">
                        <span style="@CellStyleInlineBlock">@(title)</span>
                    </a>
                }
            </TemplateColumn>
            <TemplateColumn Title="Song Title" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => Converters.GetSingleTitle(x.Song.Titles, "ja", "en").LatinTitle))">
                @if (true)
                {
                    string title = Converters.GetSingleTitle(context.Song.Titles).LatinTitle;
                    <span style="@CellStyleInlineBlock ">@(title)</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Url" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.url))">
                @if (true)
                {
                    <a href="@context.url" target="_blank">@context.url</a>
                }
            </TemplateColumn>
            <TemplateColumn Title="Video?" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.is_video))">
                @if (true)
                {
                    <span>@(context.is_video ? "Video" : "")</span>
                }
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.submitted_by)" Title="Submitted By" Sortable="true"/>
            <PropertyColumn Property="@(x => x.submitted_on)" Title="Submitted On" Format="s" Sortable="true"/>
            <PropertyColumn Property="@(x => x.analysis)" Title="Analysis" Sortable="true"/>
            <PropertyColumn Property="@(x => x.duration)" Title="Duration" Format="mm\:ss" Sortable="true"/>
            <TemplateColumn Title="Status" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.status))">
                @if (true)
                {
                    <span style="color: @UiHelpers.Bools2Color(@context.status == ReviewQueueStatus.Approved, @context.status == ReviewQueueStatus.Rejected, "green", "red")">
                        @context.status
                    </span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Notes" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.reason))">
                @if (true)
                {
                    // todo get rid of the tooltip if we can because it slows things down by quite a lot
                    <Blazorise.Tooltip Text="@context.reason">
                        <span style="@CellStyleInlineBlockShort">@(context.reason)</span>
                    </Blazorise.Tooltip>
                }
            </TemplateColumn>
        </QuickGrid>
    </div>
</CascadingValue>
