@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Library.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Core
@using Blazorise
@using Blazorise.DataGrid
@using EMQ.Shared.Auth.Entities.Concrete
@inject HttpClient _client
@inject IJSRuntime _jsRuntime
@using Microsoft.AspNetCore.Components.QuickGrid
@using SortDirection = Microsoft.AspNetCore.Components.QuickGrid.SortDirection

<CascadingValue Value="@this" IsFixed="true">
    <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 240px;">
        <div id="StartDateFilter" style="max-width: 122px; display: inline-block; margin-right: 5px;">
            <Blazorise.DatePicker TValue="DateTime"
                                  @bind-Date="@StartDateFilter"/>
        </div>
        <label for="StartDateFilter">Start date</label>
        <br/>
        <br/>
        <div id="EndDateFilter" style="max-width: 122px; display: inline-block; margin-right: 5px;">
            <Blazorise.DatePicker TValue="DateTime"
                                  @bind-Date="@EndDateFilter"/>
        </div>
        <label for="EndDateFilter">End date</label>
        <br/>
        <br/>

        <select id="SSSTMFilter" style="margin: 5px" @bind="SSSTMFilter">
            @foreach (var key in Enum.GetValues<SongSourceSongTypeMode>())
            {
                <option value="@key">@key</option>
            }
        </select>
        <label for="SSSTMFilter">Type</label>
        <br/>

        <button type="button" class="btn btn-primary" @onclick="RefreshRQs">Search</button>
    </div>

    <ReviewComponent @ref="_reviewComponentRef" CurrentRQs="@(CurrentRQs)" ParentStateHasChangedCallback="@CallStateHasChanged" IsLibraryPage="true"></ReviewComponent>

    <div class="page-size-chooser">
        Items per page:
        <select @bind="@_pagination.ItemsPerPage">
            <option>10</option>
            <option>25</option>
            <option>50</option>
            <option>100</option>
            <option>250</option>
        </select>
    </div>

    <div>
        <Paginator State="@_pagination"/>
    </div>

    <div class="grid" tabindex="-1">
        <QuickGrid Items="@FilteredRQs" Pagination="_pagination">
            <TemplateColumn Title="ID" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.id))" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending">
                @if (true)
                {
                    @if (ClientState.Session != null)
                    {
                        bool canDelete =
                            AuthStuff.HasPermission(ClientState.Session, PermissionKind.ReviewSongLink) ||
                            string.Equals(context.submitted_by, ClientState.Session.Player.Username, StringComparison.InvariantCultureIgnoreCase);

                        @if (canDelete && context.status == ReviewQueueStatus.Pending)
                        {
                            <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteReviewQueueItem(context.id))">🗑</span>
                        }
                    }

                    <span style="cursor:pointer;" @onclick="@(() => Onclick_Id(context.id))">@context.id</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Source Title" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => Converters.GetSingleTitle(x.Song.Sources.First().Titles, "ja", "en").LatinTitle))">
                @if (true)
                {
                    @* todo link might be different from what's displayed *@
                    string title = Converters.GetSingleTitle(context.Song.Sources.First().Titles).LatinTitle;
                    string href = (context.Song.Sources.First().Links.FirstOrDefault(x => x.Type == SongSourceLinkType.VNDB) ?? context.Song.Sources.First().Links.First()).Url;
                    <a href="@href" target="_blank">
                        <span style="@CellStyleInlineBlock" title="@title">@(title)</span>
                    </a>
                }
            </TemplateColumn>
            <TemplateColumn Title="Song Title" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => Converters.GetSingleTitle(x.Song.Titles, "ja", "en").LatinTitle))">
                @if (true)
                {
                    string title = Converters.GetSingleTitle(context.Song.Titles).LatinTitle;
                    <span style="@CellStyleInlineBlock" title="@title">@(title)</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Url" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.url))">
                @if (true)
                {
                    <a href="@context.url" target="_blank">@context.url</a>
                }
            </TemplateColumn>
            <TemplateColumn Title="Video?" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.is_video))">
                @if (true)
                {
                    <span>@(context.is_video ? "Video" : "")</span>
                }
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.submitted_by)" Title="Submitted By" Sortable="true">
                <ColumnOptions>
                    <label>
                        <input id="submittedByFilter" type="text" @bind="@SubmittedByFilter" @bind:event="oninput"/>
                    </label>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(x => x.submitted_on)" Title="Submitted On" Format="s" Sortable="true"/>
            <PropertyColumn Property="@(x => x.analysis)" Title="Analysis" Sortable="true"/>
            <PropertyColumn Property="@(x => x.duration)" Title="Duration" Format="mm\:ss" Sortable="true"/>
            <TemplateColumn Title="Status" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.status))">
                <ColumnOptions>
                    <label style="width: 100px;">
                        @foreach (var key in StatusFilter.Keys.ToList())
                        {
                            <input type="checkbox" id="@key" class="form-check-input" @bind="@(StatusFilter[key])" style="margin: 5px"/>
                            <label for="@key">
                                <span style="float: left"> @key.GetDisplayName()</span>
                            </label>
                            <br/>
                        }
                    </label>
                </ColumnOptions>
                <ChildContent>
                    @if (true)
                    {
                        <span style="color: @UiHelpers.Bools2Color(@context.status == ReviewQueueStatus.Approved, @context.status == ReviewQueueStatus.Rejected, "green", "red")">
                            @context.status
                        </span>
                    }
                </ChildContent>
            </TemplateColumn>
            <TemplateColumn Title="Notes" Sortable="true" SortBy="@(GridSort<RQ>.ByAscending(x => x.reason))">
                @if (true)
                {
                    // todo get rid of the tooltip if we can because it slows things down by quite a lot
                    <Blazorise.Tooltip Text="@context.reason">
                        <span style="@CellStyleInlineBlockShort">@(context.reason)</span>
                    </Blazorise.Tooltip>
                }
            </TemplateColumn>
        </QuickGrid>
    </div>
</CascadingValue>
