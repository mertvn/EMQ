@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using System.Collections.Generic
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Auth.Entities.Concrete.Dto.Response
@using Microsoft.AspNetCore.Components
@inject ILogger<QuizSettingsComponent> _logger
@inject ClientUtils _clientUtils
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

<GenericModal @ref="@_loadPresetModalRef"
              Title="Load preset"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await ApplyUserQuizSettings(SelectedPresetName); })">
    <input type="text" @bind="LoadFromCodeB64" @bind:event="oninput"/>
    <button type="button" class="btn btn-primary" @onclick="@(async () => { await ApplyUserQuizSettingsFromB64(LoadFromCodeB64); })">
        Load from code
    </button>
    <br/>
    <br/>

    @if (Presets.Any())
    {
        <select @bind="SelectedPresetName" @bind:event="oninput" style="margin: 5px">
            @foreach (var preset in Presets)
            {
                <option value="@preset.Name">@preset.Name</option>
            }
        </select>
        <br/>

        <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_SharePreset(SelectedPresetName); })">
            @SharePresetButtonText
        </button>

        <button type="button" class="btn btn-primary" @onclick="@(async () => { await Onclick_DeletePreset(SelectedPresetName); })">
            Delete preset
        </button>
    }
    else
    {
        <span>You don't have any saved presets.</span>
    }

</GenericModal>

<GenericModal @ref="@_savePresetModalRef"
              Title="Save preset"
              Size="@Blazorise.ModalSize.Default"
              OkAction="@(async () => { await SendStoreUserQuizSettingsReq(NewPresetName); })">
    Enter a name for your new preset in order to save it.
    Preset names must be between 1 and 64 characters long.
    If you have a preset with the same name, it will be overwritten.
    <input type="text" @bind="NewPresetName"/>
</GenericModal>

@* setting z-index seems to prevent the modal closing animation from playing sometimes, but we have to do it *@
<Blazorise.Modal @ref="_modalRef" style="z-index: 4000">
<Blazorise.ModalContent Centered Size="Blazorise.ModalSize.ExtraLarge">
<Blazorise.ModalHeader>
    <Blazorise.ModalTitle>Room Settings</Blazorise.ModalTitle>
</Blazorise.ModalHeader>
<Blazorise.ModalBody>
@if (ClientState.Session != null)
{
    <div id="collapseQuizSettings" style="pointer-events: @UiHelpers.Bool2PointerEvents(!IsReadOnly); cursor: @UiHelpers.Bool2CursorNotAllowed(IsReadOnly);">
    <EditForm EditContext="EditContext" OnValidSubmit="@(() => SendChangeRoomSettingsReq(ClientQuizSettings))">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <Blazorise.Tabs SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged" RenderMode="Blazorise.TabsRenderMode.LazyReload">
            <Items>
                <Blazorise.Tab style="pointer-events: all; cursor: pointer" Name="TabGeneral">General</Blazorise.Tab>
                <Blazorise.Tab style="pointer-events: all; cursor: pointer" Name="TabFilters">Filters</Blazorise.Tab>
                <Blazorise.Tab style="pointer-events: all; cursor: pointer" Name="TabTags">Tags</Blazorise.Tab>
                <Blazorise.Tab style="pointer-events: all; cursor: pointer" Name="TabArtists">Artists</Blazorise.Tab>
                <Blazorise.Tab style="pointer-events: all; cursor: pointer" Name="TabVndbAdvsearch">VNDB search</Blazorise.Tab>
            </Items>
            <Content>
                <Blazorise.TabPanel Name="TabGeneral">
                    <div>
                        @* todo allow changing room name *@
                        <InputCheckbox id="IsHotjoinEnabled" class="form-check-input" @bind-Value="ClientQuizSettings.IsHotjoinEnabled" style="margin: 5px"></InputCheckbox>
                        <label for="IsHotjoinEnabled">Enable hotjoin</label>
                        <br/>

                        <InputSelect id="SongSelectionKind" @bind-Value="ClientQuizSettings.SongSelectionKind" style="margin: 5px">
                            @foreach (SongSelectionKind songSelectionKind in Enum.GetValues<SongSelectionKind>())
                            {
                                @if (songSelectionKind == SongSelectionKind.LocalMusicLibrary)
                                {
// yeah this is pretty stupid
#if !DEBUG
                                    continue;
#endif
                                }
                                <option value="@songSelectionKind">@songSelectionKind</option>
                            }
                        </InputSelect>
                        <label for="SongSelectionKind">Song selection method</label>
                        <br/>

                        <InputSelect id="AnsweringKind" @bind-Value="ClientQuizSettings.AnsweringKind" style="margin: 5px">
                            @foreach (AnsweringKind answeringKind in Enum.GetValues<AnsweringKind>())
                            {
                                <option value="@answeringKind">
                                    @if (!string.IsNullOrEmpty(answeringKind.GetDescription()))
                                    {
                                        @answeringKind.GetDescription()
                                    }
                                    else
                                    {
                                        @answeringKind
                                    }
                                </option>
                            }
                        </InputSelect>
                        <label for="AnsweringKind">Answering method</label>
                        <br/>

                        <InputSelect id="ScreenshotKind" @bind-Value="ClientQuizSettings.Filters.ScreenshotKind" style="margin: 5px">
                            @foreach (ScreenshotKind screenshotKind in Enum.GetValues<ScreenshotKind>())
                            {
                                <option value="@screenshotKind">
                                    @if (!string.IsNullOrEmpty(screenshotKind.GetDescription()))
                                    {
                                        @screenshotKind.GetDescription()
                                    }
                                    else
                                    {
                                        @screenshotKind
                                    }
                                </option>
                            }
                        </InputSelect>
                        <label for="ScreenshotKind">Random screenshots</label>
                        <br/>

                        <InputSelect id="GamemodeKind" @bind-Value="ClientQuizSettings.GamemodeKind" style="margin: 5px">
                            @foreach (GamemodeKind gamemodeKind in Enum.GetValues<GamemodeKind>())
                            {
                                <option value="@gamemodeKind">
                                    @if (!string.IsNullOrEmpty(gamemodeKind.GetDescription()))
                                    {
                                        @gamemodeKind.GetDescription()
                                    }
                                    else
                                    {
                                        @gamemodeKind
                                    }
                                </option>
                            }
                        </InputSelect>
                        <label for="GamemodeKind">Game mode</label>
                        <br/>

                        @if (ClientQuizSettings.GamemodeKind == GamemodeKind.NGMC)
                        {
                            <InputCheckbox id="NGMCAllowBurning" class="form-check-input" @bind-Value="ClientQuizSettings.NGMCAllowBurning" style="margin: 5px"></InputCheckbox>
                            <label for="NGMCAllowBurning">NGMC burning</label>
                            <br/>
                        }

                        <InputNumber id="TeamSize" @bind-Value="ClientQuizSettings.TeamSize" style="margin: 5px"></InputNumber>
                        <label for="TeamSize">Maximum team size</label>
                        <br/>

                        <InputNumber id="MaxLives" @bind-Value="ClientQuizSettings.MaxLives" style="margin: 5px"></InputNumber>
                        <label for="MaxLives">Lives (0 for unlimited)</label>
                        <br/>

                        <InputNumber id="GuessMs" @bind-Value="ClientQuizSettings.UI_GuessMs" style="margin: 5px"></InputNumber>
                        <label for="GuessMs">Guess time (seconds)</label>
                        <br/>

                        <InputNumber id="ResultsMs" @bind-Value="ClientQuizSettings.UI_ResultsMs" style="margin: 5px"></InputNumber>
                        <label for="ResultsMs">Results time (seconds)</label>
                        <br/>

                        @if (ClientQuizSettings.SongSelectionKind == SongSelectionKind.Looting)
                        {
                            <InputNumber id="LootingMs" @bind-Value="ClientQuizSettings.UI_LootingMs" style="margin: 5px"></InputNumber>
                            <label for="LootingMs">Looting time (seconds)</label>
                            <br/>

                            <InputNumber id="InventorySize" @bind-Value="ClientQuizSettings.InventorySize" style="margin: 5px"></InputNumber>
                            <label for="InventorySize">Looting inventory size</label>
                            <br/>

                            <InputCheckbox id="AllowViewingInventoryDuringQuiz" class="form-check-input" @bind-Value="ClientQuizSettings.AllowViewingInventoryDuringQuiz" style="margin: 5px"></InputCheckbox>
                            <label for="AllowViewingInventoryDuringQuiz">Allow viewing inventory during quiz</label>
                            <br/>
                        }

                        <InputNumber id="TimeoutMs" @bind-Value="ClientQuizSettings.UI_TimeoutMs" style="margin: 5px"></InputNumber>
                        <label for="TimeoutMs">Timeout time (seconds)</label>
                        <br/>

                        <InputNumber id="WaitPercentage" @bind-Value="ClientQuizSettings.WaitPercentage" style="margin: 5px"></InputNumber>
                        <label for="WaitPercentage">The percentage of players that need to have finished buffering in order to start the next song</label>
                        <br/>

                    </div>
                </Blazorise.TabPanel>
                <Blazorise.TabPanel Name="TabFilters">
                    @* https://stackoverflow.com/a/63384981 *@
                    <div style="display: flex; flex-direction: row; flex-wrap: wrap;">
                        <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 220px;">
                            <h5>Filters</h5>
                            <InputCheckbox id="OnlyFromLists" class="form-check-input" @bind-Value="ClientQuizSettings.OnlyFromLists" style="margin: 5px"></InputCheckbox>
                            <label for="OnlyFromLists">Only from VNDB lists</label>
                            <br/>

                            <InputSelect id="ListDistributionKind" @bind-Value="ClientQuizSettings.ListDistributionKind" style="margin: 5px" disabled="@(!ClientQuizSettings.OnlyFromLists)">
                                @foreach (ListDistributionKind listDistributionKind in Enum.GetValues<ListDistributionKind>())
                                {
                                    <option value="@listDistributionKind">
                                        @if (!string.IsNullOrEmpty(listDistributionKind.GetDescription()))
                                        {
                                            @listDistributionKind.GetDescription()
                                        }
                                        else
                                        {
                                            @listDistributionKind
                                        }
                                    </option>
                                }
                            </InputSelect>
                            <br/>

                            <InputCheckbox id="Duplicates" class="form-check-input" @bind-Value="ClientQuizSettings.Duplicates" style="margin: 5px"></InputCheckbox>
                            <Blazorise.Tooltip Text="Allow multiple songs from one VN" Inline="true">
                                <label for="Duplicates">Duplicate VNs</label>
                            </Blazorise.Tooltip>
                            <br/>

                            <InputCheckbox id="OnlyOwnUploads" class="form-check-input" @bind-Value="ClientQuizSettings.Filters.OnlyOwnUploads" style="margin: 5px"></InputCheckbox>
                            <label for="OnlyOwnUploads">Only own uploads</label>
                            <br/>
                        </div>

                        <div style="border: 1px black solid; margin: 10px; padding: 5px; width: 250px;">
                            <h5>Song types</h5>

                            @foreach (var key in ClientQuizSettings.Filters.SongSourceSongTypeFilters.Keys.ToList())
                            {
                                if (true)
                                {
                                    string id = $"SongSourceSongTypeFilters-{key}";
                                    <div style="max-width: 400px; display: flex; align-items: center; align-content: center;">
                                        <SongTypeSliderComponent style="max-width: 100px;" id="@id"
                                                                 @bind-Value="@(ClientQuizSettings.Filters.SongSourceSongTypeFilters[key].Value)"
                                                                 Model="ClientQuizSettings">
                                        </SongTypeSliderComponent>

                                        <div style="display: inline-block">
                                            <InputNumber @bind-Value="@(ClientQuizSettings.Filters.SongSourceSongTypeFilters[key].Value)" @bind-Value:after="@RecalculateNumSongsAndSongTypeFilters" style="width: 55px; margin: 5px;"></InputNumber>
                                        </div>
                                        <label for="@id" style="margin-left: 5px;">@key.ToString()</label>

                                        <br/>
                                    </div>
                                }
                            }

                            <details>
                                <summary>Configure random</summary>
                                @foreach (var key in ClientQuizSettings.Filters.SongSourceSongTypeRandomEnabledSongTypes.Keys.ToList())
                                {
                                    if (true)
                                    {
                                        string id = $"SongSourceSongTypeRandomEnabledSongTypes-{key}";
                                        <input type="checkbox" id="@id" class="form-check-input" @bind="@(ClientQuizSettings.Filters.SongSourceSongTypeRandomEnabledSongTypes[key])" style="margin: 5px"/>
                                        <label for="@id">@key.ToString()</label>
                                        <br/>
                                    }
                                }
                            </details>

                            <InputNumber id="NumSongs" @bind-Value="ClientQuizSettings.NumSongs" @bind-Value:after="@RecalculateNumSongsAndSongTypeFilters" style="margin: 5px"></InputNumber>
                            <label for="NumSongs">Maximum number of songs</label>
                            <br/>

                            @* <h5>Random weights</h5> *@
                            @* @foreach (var key in ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights.Keys.ToList()) *@
                            @* { *@
                            @*     <div style="max-width: 400px; display: flex; align-items: center; align-content: center;"> *@
                            @*         <Blazorise.Slider style="max-width: 100px;" id="@key" @bind-Value="@(ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights[key].Value)" Min="0" Max="100"/> *@
                            @*         <div style="display: inline-block"> *@
                            @*             <InputNumber @bind-Value="@(ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights[key].Value)" style="width: 55px; margin: 5px;"></InputNumber> *@
                            @*         </div> *@
                            @*         <label for="@key" style="margin-left: 5px;">@key.ToString()</label> *@
                            @* *@
                            @*         <br/> *@
                            @*     </div> *@
                            @* } *@
                            @* *@
                            @* @if (true) *@
                            @* { *@
                            @*     float sum = ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights.Sum(x => x.Value.Value); *@
                            @* *@
                            @*     float availableSongsCount = 26857; *@
                            @* *@
                            @*     float availableOpCount = 3107; *@
                            @*     float opWeight = ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights[SongSourceSongType.OP].Value; *@
                            @* *@
                            @*     float availableEdCount = 2130; *@
                            @*     float edWeight = ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights[SongSourceSongType.ED].Value; *@
                            @* *@
                            @*     float availableInsCount = 741; *@
                            @*     float insWeight = ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights[SongSourceSongType.Insert].Value; *@
                            @* *@
                            @*     float availableBgmCount = 20928; *@
                            @*     float bgmWeight = ClientQuizSettings.Filters.SongSourceSongTypeRandomWeights[SongSourceSongType.BGM].Value; *@
                            @* *@
                            @*     <span>Estimated random song counts: </span> *@
                            @*     <ul> *@
                            @*         <li>OP: @(((ClientQuizSettings.NumSongs) / ((sum / opWeight))))</li> *@
                            @*         <li>ED: @(((ClientQuizSettings.NumSongs) / ((sum / edWeight))))</li> *@
                            @*         <li>Insert: @(((ClientQuizSettings.NumSongs) / ((sum / insWeight))))</li> *@
                            @*         <li>BGM: @(((ClientQuizSettings.NumSongs) / ((sum / bgmWeight))))</li> *@
                            @*     </ul> *@
                            @* } *@
                        </div>

                        <div style="border: 1px black solid; margin: 10px; padding: 5px; width: 225px;">
                            <h5>Song difficulty</h5>

                            @foreach (var key in ClientQuizSettings.Filters.SongDifficultyLevelFilters.Keys.ToList())
                            {
                                <input type="checkbox" id="@key" class="form-check-input" @bind="@(ClientQuizSettings.Filters.SongDifficultyLevelFilters[key])" style="margin: 5px"/>
                                <label for="@key">
                                    <span style="float: left"> @key.GetDisplayName()</span>
                                </label>
                                @if (key == SongDifficultyLevel.Impossible)
                                {
                                    <span style="float: right">0%</span>
                                }
                                else
                                {
                                    <span style="float: right"> @((int)key.GetRange()!.Minimum)% - @((int)key.GetRange()!.Maximum)%</span>
                                }

                                <br/>
                            }
                        </div>

                        <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 240px;">
                            <h5>VN original language</h5>

                            @foreach (var key in ClientQuizSettings.Filters.VNOLangs.Keys.ToList())
                            {
                                @if (key != Language.allLanguages && ClientQuizSettings.Filters.VNOLangs[Language.allLanguages])
                                {
                                    continue;
                                }

                                <input type="checkbox" id="@key" class="form-check-input" @bind="@(ClientQuizSettings.Filters.VNOLangs[key])" style="margin: 5px"/>
                                <label for="@key">@key.GetDisplayName()</label>
                                <br/>
                            }
                        </div>

                        <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 240px;">
                            <h5>VN release date range</h5>

                            <div id="StartDateFilter" style="max-width: 112px; display: inline-block; margin-right: 5px;">
                                <Blazorise.DatePicker TValue="DateTime"
                                                      @bind-Date="@ClientQuizSettings.Filters.StartDateFilter"
                                                      Min="@DateTimeOffset.Parse(Constants.QFDateMin)"
                                                      Max="@DateTimeOffset.Parse(Constants.QFDateMax)"/>
                            </div>
                            <label for="StartDateFilter">Start date</label>
                            <br/>
                            <br/>
                            <div id="EndDateFilter" style="max-width: 112px; display: inline-block; margin-right: 5px;">
                                <Blazorise.DatePicker TValue="DateTime"
                                                      @bind-Date="@ClientQuizSettings.Filters.EndDateFilter"
                                                      Min="@DateTimeOffset.Parse(Constants.QFDateMin)"
                                                      Max="@DateTimeOffset.Parse(Constants.QFDateMax)"/>
                            </div>
                            <label for="EndDateFilter">End date</label>
                            <br/>
                        </div>

                        @* todo add text inputs for ranges *@
                        <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 220px;">
                            <h5>VN rating (average)</h5>
                            <div style="display: flex; align-items: center; justify-items: center; flex-direction:column;">
                                <RangeControl @bind-ValueLow="@ClientQuizSettings.Filters.RatingAverageStart"
                                              @bind-ValueHigh="@ClientQuizSettings.Filters.RatingAverageEnd"
                                              MinValue="@Constants.QFRatingAverageMin" MaxValue="@Constants.QFRatingAverageMax">
                                </RangeControl>
                                <p style="text-align: center;">@((ClientQuizSettings.Filters.RatingAverageStart / 100f).ToString("N2"))-@((ClientQuizSettings.Filters.RatingAverageEnd / 100f).ToString("N2"))</p>
                            </div>
                        </div>

                        <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 220px;">
                            <h5>VN rating (bayesian)</h5>
                            <div style="display: flex; align-items: center; justify-items: center; flex-direction:column;">
                                <RangeControl @bind-ValueLow="@ClientQuizSettings.Filters.RatingBayesianStart"
                                              @bind-ValueHigh="@ClientQuizSettings.Filters.RatingBayesianEnd"
                                              MinValue="@Constants.QFRatingBayesianMin" MaxValue="@Constants.QFRatingBayesianMax">
                                </RangeControl>
                                <p style="text-align: center;">@((ClientQuizSettings.Filters.RatingBayesianStart / 100f).ToString("N2"))-@((ClientQuizSettings.Filters.RatingBayesianEnd / 100f).ToString("N2"))</p>
                            </div>
                        </div>

                        @* <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 220px;"> *@
                        @*     <h5>VN popularity</h5> *@
                        @*     <div style="display: flex; align-items: center; justify-items: center; flex-direction:column;"> *@
                        @*         <RangeControl @bind-ValueLow="@ClientQuizSettings.Filters.PopularityStart" *@
                        @*                       @bind-ValueHigh="@ClientQuizSettings.Filters.PopularityEnd" *@
                        @*                       MinValue="@Constants.QFPopularityMin" MaxValue="@Constants.QFPopularityMax"> *@
                        @*         </RangeControl> *@
                        @*         <p style="text-align: center;">@((ClientQuizSettings.Filters.PopularityStart / 100f).ToString("N2"))-@((ClientQuizSettings.Filters.PopularityEnd / 100f).ToString("N2"))</p> *@
                        @*     </div> *@
                        @* </div> *@

                        <div style="border: 1px black solid; margin: 10px; padding: 10px; width: 220px;">
                            <h5>VN vote count</h5>
                            <div style="display: flex; align-items: center; justify-items: center; flex-direction:column;">
                                <RangeControl @bind-ValueLow="@ClientQuizSettings.Filters.VoteCountStart"
                                              @bind-ValueHigh="@ClientQuizSettings.Filters.VoteCountEnd"
                                              MinValue="@Constants.QFVoteCountMin" MaxValue="@Constants.QFVoteCountMax">
                                </RangeControl>
                                <div style="display: inline-block">
                                    <InputNumber @bind-Value="ClientQuizSettings.Filters.VoteCountStart" style="width: 75px;"></InputNumber> - <InputNumber @bind-Value="ClientQuizSettings.Filters.VoteCountEnd" style="width: 75px;"></InputNumber>
                                </div>
                                @* <p style="text-align: center;">@(ClientQuizSettings.Filters.VoteCountStart)-@(ClientQuizSettings.Filters.VoteCountEnd)</p> *@
                            </div>
                        </div>
                    </div>
                </Blazorise.TabPanel>
                <Blazorise.TabPanel Name="TabTags">
                    <div id="tagEdit" style="margin: 5px; padding: 5px;">
                        <AutocompleteCComponent @ref="AutocompleteCComponent"
                                                Placeholder="Enter tag name here"
                                                FreeTyping="true"
                                                IsDisabled="false"
                                                IsQuizPage="false"
                                                @bind-Guess="@SelectedTag"
                                                Callback="SelectedResultChangedC">
                        </AutocompleteCComponent>

                        <table class="table" style="width: 65%; text-align: center">
                            <tr>
                                <th></th>
                                <th>Selection</th>
                                <th>Rating</th>
                                <th>VNDB Id</th>
                                <th>Tag Name</th>
                                <th>Spoiler level</th>
                            </tr>
                            @foreach (var cf in ClientQuizSettings.Filters.CategoryFilters)
                            {
                                <tr class="tag" @key="@cf" style="text-align: center">
                                    <th>
                                        <button type="button" @onclick="@(() => RemoveTag(cf.SongSourceCategory.Id))">X</button>
                                    </th>

                                    <th>
                                        <InputSelect @bind-Value="@cf.Trilean" style="margin: 5px">
                                            @foreach (var labelKind in Enum.GetValues<LabelKind>())
                                            {
                                                <option value="@labelKind">@labelKind</option>
                                            }
                                        </InputSelect>
                                    </th>

                                    <th>
                                        <InputNumber @bind-Value="@cf.SongSourceCategory.Rating" style="margin: 5px; width: 70px"></InputNumber>
                                    </th>

                                    <th style="pointer-events: all">
                                        <a href="@cf.SongSourceCategory.VndbId.ToVndbUrl()" target="_blank">
                                            <span>@cf.SongSourceCategory.VndbId</span>
                                        </a>
                                    </th>

                                    <th>
                                        <span>@cf.SongSourceCategory.Name</span>
                                    </th>

                                    <th>
                                        <InputSelect @bind-Value="@cf.SongSourceCategory.SpoilerLevel" style="margin: 5px">
                                            @foreach (var spoilerLevel in Enum.GetValues<SpoilerLevel>())
                                            {
                                                <option value="@spoilerLevel">@spoilerLevel</option>
                                            }
                                        </InputSelect>
                                    </th>
                                </tr>
                            }
                        </table>
                        <div style="margin: 5px;">
                            <button type="button" class="btn btn-primary" @onclick="RandomizeTags" disabled="@(IsReadOnly)">Randomize tags</button>
                            <button type="button" class="btn btn-primary" @onclick="ClearTags" disabled="@(IsReadOnly)">Clear tags</button>
                        </div>
                    </div>
                </Blazorise.TabPanel>
                <Blazorise.TabPanel Name="TabArtists">
                    <div id="artistEdit" style="margin: 5px; padding: 5px;">
                        <AutocompleteAComponent @ref="AutocompleteAComponent"
                                                Placeholder="Enter artist name here"
                                                FreeTyping="true"
                                                IsDisabled="false"
                                                IsQuizPage="false"
                                                @bind-Guess="@SelectedArtist"
                                                Callback="SelectedResultChangedA">
                        </AutocompleteAComponent>

                        <table class="table" style="width: 65%; text-align: center">
                            <tr>
                                <th></th>
                                <th>Selection</th>
                                <th>VNDB Id</th>
                                <th>Artist Name</th>
                            </tr>
                            @foreach (var af in ClientQuizSettings.Filters.ArtistFilters)
                            {
                                <tr class="tag" @key="@af" style="text-align: center">
                                    <th>
                                        <button type="button" @onclick="@(() => RemoveArtist(af.Artist.AId))">X</button>
                                    </th>

                                    <th>
                                        <InputSelect @bind-Value="@af.Trilean" style="margin: 5px">
                                            @foreach (var labelKind in Enum.GetValues<LabelKind>())
                                            {
                                                <option value="@labelKind">@labelKind</option>
                                            }
                                        </InputSelect>
                                    </th>

                                    <th style="pointer-events: all">
                                        <a href="@af.Artist.VndbId.ToVndbUrl()" target="_blank">
                                            <span>@af.Artist.VndbId</span>
                                        </a>
                                    </th>

                                    <th>
                                        <span>@($"{af.Artist.AALatinAlias}" + (!string.IsNullOrWhiteSpace(af.Artist.AANonLatinAlias) ? $" ({af.Artist.AANonLatinAlias})" : ""))</span>
                                    </th>
                                </tr>
                            }
                        </table>
                        <div style="margin: 5px;">
                            <button type="button" class="btn btn-primary" @onclick="RandomizeArtists" disabled="@(IsReadOnly)">Randomize artists</button>
                            <button type="button" class="btn btn-primary" @onclick="ClearArtists" disabled="@(IsReadOnly)">Clear artists</button>
                        </div>
                    </div>
                </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabVndbAdvsearch">
                <p>Enter either full VNDB search URL or just the f parameter. Only VN search is supported at the moment.</p>
                <p>Example: "https://vndb.org/v?q=&ch=&f=023gjaN3830X1o&s=j4w" or "023gjaN3830X1o" </p>
                <p>Important: Add a Staff->Role=Vocals filter on VNDB to search faster and less wastefully. Example: "https://vndb.org/v?q=&ch=&f=0280HN385wsongs-".</p>
                <br/>

                <p>Your API token cannot be used for this, so any query with private labels will return no results.</p>
                <p>Using this filter will also override VNDB label settings for all players.</p>
                <p>DO NOT USE THIS FILTER WITH A QUERY THAT RETURNS MORE THAN 5000 RESULTS AS YOU WILL JUST GET THROTTLED BY THE VNDB API UNTIL THE END OF TIME.</p>
                <div>
                    <InputText
                        @bind-Value="@ClientQuizSettings.Filters.VndbAdvsearchFilter"
                        type="text"
                        name="VndbAdvsearchFilter"
                        style="margin: 5px; width: 700px;"/>
                    <br/>
                </div>
            </Blazorise.TabPanel>
            </Content>
        </Blazorise.Tabs>
    </EditForm>
    </div>
}
</Blazorise.ModalBody>
<Blazorise.ModalFooter>
    <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
        Close
    </button>
    @if (!IsReadOnly)
    {
        <button type="button" style="margin: 5px" class="btn btn-primary"
                @onclick="@(() => { _loadPresetModalRef.Show(); })">
            Load preset
        </button>

        @if (ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.StoreQuizSettings))
        {
            <button type="button" style="margin: 5px" class="btn btn-primary"
                    @onclick="@(() => { _savePresetModalRef.Show(); })">
                Save preset
            </button>
        }

        <button type="button" style="margin: 5px" class="btn btn-warning"
                @onclick="ResetQuizSettings">
            Reset to default
        </button>

        <button type="button" class="btn btn-primary"
                @onclick="@(async () => { if (ClientState.Session != null) { await SendChangeRoomSettingsReq(ClientQuizSettings); } })">
            Save settings
        </button>
    }
</Blazorise.ModalFooter>
</Blazorise.ModalContent>
</Blazorise.Modal>
