@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@inject ILogger<QuizSettingsComponent> _logger
@inject ClientUtils _clientUtils
@inject HttpClient _client

<Blazorise.Modal @ref="_modalRef">
    <Blazorise.ModalContent Centered Size="Blazorise.ModalSize.ExtraLarge">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Room Settings</Blazorise.ModalTitle>
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            @if (ClientState.Session != null)
            {
                <div id="collapseQuizSettings">
                    <EditForm Model="@ClientQuizSettings" OnValidSubmit="@(() => SendChangeRoomSettingsReq(ClientQuizSettings))">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <Blazorise.Tabs SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                            <Items>
                                <Blazorise.Tab Name="TabGeneral">General</Blazorise.Tab>
                                <Blazorise.Tab Name="TabTags">Tags</Blazorise.Tab>
                            </Items>
                            <Content>
                                <Blazorise.TabPanel Name="TabGeneral">
                                    <div style="pointer-events: @UiHelpers.Bool2PointerEvents(!IsReadOnly)">
                                        <InputCheckbox id="OnlyFromLists" @bind-Value="ClientQuizSettings.OnlyFromLists" style="margin: 5px"></InputCheckbox>
                                        <label for="OnlyFromLists">Only from VNDB lists?</label>
                                        <br/>

                                        <InputCheckbox id="Duplicates" @bind-Value="ClientQuizSettings.Duplicates" style="margin: 5px"></InputCheckbox>
                                        <label for="Duplicates">Duplicates?</label>
                                        <br/>

                                        <InputCheckbox id="IsHotjoinEnabled" @bind-Value="ClientQuizSettings.IsHotjoinEnabled" style="margin: 5px"></InputCheckbox>
                                        <label for="IsHotjoinEnabled">Enable hotjoin?</label>
                                        <br/>

                                        <InputSelect id="SongSelectionKind" @bind-Value="ClientQuizSettings.SongSelectionKind" style="margin: 5px">
                                            @foreach (SongSelectionKind songSelectionKind in Enum.GetValues<SongSelectionKind>())
                                            {
                                                <option value="@songSelectionKind">@songSelectionKind</option>
                                            }
                                        </InputSelect>
                                        <label for="SongSelectionKind">Song selection method</label>
                                        <br/>

                                        <InputNumber id="NumSongs" @bind-Value="ClientQuizSettings.NumSongs" style="margin: 5px"></InputNumber>
                                        <label for="NumSongs">Maximum number of songs</label>
                                        <br/>

                                        <InputNumber id="TeamSize" @bind-Value="ClientQuizSettings.TeamSize" style="margin: 5px"></InputNumber>
                                        <label for="TeamSize">Team size (only 1 and Max are supported currently)</label>
                                        <br/>

                                        <InputNumber id="MaxLives" @bind-Value="ClientQuizSettings.MaxLives" style="margin: 5px"></InputNumber>
                                        <label for="MaxLives">Lives (0 for unlimited)</label>
                                        <br/>

                                        <InputNumber id="GuessMs" @bind-Value="ClientQuizSettings.UI_GuessMs" style="margin: 5px"></InputNumber>
                                        <label for="GuessMs">Guess time</label>
                                        <br/>

                                        <InputNumber id="ResultsMs" @bind-Value="ClientQuizSettings.UI_ResultsMs" style="margin: 5px"></InputNumber>
                                        <label for="ResultsMs">Results time</label>
                                        <br/>

                                        @if (ClientQuizSettings.SongSelectionKind == SongSelectionKind.Looting)
                                        {
                                            <InputNumber id="LootingMs" @bind-Value="ClientQuizSettings.UI_LootingMs" style="margin: 5px"></InputNumber>
                                            <label for="LootingMs">Looting time</label>
                                            <br/>

                                            <InputNumber id="InventorySize" @bind-Value="ClientQuizSettings.InventorySize" style="margin: 5px"></InputNumber>
                                            <label for="InventorySize">Looting inventory size</label>
                                            <br/>
                                        }

                                        <InputNumber id="WaitPercentage" @bind-Value="ClientQuizSettings.WaitPercentage" style="margin: 5px"></InputNumber>
                                        <label for="WaitPercentage">The percentage of players that need to have finished buffering in order to start the next song</label>
                                        <br/>
                                    </div>
                                </Blazorise.TabPanel>
                                <Blazorise.TabPanel Name="TabTags">
                                    <div id="tagEdit" style="margin: 5px; padding: 5px; pointer-events: @UiHelpers.Bool2PointerEvents(!IsReadOnly)">
                                        <AutocompleteCComponent @ref="AutocompleteCComponent"
                                                                Placeholder="Enter tag name here"
                                                                FreeTyping="true"
                                                                IsDisabled="false"
                                                                IsQuizPage="false"
                                                                @bind-Guess="@SelectedTag"
                                                                Callback="SelectedResultChangedC">
                                        </AutocompleteCComponent>

                                        <table class="table" style="width: 65%; text-align: center">
                                            <tr>
                                                <th></th>
                                                <th>Selection</th>
                                                <th>Rating</th>
                                                <th>VNDB Id</th>
                                                <th>Tag Name</th>
                                                <th>Spoiler level</th>
                                            </tr>
                                            @foreach (var tag in ClientQuizSettings.Filters.CategoryFilters)
                                            {
                                                <tr class="tag" @key="@tag" style="text-align: center">
                                                    <th>
                                                        <button type="button" @onclick="@(() => RemoveTag(tag.SongSourceCategory.Id))">X</button>
                                                    </th>

                                                    <th>
                                                        <InputSelect @bind-Value="@tag.Trilean" style="margin: 5px">
                                                            @foreach (var labelKind in Enum.GetValues<LabelKind>())
                                                            {
                                                                <option value="@labelKind">@labelKind</option>
                                                            }
                                                        </InputSelect>
                                                    </th>

                                                    <th>
                                                        <InputNumber @bind-Value="@tag.SongSourceCategory.Rating" style="margin: 5px; width: 70px"></InputNumber>
                                                    </th>

                                                    <th style="pointer-events: all">
                                                        <a href="@tag.SongSourceCategory.VndbId.ToVndbUrl()" target="_blank">
                                                            <span>@tag.SongSourceCategory.VndbId</span>
                                                        </a>
                                                    </th>

                                                    <th>
                                                        <span>@tag.SongSourceCategory.Name</span>
                                                    </th>

                                                    <th>
                                                        <InputSelect @bind-Value="@tag.SongSourceCategory.SpoilerLevel" style="margin: 5px">
                                                            @foreach (var spoilerLevel in Enum.GetValues<SpoilerLevel>())
                                                            {
                                                                <option value="@spoilerLevel">@spoilerLevel</option>
                                                            }
                                                        </InputSelect>
                                                    </th>
                                                </tr>
                                            }
                                        </table>
                                        <div style="margin: 5px;">
                                            <button type="button" class="btn btn-primary" @onclick="RandomizeTags" disabled="@(IsReadOnly)">Randomize tags</button>
                                            <button type="button" class="btn btn-primary" @onclick="ClearTags" disabled="@(IsReadOnly)">Clear tags</button>
                                        </div>
                                    </div>
                                </Blazorise.TabPanel>
                            </Content>
                        </Blazorise.Tabs>
                    </EditForm>
                </div>
            }
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
                Close
            </button>
            @if (!IsReadOnly)
            {
                <button type="button" style="margin: 5px" class="btn btn-warning"
                        @onclick="ResetQuizSettings">
                    Reset to default
                </button>

                <button type="button" class="btn btn-primary"
                        @onclick="@(async () => { if (ClientState.Session != null) { await SendChangeRoomSettingsReq(ClientQuizSettings); } })">
                    Save settings
                </button>
            }
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>
