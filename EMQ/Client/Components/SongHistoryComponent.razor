@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core.UI

<Blazorise.Modal @ref="_modalRef" style="z-index: 4000">
    <Blazorise.ModalContent Centered Size="Blazorise.ModalSize.ExtraLarge">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Song History</Blazorise.ModalTitle>
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <table id="songHistoryTable" style="width: 100%;">
                <tr class="songHistoryHeaders">
                    <th class="songHistoryHeader">#</th>
                    <th class="songHistoryHeader">Sources</th>
                    <th class="songHistoryHeader">Types</th>
                    <th class="songHistoryHeader">Title</th>
                    <th class="songHistoryHeader">Artists</th>
                </tr>
                @if (SongsHistory != null)
                {
                    @for (int index = 0; index < SongsHistory.Count; index++)
                    {
                        var songHistory = SongsHistory[index];
                        var song = songHistory.Song;

                        string rowBackgroundColor = "initial";
                        if (songHistory.PlayerGuessInfos.TryGetValue(ClientState.Session?.Player.Id ?? 0, out var ownPlayerGuessInfo))
                        {
                            rowBackgroundColor = UiHelpers.Bool2Color(ownPlayerGuessInfo.IsGuessCorrect, "seagreen", "firebrick");
                        }

                        <tr class="songHistoryRow" style="border-bottom: 1px solid gray; background-color: @rowBackgroundColor">
                            <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@(index + 1)</td>
                            <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @if (song.Sources.Count == 1)
                                {
                                    <span>@Converters.GetSingleTitle(song.Sources.First().Titles).LatinTitle</span>
                                }
                                else
                                {
                                    var otherSources = song.Sources.Where(x => x.Id != song.Sources.First().Id);
                                    string joined = string.Join("", otherSources.Select(x => Converters.GetSingleTitle(x.Titles)).Select(y => $"<li>{y.LatinTitle}</li>"));
                                    string tooltipText = $"<ul>{joined}</ul>";

                                    <span>@Converters.GetSingleTitle(song.Sources.First().Titles).LatinTitle</span>
                                    <Blazorise.Tooltip
                                        Inline="true"
                                        Text="@tooltipText">
                                        <span> and @(song.Sources.Count - 1) more...</span>
                                    </Blazorise.Tooltip>
                                }
                            </td>
                            <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @* todo? *@
                                @string.Join(", ", song.Sources.SelectMany(x => x.SongTypes).Distinct())
                            </td>
                            <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @Converters.GetSingleTitle(song.Titles).LatinTitle
                            </td>
                            <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @if (song.Artists.Count == 1)
                                {
                                    <span>@Converters.GetSingleTitle(song.Artists.First().Titles).LatinTitle</span>
                                }
                                else
                                {
                                    var otherSources = song.Artists.Where(x => x.Id != song.Artists.First().Id);
                                    string joined = string.Join("", otherSources.Select(x => Converters.GetSingleTitle(x.Titles)).Select(y => $"<li>{y.LatinTitle}</li>"));
                                    string tooltipText = $"<ul>{joined}</ul>";

                                    <span>@Converters.GetSingleTitle(song.Artists.First().Titles).LatinTitle</span>
                                    <Blazorise.Tooltip
                                        Inline="true"
                                        Text="@tooltipText">
                                        <span> and @(song.Artists.Count - 1) more...</span>
                                    </Blazorise.Tooltip>
                                }
                            </td>
                        </tr>
                    }
                }
            </table>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
                Close
            </button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>


@code {

    [Parameter]
    public Dictionary<int, SongHistory>? SongsHistory { get; set; }

    private bool _shouldRender;

    private int _previousCount;

    protected override bool ShouldRender() => _shouldRender;

    private Blazorise.Modal _modalRef = null!;

    protected override void OnParametersSet()
    {
    // Console.WriteLine("paramset songhistory");
        if (SongsHistory != null)
        {
            int newCount = SongsHistory.Count;
            _shouldRender = newCount != _previousCount;

    // if (_shouldRender)
    // {
    //     Console.WriteLine("rendering songhistory");
    // }

            _previousCount = newCount;
        }
    }

    public async Task Show()
    {
        await _modalRef.Show();
        StateHasChanged();
    }

    public async Task CallStateHasChanged()
    {
        _shouldRender = true;
        StateHasChanged();
    }

}
