@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Core
@inject IJSRuntime _jsRuntime

<Blazorise.Modal @ref="_modalRef" style="z-index: 4000">
    <Blazorise.ModalContent Centered Size="Blazorise.ModalSize.ExtraLarge">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Song History</Blazorise.ModalTitle>
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <table id="songHistoryTable" style="width: 100%;">
                <tr class="songHistoryHeaders">
                    <th class="songHistoryHeader"></th>
                    <th class="songHistoryHeader">#</th>
                    <th class="songHistoryHeader">Sources</th>
                    <th class="songHistoryHeader">Types</th>
                    <th class="songHistoryHeader">Title</th>
                    <th class="songHistoryHeader">Artists</th>
                </tr>
                @if (SongsHistory != null)
                {
                    @for (int index = 0; index < SongsHistory.Count; index++)
                    {
                        if (SongsHistory.TryGetValue(index, out var songHistory))
                        {
                            var song = songHistory.Song;
                            bool _ = RowDetailsDict.TryGetValue(song.Id, out bool showRowDetail);

                            string rowBackgroundColor = "initial";
                            if (songHistory.PlayerGuessInfos.TryGetValue(ClientState.Session?.Player.Id ?? 0, out var ownPlayerGuessInfo))
                            {
                                rowBackgroundColor = UiHelpers.Bool2Color(ownPlayerGuessInfo.IsGuessCorrect, "seagreen", "firebrick");
                            }

                            <tr class="songHistoryRow" style="border-bottom: 1px solid gray; background-color: @rowBackgroundColor;">

                                <td style="padding: 4px; width: 25px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer;"
                                    @onclick="@(() => Onclick_SongHistoryRow(songHistory))">
                                    @if (showRowDetail)
                                    {
                                        <span>▼</span>
                                    }
                                    else
                                    {
                                        <span>▶</span>
                                    }
                                </td>

                                <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    @(index + 1)
                                </td>
                                <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    @if (song.Sources.Count == 1)
                                    {
                                        <span>@Converters.GetSingleTitle(song.Sources.First().Titles).LatinTitle</span>
                                    }
                                    else
                                    {
                                        var otherSources = song.Sources.Where(x => x.Id != song.Sources.First().Id);
                                        string joined = string.Join("", otherSources.Select(x => Converters.GetSingleTitle(x.Titles)).Select(y => $"<li>{y.LatinTitle}</li>"));
                                        string tooltipText = $"<ul>{joined}</ul>";

                                        <span>@Converters.GetSingleTitle(song.Sources.First().Titles).LatinTitle</span>
                                        <Blazorise.Tooltip
                                            Inline="true"
                                            Text="@tooltipText">
                                            <span> and @(song.Sources.Count - 1) more...</span>
                                        </Blazorise.Tooltip>
                                    }
                                </td>
                                <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    @* todo? *@
                                    @string.Join(", ", song.Sources.SelectMany(x => x.SongTypes).Distinct())
                                </td>
                                <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    @Converters.GetSingleTitle(song.Titles).LatinTitle
                                </td>
                                <td style="padding: 4px; max-width: 380px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    @if (song.Artists.Count == 1)
                                    {
                                        <span>@Converters.GetSingleTitle(song.Artists.First().Titles).LatinTitle</span>
                                    }
                                    else
                                    {
                                        var otherSources = song.Artists.Where(x => x.Id != song.Artists.First().Id);
                                        string joined = string.Join("", otherSources.Select(x => Converters.GetSingleTitle(x.Titles)).Select(y => $"<li>{y.LatinTitle}</li>"));
                                        string tooltipText = $"<ul>{joined}</ul>";

                                        <span>@Converters.GetSingleTitle(song.Artists.First().Titles).LatinTitle</span>
                                        <Blazorise.Tooltip
                                            Inline="true"
                                            Text="@tooltipText">
                                            <span> and @(song.Artists.Count - 1) more...</span>
                                        </Blazorise.Tooltip>
                                    }
                                </td>
                            </tr>

                            @if (showRowDetail)
                            {
                                <tr class="songHistoryRowDetail">
                                    <td colspan="6">
                                        @* <p> @songHistory.TimesCorrect / @songHistory.TimesPlayed</p> *@

                                        <ul>
                                            @foreach (var link in song.Links)
                                            {
                                                <li>
                                                    <a href="@link.Url" target="_blank">@link.Url</a>
                                                </li>
                                            }
                                        </ul>

                                        <ul>
                                            @foreach ((int _, GuessInfo value) in songHistory.PlayerGuessInfos)
                                            {
                                                <li style="background-color: @UiHelpers.Bool2Color(value.IsGuessCorrect, "seagreen", "firebrick"); padding-left: 4px;">
                                                    @value.Username:
                                                    <span> @value.Guess </span>
                                                    (@(Math.Round((float)value.FirstGuessMs / 1000, 2))s)
                                                    @if (value.Labels?.Any() ?? false)
                                                    {
                                                        <span>(On List)</span>
                                                    }
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            }
                        }
                    }
                }
            </table>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button type="button" class="btn btn-secondary" @onclick="@DownloadSongHistoryJson">
                Download JSON
            </button>
            <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
                Close
            </button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>


@code {

    [Parameter]
    public Dictionary<int, SongHistory>? SongsHistory { get; set; }

    private bool _shouldRender;

    private int _previousCount;

    // todo FullyRenderedDict

    protected override bool ShouldRender() => _shouldRender;

    private Blazorise.Modal _modalRef = null!;

    public Dictionary<int, bool> RowDetailsDict { get; set; } = new();

    protected override void OnParametersSet()
    {
    // Console.WriteLine("paramset songhistory");
        if (SongsHistory != null)
        {
            int newCount = SongsHistory.Count;
            _shouldRender = newCount != _previousCount;

    // if (_shouldRender)
    // {
    //     Console.WriteLine("rendering songhistory");
    // }

            _previousCount = newCount;
        }
    }

    public async Task Show()
    {
        await _modalRef.Show();
        StateHasChanged();
    }

    public async Task CallStateHasChanged()
    {
        _shouldRender = true;
        StateHasChanged();
    }

    private async Task Onclick_SongHistoryRow(SongHistory songHistory)
    {
        if (RowDetailsDict.TryGetValue(songHistory.Song.Id, out bool showRowDetail))
        {
            RowDetailsDict[songHistory.Song.Id] = !showRowDetail;
        }
        else
        {
            RowDetailsDict[songHistory.Song.Id] = true;
        }

        await CallStateHasChanged();
    }

    private async Task DownloadSongHistoryJson()
    {
        string json = JsonSerializer.Serialize(SongsHistory, Utils.JsoIndented);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(json);
        await _jsRuntime.InvokeVoidAsync("downloadFile", $"EMQ_SongHistory_{DateTime.UtcNow:yyyy-MM-ddTHH_mm_ss}.json", "application/json", file);
    }

}
