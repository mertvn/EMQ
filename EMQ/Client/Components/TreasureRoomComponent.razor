@using System.Collections
@using System.Timers
@using EMQ.Shared.Core
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.AspNetCore.SignalR.Client
@using Point = EMQ.Shared.Quiz.Entities.Concrete.Point
@inject ClientUtils _clientUtils

<div id="countdownDiv" style="font-size: xxx-large;">
    @((int)Math.Round(Countdown / 1000))
</div>

@* z-indexes: arrow > treasure > player *@
<div id="treasureRoomMainDiv" tabindex="0" @ref="_treasureRoomMainDivRef"
     style="width: @(LootingConstants.TreasureRoomWidth)px; height: @(LootingConstants.TreasureRoomHeight)px;
      background-color: gray; word-wrap: break-word; position: absolute; left: 50%;"
     @onkeydown="OnKeyDown" @onkeyup="OnKeyUp">

    @if (Room != null)
    {
        // Console.WriteLine(JsonSerializer.Serialize(Room));
        var ownPlayer = Room!.Players.SingleOrDefault(x => x.Id == ClientState.Session!.Player.Id) ??
                        Room!.Spectators.Single(x => x.Id == ClientState.Session!.Player.Id);

        var currentTreasureRoomCoords = ownPlayer.LootingInfo.TreasureRoomCoords;
        @foreach (var player in Room.Players)
        {
            @if (player.LootingInfo.TreasureRoomCoords == currentTreasureRoomCoords)
            {
                @if (player.Id == ownPlayer.Id)
                {
                    <div id="treasureRoomInventoryDiv"
                         style="position: absolute; left: 5px; top: 10px; max-width: @(LootingConstants.TreasureRoomWidth / 3)px;
                          overflow: hidden; text-overflow: ellipsis; white-space: nowrap; ">
                        Inventory <span style="margin-left: @(LootingConstants.TreasureRoomWidth / 6)px;">@(Room.QuizSettings.InventorySize - player.LootingInfo.Inventory.Count)</span>
                        <br/>
                        @if (player.LootingInfo.Inventory.Any())
                        {
                            @foreach (var treasure in player.LootingInfo.Inventory)
                            {
                                var sourceLatinTitle = Converters.GetSingleTitle(@treasure.ValidSource.Value).LatinTitle;
                                <span style="cursor: pointer"
                                      @onclick="@(() => DropTreasure(treasure))">
                                    <Blazorise.Tooltip Text="@sourceLatinTitle">
                                        @sourceLatinTitle
                                    </Blazorise.Tooltip>
                                </span>
                            }
                        }
                    </div>
                }

                <div id="treasureRoomCoordsDiv"
                     style="position: absolute; right: 2px; top: 2px;">
                    (@(player.LootingInfo.TreasureRoomCoords.X),@(player.LootingInfo.TreasureRoomCoords.Y))
                </div>

                Avatar avatar = (ClientState.Session?.Player.Preferences.ForceDefaultAvatar ?? false) ? Avatar.DefaultAvatar : player.Avatar;
                <div class="treasureRoomPlayerDiv" style="z-index: 3000; display: inline-block; position: absolute; left: @(player.LootingInfo.X)px; top: @(player.LootingInfo.Y)px;">
                    <Blazorise.Tooltip Text="@player.Username">
                        <img width="@(LootingConstants.PlayerAvatarSize)px" height="@(LootingConstants.PlayerAvatarSize)px"
                             src="@Avatar.GetUrlByPlayerState(avatar, PlayerStatus.Looting)" alt="Avatar" class="@player.PlayerStatus"
                             style="border-radius: 50%;">
                        @* <p>@player.Username</p> *@
                    </Blazorise.Tooltip>
                </div>
            }
        }

        @if (Room.TreasureRooms[currentTreasureRoomCoords.X][currentTreasureRoomCoords.Y].Treasures.Any())
        {
            @foreach (var treasure in Room.TreasureRooms[currentTreasureRoomCoords.X][currentTreasureRoomCoords.Y].Treasures)
            {
                var sourceLatinTitle = Converters.GetSingleTitle(@treasure.ValidSource.Value).LatinTitle;
                <div class="treasure" @onmouseover="@(() => { })"
                     style="word-wrap: break-word; position: absolute; left: @(treasure.Position.X)px; top: @(treasure.Position.Y)px; cursor: pointer; z-index: 4000;
                     padding: 5px 5px 1px 5px; border-style: solid; border-radius: 50%;
                     border-width: 2px; border-color: @UiHelpers.Bool2Color(!IsSpectator && treasure.Position.IsReachableFromCoords((int)ownPlayer.LootingInfo.X, (int)ownPlayer.LootingInfo.Y), "green", "red");"
                     @onclick="@(() => PickupTreasure(treasure))">

                    @* todo invisible until picked up quiz setting or until in range *@
                    <Blazorise.Tooltip Text="@sourceLatinTitle">
                        <img width="@(LootingConstants.PlayerAvatarSize - 20)px" height="@(LootingConstants.PlayerAvatarSize - 20)px"
                             src="assets/gem.svg" alt="Treasure"
                             style="display: inline-block">
                    </Blazorise.Tooltip>

                </div>
            }
        }

        @foreach ((Direction direction, Point treasureRoomCoords) in Room.TreasureRooms[currentTreasureRoomCoords.X][currentTreasureRoomCoords.Y].Exits)
        {
            Point arrowPosition;
            string arrowClass;
            switch (direction)
            {
                case Direction.North:
                    arrowPosition = new Point(LootingConstants.TreasureRoomWidth / 2, 0);
                    arrowClass = "bi bi-arrow-up-circle me-2";
                    break;
                case Direction.East:
                    arrowPosition = new Point(LootingConstants.TreasureRoomWidth - 40, LootingConstants.TreasureRoomHeight / 2);
                    arrowClass = "bi bi-arrow-right-circle me-2";
                    break;
                case Direction.South:
                    arrowPosition = new Point(LootingConstants.TreasureRoomWidth / 2, LootingConstants.TreasureRoomHeight - 50);
                    arrowClass = "bi bi-arrow-down-circle me-2";
                    break;
                case Direction.West:
                    arrowPosition = new Point(5, LootingConstants.TreasureRoomHeight / 2);
                    arrowClass = "bi bi-arrow-left-circle me-2";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            <div class="changeTreasureRoomArrowDiv"
                 style="position: absolute; left: @(arrowPosition.X)px; top:@(arrowPosition.Y)px; z-index: 5000;
                          font-size: xx-large; cursor: pointer;
                          color: @UiHelpers.Bool2Color(IsSpectator || arrowPosition.IsReachableFromCoords((int)ownPlayer.LootingInfo.X, (int)ownPlayer.LootingInfo.Y), "green", "red");
                          pointer-events: @UiHelpers.Bool2PointerEvents(IsSpectator || arrowPosition.IsReachableFromCoords((int)ownPlayer.LootingInfo.X, (int)ownPlayer.LootingInfo.Y));"
                 @onclick="@(() => OnclickChangeTreasureRoomArrow(arrowPosition, treasureRoomCoords, direction))">
                <i class="@arrowClass" style="width: 3em"></i>
            </div>
        }
    }

</div>
