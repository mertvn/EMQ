@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using System.Collections.Generic
@using EMQ.Client.Pages
@using EMQ.Shared.Library.Entities.Concrete
@inject ILogger<SongReportComponent> _logger
@inject ClientUtils _clientUtils
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

<button type="button" class="btn btn-primary" @onclick="@(() => { _modalRef.Show(); })">Review</button>

@* setting z-index seems to prevent the modal closing animation from playing sometimes, but we have to do it *@
<Blazorise.Modal @ref="_modalRef" style="z-index: 4000" Opened="@(async () => await OnOpened())" Closed="@(async () => await OnClosed())">
    <Blazorise.ModalContent Centered Size="Blazorise.ModalSize.Fullscreen">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Review</Blazorise.ModalTitle>
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>

            <button type="button" class="btn btn-primary" @onclick="@(() => { reviewingId = CurrentRQs.LastOrDefault(x => x.status == ReviewQueueStatus.Pending)?.id ?? 1; })">Seek to pending</button>
            ID: <input type="number" id="input_reviewingId" @bind="reviewingId"/>
            URL: <a class="link-primary" href="@videoSrc" target="_blank"> @videoSrc</a>
            Status:
            <span style="color: @UiHelpers.Bools2Color(reviewingItem?.status == ReviewQueueStatus.Approved, reviewingItem?.status == ReviewQueueStatus.Rejected, "green", "red")">
                @reviewingItem?.status.ToString()
            </span>

            @if (reviewingItem != null && reviewingItem.analysis != Constants.AnalysisOkStr)
            {
                <span>Analysis: @reviewingItem.analysis</span>
            }

            <br/>
            @if (CurrentRQs.Any() && IsOpen && reviewingItem != null)
            {
                <div style="margin: 5px;">
                    <button type="button" class="btn btn-primary" disabled="@(!(reviewingId > CurrentRQs.MinBy(x => x.id)!.id))" @onclick="@(() => { reviewingId -= 1; })">←Previous</button>
                    <button type="button" class="btn btn-primary" disabled="@(!(reviewingId + 1 <= CurrentRQs.MaxBy(x => x.id)!.id))" @onclick="@(() => { reviewingId += 1; })">Next→</button>
                </div>

                <button type="button" class="btn btn-secondary" @onclick="@(() => controls = !controls)">Toggle controls</button>

                <div style="display: flex; flex-wrap: wrap; margin: 5px;">
                    <div style="position: relative">
                        <video src="@videoSrc"
                               id="@VideoElementId" width="720px" height="400px" autoplay controls="@controls"
                               style="background: black; margin: 5px 20px 5px 5px;">
                        </video>

                        @if (reviewingItem is not null && !reviewingItem.is_video)
                        {
                            <p style="position: absolute; top: 40%; right: 33%; font-size: xxx-large; color: white; z-index: 3000; pointer-events: none;">Sound only</p>
                        }
                    </div>

                    <SongInfoCardWrapperComponent CurrentSongs="@(new List<Song> { reviewingItem!.Song })" LibrarySongFilter="LibrarySongFilterKind.All" IsLibraryPage="false"/>

                    <ul>
                        <li>Resolution: @reviewingItem.analysis_raw?.Width x @reviewingItem.analysis_raw?.Height</li>
                        <li>Average FPS: @reviewingItem.analysis_raw?.AvgFramerate</li>
                        <li>Video bitrate (kbps): @reviewingItem.analysis_raw?.VideoBitrateKbps</li>
                        <li>Audio bitrate (kbps): @reviewingItem.analysis_raw?.AudioBitrateKbps</li>
                        <li>Overall bitrate (kbps): @reviewingItem.analysis_raw?.OverallBitrateKbps</li>
                    </ul>
                </div>

                @if (reviewingItem.duration is null)
                {
                    <span>Cannot modify item without duration.</span>
                }
                else
                {
                    <textarea id="note_mod"
                         rows="1" cols="35" maxlength="780" placeholder="Notes"
                         @bind="reviewingItem.reason"></textarea>

                    <button type="button" class="btn btn-danger" disabled="@(reviewingItem.status == ReviewQueueStatus.Rejected)" @onclick="@(() => Onclick_Reject())">Rejected</button>
                    <button type="button" class="btn btn-secondary" disabled="@(reviewingItem.status == ReviewQueueStatus.Pending)" @onclick="@(() => Onclick_Pending())">Pending</button>
                    <button type="button" class="btn btn-success" disabled="@(reviewingItem.status == ReviewQueueStatus.Approved)" @onclick="@(() => Onclick_Approve())">Approved</button>
                }

                <pre>@JsonSerializer.Serialize(reviewingItem, Utils.JsoIndented)</pre>
            }
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
                Close
            </button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>
