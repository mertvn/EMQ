@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using System.Collections.Generic
@using EMQ.Client.Pages
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Library.Entities.Concrete
@inject ILogger<SongReportComponent> _logger
@inject ClientUtils _clientUtils
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

@{
    bool isReviewModerator = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session, PermissionKind.ReviewSongLink);
}

@if (IsLibraryPage)
{
    <button type="button" class="btn btn-primary" style="margin-bottom: 5px;" @onclick="@(() => { _modalRef.Show(); })">Review</button>
}

@* setting z-index seems to prevent the modal closing animation from playing sometimes, but we have to do it *@
<Blazorise.Modal @ref="_modalRef" style="z-index: 4000" RenderMode="Blazorise.ModalRenderMode.LazyReload"
                 Opened="@(async () => await OnOpened())" Closed="@(async () => await OnClosed())">
    <Blazorise.ModalContent Centered Size="Blazorise.ModalSize.Fullscreen">
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Review</Blazorise.ModalTitle>
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>

            @if (IsLibraryPage)
            {
                <button type="button" class="btn btn-primary" @onclick="@(() => { reviewingId = CurrentRQs?.LastOrDefault(x => x.id > reviewingId && x.status == ReviewQueueStatus.Pending)?.id ?? 1; })">Seek to pending</button>

                <span>ID: </span>
                <input type="number" id="input_reviewingId" @bind="reviewingId"/>

                <span>Status: </span>
                <span style="color: @UiHelpers.Bools2Color(reviewingItem?.status == ReviewQueueStatus.Approved, reviewingItem?.status == ReviewQueueStatus.Rejected, "green", "red")">
                    @reviewingItem?.status.ToString()
                </span>
            }

            URL: <a class="link-primary" href="@videoSrc" target="_blank"> @videoSrc</a>

            @if (reviewingItem != null && !string.IsNullOrEmpty(reviewingItem.analysis) && reviewingItem.analysis != Constants.AnalysisOkStr)
            {
                <span>Analysis: @reviewingItem.analysis</span>
            }

            <br/>
            @if ((CurrentRQs?.Any() ?? false) && IsOpen && reviewingItem != null)
            {
                @if (IsLibraryPage)
                {
                    <div style="margin: 5px;">
                        <button type="button" class="btn btn-primary" disabled="@(!(reviewingId > CurrentRQs.MinBy(x => x.id)!.id))" @onclick="@(() => { reviewingId -= 1; })">←Previous</button>
                        <button type="button" class="btn btn-primary" disabled="@(!(reviewingId + 1 <= CurrentRQs.MaxBy(x => x.id)!.id))" @onclick="@(() => { reviewingId += 1; })">Next→</button>
                    </div>
                }

                <button type="button" class="btn btn-secondary" @onclick="@(() => controls = !controls)">Toggle controls</button>

                <div style="display: flex; flex-wrap: wrap; margin: 5px;">
                        <div style="position: relative; width: 720px; height: 400px;">
                        <video src="@videoSrc"
                               id="@VideoElementId" width="720px" height="400px" autoplay controls="@controls"
                               style="background: black; margin: 5px 20px 5px 5px;">
                        </video>

                            @if (!reviewingItem.is_video)
                            {
                                <p style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: xxx-large; color: white; z-index: 3000; margin: 0;">
                                    Sound only
                                </p>
                            }
                        </div>

                    @if (IsLibraryPage)
                    {
                        <SongInfoCardWrapperComponent CurrentSongs="@(new List<Song> { reviewingItem.Song })" LibrarySongFilter="LibrarySongFilterKind.All" IsLibraryPage="false"/>
                    }

                    @if (reviewingItem.analysis_raw != null)
                    {
                        <ul>
                            <li>Resolution: @reviewingItem.analysis_raw.Width x @reviewingItem.analysis_raw.Height</li>
                            <li>Average FPS: @Math.Round(reviewingItem.analysis_raw.AvgFramerate ?? 0, 2)</li>
                            <li>Video bitrate (kbps): @reviewingItem.analysis_raw.VideoBitrateKbps</li>
                            <li>Audio bitrate (kbps): @reviewingItem.analysis_raw.AudioBitrateKbps</li>
                            <li>
                                @{
                                    double overallBitrate = Math.Round(reviewingItem.analysis_raw.OverallBitrateKbps ?? 0, 2);
                                    <span style="color: @UiHelpers.Bool2Color(overallBitrate > 3000, "red", "inherit");"> Overall bitrate (kbps): @overallBitrate</span>
                                }
                            </li>
                            <li>Filesize: @Math.Round(reviewingItem.analysis_raw.FilesizeMb ?? 0, 2) MB</li>
                            <br/>
                            @if (reviewingItem.analysis_raw.VolumeDetect != null)
                            {
                                @foreach (string line in reviewingItem.analysis_raw.VolumeDetect)
                                {
                                    <li>@line</li>
                                }
                            }

                            <br/>
                            @if (true)
                            {
                                string src = $"{Constants.WebsiteDomain}/selfhoststorage/userup/sox/{reviewingItem.url.LastSegment()}.png";
                                <img src="@src" alt="Spectrogram"/>
                            }

                        </ul>
                    }
                </div>

                @if (isReviewModerator && IsLibraryPage)
                {
                    @if (reviewingItem.duration is null)
                    {
                        <span>Cannot modify item without duration.</span>
                    }
                    else
                    {
                        <textarea id="note_mod"
                         rows="1" cols="35" maxlength="780" placeholder="Notes"
                         @bind="reviewingItem.reason" style="margin-right: 5px;"></textarea>

                        <button type="button" class="btn btn-danger" disabled="@(reviewingItem.status == ReviewQueueStatus.Rejected)" @onclick="Onclick_Reject">Rejected</button>
                        <button type="button" class="btn btn-secondary" disabled="@(reviewingItem.status == ReviewQueueStatus.Pending)" @onclick="Onclick_Pending">Pending</button>
                        <button type="button" class="btn btn-success" disabled="@(reviewingItem.status == ReviewQueueStatus.Approved)" @onclick="Onclick_Approve">Approved</button>

                        @if (reviewingItem.Song.Sources.Any(x => x.SongTypes.Contains(SongSourceSongType.BGM)))
                        {
                            <br/>
                            <input type="checkbox" id="checkbox-ApplyToBGMBatch" class="form-check-input" @bind="@ApplyToBGMBatch"/>
                            <label for="checkbox-ApplyToBGMBatch">Apply to BGM batch</label>
                        }
                    }
                }

                @if (isReviewModerator)
                {
                    <pre>@JsonSerializer.Serialize(reviewingItem, Utils.JsoIndented)</pre>
                }
            }
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button type="button" class="btn btn-secondary" @onclick="@(() => { _modalRef.Hide(); })">
                Close
            </button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>
