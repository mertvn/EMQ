@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using EMQ.Shared.Core.UI
@using EMQ.Client.Components
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core
@using System.Net.Http.Headers
@using EMQ.Client.Pages
@using EMQ.Shared
@using EMQ.Shared.Quiz.Entities.Concrete
@using Index = System.Index
@inject HttpClient _client
@inject ILogger<Index> _logger
@inject ClientUtils _clientUtils

@* <h4>Batch uploader</h4> *@

@if (IsBGMMode)
{
    <p>
        The batch uploader (BGM mode) lets you upload many files at once by matching your files with the songs belonging to this release automatically.
        <br/>
        Currently it uses the MusicBrainz Track Id and MusicBrainz Recording Id metadata in the file. You must tag your files with MusicBrainz Picard in order to use this.
        <br/>
        DON'T UPLOAD REPLACEMENTS RIGHT NOW, ONLY UPLOAD STUFF THAT'S NOT UPLOADED.
    </p>
}
else
{
    <p>
        The batch uploader lets you upload many files at once by matching your files with the songs in the database automatically.
        <br/>
        Currently it uses the MusicBrainz Track Id and MusicBrainz Recording Id metadata in the file. You must tag your files with MusicBrainz Picard in order to use this.
        <br/>
        Alternatively it can use the song title and artist metadata in the file if MB metadata is not present.
        <br/>
        To use it, first browse for files, and then click the button under the song info to upload it. If there are multiple matches, make sure you choose the correct one.
    </p>
}

<details>
    <summary>Upload options</summary>
    <label>
        <InputCheckbox class="form-check-input" @bind-Value="UploadOptions.DoTwoPass" style="margin: 5px"></InputCheckbox>
        2-pass encoding
    </label>
    <br/>

    <label>
        <InputCheckbox class="form-check-input" @bind-Value="UploadOptions.ShouldCropSilence" style="margin: 5px"></InputCheckbox>
        Crop silence
    </label>
    <br/>

    @* manual cropping is not available here on purpose *@

    <label>
        <InputCheckbox class="form-check-input" @bind-Value="UploadOptions.ShouldAdjustVolume" style="margin: 5px"></InputCheckbox>
        Adjust volume
    </label>
    <br/>
</details>

<p>
    Allowed formats: @(IsBGMMode ? UploadConstants.ValidMediaTypesBgmStr : UploadConstants.ValidMediaTypesStr)
    <br/>
    Upload up to @UploadConstants.MaxFilesBatchUpload files:
    <InputFile
        OnChange="@OnInputFileChange"
        multiple
        disabled="@(_uploadResults.Count >= UploadConstants.MaxFilesBatchUpload)"/>
    @StatusText
</p>

Songs with at least one possible match: @HaveCount/@_uploadResults.Count
<br/>

@if (_uploadResults.Count > 0)
{
    <ul>
        @foreach (var file in _uploadResults)
        {
            <li>
                @file.FileName
                <br>

                <span> MusicBrainz Recording/Track Ids: @string.Join(", ", file.MBRecordingOrTrackIds)</span>
                <br>

                @if (!IsBGMMode)
                {
                    <span>Title: @file.Title</span>
                    <br>
                    <span>Artists: @string.Join(", ", file.Artists)</span>
                    <br>
                }

                @if (file.Uploaded)
                {
                    <a class="link-primary" href="@(file.ResultUrl)" target="_blank" style="display: inline-block;">
                        <span>@file.ResultUrl</span>
                    </a>
                    @if (!string.IsNullOrEmpty(file.ExtractedResultUrl))
                    {
                        <a class="link-primary" href="@(file.ExtractedResultUrl)" target="_blank" style="display: inline-block;">
                            <span>@file.ExtractedResultUrl</span>
                        </a>
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(file.ErrorStr))
                    {
                        @if (file.ChosenMatch != null)
                        {
                            <span>Uploading...</span>
                        }
                        else
                        {
                            @if (!file.PossibleMatches.Any())
                            {
                                <span>No matches found</span>
                            }
                            else
                            {
                                var batchUploaderCallbacks = new Dictionary<int, Func<Task>>();
                                @foreach (var song in file.PossibleMatches)
                                {
                                    batchUploaderCallbacks[song.Id] = async () => await ChooseAndUpload(file, song.Id);
                                }

                                <p>Possible matches: </p>
                                <SongInfoCardWrapperComponent
                                    CurrentSongs="@file.PossibleMatches"
                                    LibrarySongFilter="LibrarySongFilterKind.All"
                                    IsLibraryPage="false"
                                    BatchUploaderCallbacks="@batchUploaderCallbacks"/>
                            }
                        }
                    }
                    else
                    {
                        <span>@file.ErrorStr</span>
                    }
                }
                <br>
                <br>
            </li>
        }
    </ul>
}
