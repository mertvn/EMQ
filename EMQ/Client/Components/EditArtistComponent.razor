@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Library.Entities.Concrete
@using EMQ.Client.Pages
@using System.Linq
@using System.Text.RegularExpressions
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Core.SharedDbEntities
@using EMQ.Shared.MusicBrainz.Business
@using EMQ.Shared.VNDB.Business
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

<div style="border: 1px black solid; padding: 10px; max-width: 1400px;">
    @if (IsNew)
    {
        <details style="padding: 5px;">
            <summary>Guidelines for adding artists</summary>
            <ul>
                <li>Follow VNDB's guidelines on name order and romanization.</li>
                <li>Currently we're only accepting Japanese artists.</li>
            </ul>
            <br/>
        </details>
    }
    else
    {
        <details style="padding: 5px;">
            <summary>Guidelines for editing artists</summary>
            <ul>
                <li>Follow VNDB's guidelines on name order and romanization.</li>
                <li>Ask a mod if you want to delete an existing alias.</li>
            </ul>
            <br/>
        </details>
    }

    @if (IsNew)
    {
        <details style="padding: 5px;">
            <summary>VNDB seeder</summary>
            <p>Enter a VNDB staff id or URL to fill information automatically.</p>
            <input type="text" @bind:get="@VndbSeederInputText" @bind:set="@SeedFromVndb" style="width: 540px;"/>
            <br/>
        </details>

        <details style="padding: 5px;">
            <summary>MusicBrainz seeder</summary>
            <p>Enter a MusicBrainz artist id or URL to fill information automatically.</p>
            <input type="text" @bind:get="@MusicBrainzSeederInputText" @bind:set="@SeedFromMusicBrainz" style="width: 540px;"/>
            <br/>
        </details>

        <br/>
    }

    <div style="display: flex; flex-wrap: wrap">
        <div style="border: 1px black solid; padding: 10px; width: 970px;">
            <div style="border: 1px black solid; padding: 10px;">
                <h5>Aliases</h5>
                <button type="button" class="btn btn-primary" @onclick="AddAlias">Add alias</button>
                <br/>
                <br/>

                @for (int index = 0; index < Artist.Titles.Count; index++)
                {
                    var alias = Artist.Titles[index];
                    int indexCopy = index;
                    <div style="border: 1px black solid; padding: 10px;">
                        <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await RemoveAlias(indexCopy))">🗑</span>
                        @if (AuthStuff.HasPermission(ClientState.Session, PermissionKind.ReviewEdit) &&
                             !IsNew && alias.ArtistAliasId > 0 && !alias.IsMainTitle && Artist.Titles.Count > 1)
                        {
                            <button type="button" class="btn btn-danger" @onclick="@(async () => { await Onclick_DeleteAAFromDb(Artist.Id, alias.ArtistAliasId); })">
                                Delete artist alias from the database
                            </button>
                        }
                        <br/>

                        <label style="padding: 4px;">
                            <input type="text" @bind="alias.LatinTitle"/>
                            Latin name
                        </label>
                        <br/>
                        <label style="padding: 4px;">
                            <input type="text" @bind="alias.NonLatinTitle"/>
                            Non-Latin name
                        </label>
                        <br/>

                        <label style="padding: 4px;">
                            <input type="radio" class="form-check-input" name="radioIsArtistAliasMainTitle"
                                   checked="@alias.IsMainTitle" @onchange="@(() => OnChangeRadioIsArtistAliasMainTitle(indexCopy))"/>
                            Primary alias
                        </label>
                        <br/>
                    </div>
                }
            </div>
            <br/>

            <div style="border: 1px black solid; padding: 10px;">
                <h5>General info</h5>
                <label style="padding: 4px;">
                    <select id="AddTitleLang" style="margin: 5px" @bind="Artist.PrimaryLanguage" disabled>
                        @foreach (var language in Enum.GetValues<Language>())
                        {
                            @if (language != Language.allLanguages)
                            {
                                // todo chinese binding is fucked? vndb uses only "zh" for staff while we have "zhHans" and "zhHant"
                                <option value="@language">@language.GetDisplayName()</option>
                            }
                        }
                    </select>
                    Primary language
                </label>
            </div>
            <br/>

            <div style="border: 1px black solid; padding: 10px;">
                <h5>External links</h5>
                <details>
                    <summary>
                        Allowed link types
                    </summary>
                    <ul>
                        @foreach ((SongArtistLinkType key, Regex value) in RegexPatterns.ArtistLinkRegex)
                        {
                            if (key != SongArtistLinkType.Unknown)
                            {
                                <li>
                                    @key.GetDescription(): @value.ToString()
                                </li>
                            }
                        }
                    </ul>
                </details>
                <table>
                    @foreach (var link in Artist.Links)
                    {
                        <tr>
                            <td>
                                <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(_ => Artist.Links.Remove(link))">🗑</span>
                            </td>
                            <td>
                                <a href="@link.Url" target="_blank" style="margin-right: 4px;">@link.Type.GetDescription()</a>
                            </td>
                            <td>
                                @link.Url
                            </td>
                        </tr>
                    }
                </table>
                <input type="text" placeholder="Add URL..." @bind:get="@ExternalLinksInputText" @bind:set="@AddNewExternalLink" @bind:event="oninput">
            </div>
            <br/>

            @if (!IsNew)
            {
                <div style="border: 1px black solid; padding: 10px;">
                    <h5>Relationships (artist-artist)</h5>
                    <AutocompleteAComponent @ref="_autocompleteAComponentRef"
                                            Placeholder="Enter artist name here"
                                            IsDisabled="false"
                                            IsQuizPage="false"
                                            @bind-Guess="@SelectedArtist"
                                            Callback="SelectedResultChangedA">
                    </AutocompleteAComponent>
                    @foreach (var arar in Artist.ArtistArtists)
                    {
                        string sourceStr = arar.rel switch {
                            ArtistArtistRelKind.MemberOfBand => "Member: ",
                            _ => "Source: "
                            };

                        string targetStr = arar.rel switch {
                            ArtistArtistRelKind.MemberOfBand => "Band: ",
                            _ => "Target: "
                            };

                        <div style="border: 1px black solid; padding: 10px;">
                            <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => { await RemoveArtistArtist(arar); })">
                                🗑
                            </span>

                            <div>
                                @sourceStr
                                @if (ClientState.ArtistsCache.TryGetValue(arar.source, out var sourceArtist))
                                {
                                    string href = $"ea{arar.source}";
                                    <a href=@href>@Converters.GetSingleTitle(sourceArtist.Titles)</a>
                                }
                                else
                                {
                                    @arar.source
                                }
                            </div>

                            <div>
                                @targetStr
                                @if (ClientState.ArtistsCache.TryGetValue(arar.target, out var targetArtist))
                                {
                                    string href = $"ea{arar.target}";
                                    <a href=@href>@Converters.GetSingleTitle(targetArtist.Titles)</a>
                                }
                                else
                                {
                                    @arar.target
                                }
                            </div>

                            <div>
                                Type:
                                @if (true)
                                {
                                    string id = $"select-ArtistArtist-{arar.source}-{arar.target}-{arar.rel}";
                                    <select id="@id" style="margin: 5px" @bind="arar.rel">
                                        @foreach (var key in Enum.GetValues<ArtistArtistRelKind>())
                                        {
                                            <option value="@key">@key.GetDisplayName()</option>
                                        }
                                    </select>
                                    <br/>
                                }
                            </div>

                            <button type="button" class="btn btn-primary" disabled="@(!Ready)" @onclick="@(() => (arar.source, arar.target) = (arar.target, arar.source))">
                                Change direction
                            </button>
                        </div>
                    }
                </div>
                <br/>
            }

            <textarea id="note_user"
                      rows="2"
                      cols="34"
                      maxlength="780"
                      placeholder="Summarize the changes you have made, including links to source(s)."
                      @bind="NoteUser">
            </textarea>
            <br/>

            <button type="button" class="btn btn-primary" disabled="@(!Ready)" @onclick="OnclickSubmit">Submit</button>
            <ul>
                @foreach (string validationMessage in ValidationMessages)
                {
                    string color = validationMessage.StartsWith("Added") ? "green" : "red";
                    <li style="color: @color;">@validationMessage</li>
                }
            </ul>
            <br/>
        </div>

        <div style="border: 1px black solid; padding: 10px;">
            <div style="margin: 16px; width: 330px; min-height:200px;">
                <h4>Preview</h4>
                @* todo? *@
                <pre>@JsonSerializer.Serialize(Artist, Utils.JsoIndented)</pre>
                @* <SongInfoCardComponent @ref="_songInfoCardComponentRef" Song="@Song" IsEditing="true"></SongInfoCardComponent> *@
            </div>
            <br/>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public SongArtist Artist { get; set; } = null!;

    [Parameter]
    public bool IsNew { get; set; }

    public List<string> ValidationMessages { get; } = new();

    private static SongArtist GetNewArtist => new() { PrimaryLanguage = "ja", Titles = new List<Title> { new() { IsMainTitle = true } } };

    public string NoteUser { get; set; } = "";

    public bool Ready { get; set; } = true;

    public string ExternalLinksInputText { get; set; } = "";

    private AutocompleteAComponent _autocompleteAComponentRef = null!;

    public AutocompleteA? SelectedArtist { get; set; }

    private string VndbSeederInputText { get; set; } = "";

    private string MusicBrainzSeederInputText { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        if (IsNew)
        {
            Artist = GetNewArtist;
        }

        ClientState.ArtistsCache[Artist.Id] = Artist;
        foreach (ArtistArtist arar in Artist.ArtistArtists)
        {
            if (!ClientState.ArtistsCache.ContainsKey(arar.source))
            {
                var req = new SongArtist() { Id = arar.source };
                HttpResponseMessage res1 = await _client.PostAsJsonAsync("Library/GetSongArtist", req);
                if (res1.IsSuccessStatusCode)
                {
                    var content = (await res1.Content.ReadFromJsonAsync<ResGetSongArtist>())!;
                    var artist = content.SongArtists.First();
                    ClientState.ArtistsCache[artist.Id] = artist;
                }
            }

            if (!ClientState.ArtistsCache.ContainsKey(arar.target))
            {
                var req = new SongArtist() { Id = arar.target };
                HttpResponseMessage res1 = await _client.PostAsJsonAsync("Library/GetSongArtist", req);
                if (res1.IsSuccessStatusCode)
                {
                    var content = (await res1.Content.ReadFromJsonAsync<ResGetSongArtist>())!;
                    var artist = content.SongArtists.First();
                    ClientState.ArtistsCache[artist.Id] = artist;
                }
            }
        }

        Ready = true;
    }

    private async Task CallStateHasChanged()
    {
        StateHasChanged();
    }

    private void AddAlias()
    {
        Artist.Titles.Add(new Title());
    }

    private async Task RemoveAlias(int index)
    {
    // if (!IsNew)
    // {
    //     return;
    // }

        if (Artist.Titles.Count <= 1)
        {
            return;
        }

        Artist.Titles.RemoveAt(index);
        await CallStateHasChanged();
    }

    private async Task OnclickSubmit()
    {
        if (Ready)
        {
            Ready = false;
            StateHasChanged();
            bool isValid = await ValidateArtist(Artist, IsNew);
            if (isValid)
            {
                var req = new ReqEditArtist(Artist, IsNew, NoteUser);
                var res = await _client.PostAsJsonAsync("Library/EditArtist", req);
                if (res.IsSuccessStatusCode)
                {
                    ValidationMessages.Add("Added to the edit queue.");
                    if (IsNew)
                    {
                        Artist = GetNewArtist;
                        NoteUser = "";
                    }
                    else
                    {
                        Ready = false;
                        StateHasChanged();
                        return; // prevent submitting more than one edit at a time
                    }
                }
                else
                {
                    ValidationMessages.Add($"Error: {res.StatusCode:D} {res.StatusCode} {await res.Content.ReadAsStringAsync()}");
                }
            }
            Ready = true;
        }
    }

    public async Task<bool> ValidateArtist(SongArtist artist, bool isNew)
    {
        ValidationMessages.Clear();
        bool isValid = true;

        if (!artist.Titles.Any())
        {
            ValidationMessages.Add("There must be at least one alias.");
            isValid = false;
        }
        else
        {
            foreach (Title title in artist.Titles)
            {
                if (string.IsNullOrWhiteSpace(title.LatinTitle))
                {
                    ValidationMessages.Add("Latin name must not be empty.");
                    isValid = false;
                }
            }

            if (isNew && artist.Titles.Count(x => x.IsMainTitle) != 1)
            {
                ValidationMessages.Add("There must be exactly one primary alias.");
                isValid = false;
            }
        }

        if (isNew && artist.PrimaryLanguage != "ja")
        {
            ValidationMessages.Add("Currently we're only accepting Japanese artists.");
            isValid = false;
        }

        if (!artist.Links.Any())
        {
            ValidationMessages.Add("There must be at least one external link.");
            isValid = false;
        }
        else
        {
    // todo important validate link regex
            if (artist.Links.GroupBy(x => x.Type).Any(y => y.Count() > 1))
            {
                ValidationMessages.Add("Only one external link of each type is allowed.");
                isValid = false;
            }

            if (artist.Links.Any(x => x.Type <= SongArtistLinkType.Unknown))
            {
                ValidationMessages.Add("Unknown link types are not allowed.");
                isValid = false;
            }
        }

        foreach (ArtistArtist arar in artist.ArtistArtists)
        {
            if (arar.source == arar.target)
            {
                ValidationMessages.Add("Selfcest is not allowed.");
                isValid = false;
            }

            if (arar.source <= 0)
            {
                ValidationMessages.Add("Invalid artist-artist relationship source.");
                isValid = false;
            }

            if (arar.target <= 0)
            {
                ValidationMessages.Add("Invalid artist-artist relationship target.");
                isValid = false;
            }

            if (!Enum.IsDefined(typeof(ArtistArtistRelKind), arar.rel))
            {
                ValidationMessages.Add("Invalid artist-artist relationship type.");
                isValid = false;
            }

            if (artist.ArtistArtists.Count(x => x.source == arar.source && x.target == arar.target && x.rel == arar.rel) != 1)
            {
                ValidationMessages.Add("Duplicate artist-artist relationship detected.");
                isValid = false;
            }
        }

        return isValid;
    }

    // todo convert all links in db to end with / (except anison.info)
    private async Task AddNewExternalLink(string value)
    {
        ExternalLinksInputText = value;
        if (Artist.Links.Any(x => x.Url == value))
        {
            return;
        }

        if (!value.EndsWith('/'))
        {
            value += '/';
        }

        foreach ((SongArtistLinkType key, Regex regex) in RegexPatterns.ArtistLinkRegex)
        {
            if (Artist.Links.Any(x => x.Type == key))
            {
                continue;
            }

            string str = value;
            if (key == SongArtistLinkType.AnisonInfoPerson)
            {
    // anison.info links can't end with /
                str = JsonSerializer.Deserialize<string>(JsonSerializer.Serialize(value))!.TrimEnd('/');

    // support anison javascript links
                var javascriptLinkMatch = RegexPatterns.AnisonJavascriptLinkRegex.Match(str);
                if (javascriptLinkMatch.Success)
                {
                    str = javascriptLinkMatch.Groups[1].Value switch
                    {
                        "person" => $"http://anison.info/data/person/{javascriptLinkMatch.Groups[2].Value}.html",
                        _ => str
                        };
                    value = str;
                }
            }

            if (regex.IsMatch(str))
            {
                Artist.Links.Add(new SongArtistLink { Type = key, Url = value.TrimEnd('/') });
                ExternalLinksInputText = "";
            }
        }

        StateHasChanged();
    }

    private void OnChangeRadioIsArtistAliasMainTitle(int selectedIndex)
    {
        for (int index = 0; index < Artist.Titles.Count; index++)
        {
            var title = Artist.Titles[index];
            title.IsMainTitle = index == selectedIndex;
        }
    }

    private async Task SelectedResultChangedA()
    {
        if (SelectedArtist is null)
        {
            return;
        }

        if (Artist.Id == SelectedArtist.AId)
        {
            return;
        }

        var req = new SongArtist() { Id = SelectedArtist.AId };
        HttpResponseMessage res1 = await _client.PostAsJsonAsync("Library/GetSongArtist", req);
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ResGetSongArtist>())!;
            var artistAlias = content.SongArtists.First(x => x.Titles.Any(y => y.LatinTitle == SelectedArtist.AALatinAlias && ((y.NonLatinTitle == null && SelectedArtist.AANonLatinAlias == "") || (y.NonLatinTitle == SelectedArtist.AANonLatinAlias))));
            artistAlias.Titles = artistAlias.Titles.Where(y => y.LatinTitle == SelectedArtist.AALatinAlias && ((y.NonLatinTitle == null && SelectedArtist.AANonLatinAlias == "") || (y.NonLatinTitle == SelectedArtist.AANonLatinAlias))).ToList();

            ClientState.ArtistsCache[artistAlias.Id] = artistAlias;
            Artist.ArtistArtists.Add(new ArtistArtist { source = Artist.Id, target = artistAlias.Id });
        }

        await _autocompleteAComponentRef.ClearInputField();
        await CallStateHasChanged();
    }

    private async Task RemoveArtistArtist(ArtistArtist arar)
    {
        Artist.ArtistArtists.Remove(arar);
        await CallStateHasChanged();
    }

    private async Task SeedFromVndb(string value)
    {
        VndbSeederInputText = value;
        string vndbId = value.ToVndbId();
        if (!vndbId.StartsWith("s") || vndbId.Length < 2 || !int.TryParse(vndbId[1..], out _))
        {
            VndbSeederInputText = "Invalid input.";
            return;
        }

        var artist = await VndbMethods.GetStaff(vndbId);
        if (artist == null)
        {
            VndbSeederInputText = "Error fetching information.";
            return;
        }

        artist.Links = artist.Links.Where(x => x.Type != SongArtistLinkType.Unknown).ToList();
        Artist = artist;
    }

    private async Task SeedFromMusicBrainz(string value)
    {
        MusicBrainzSeederInputText = value;
        if (!Guid.TryParse(value.Replace("https://musicbrainz.org/artist/", "").Replace("/", ""), out var guid))
        {
            MusicBrainzSeederInputText = "Invalid input.";
            return;
        }

        var mbArtist = await MBApi.GetArtist(ClientState.ExternalClient, guid);
        if (mbArtist == null)
        {
            MusicBrainzSeederInputText = "Error fetching information.";
            return;
        }

        const string lang = "ja"; // todo? fetch from mb area
        var artist = new SongArtist
        {
            PrimaryLanguage = lang,
            Links = new List<SongArtistLink>()
            {
                new() { Url = $"https://musicbrainz.org/artist/{guid}", Type = SongArtistLinkType.MusicBrainzArtist, }
            },
            Titles = new List<Title>()
            {
                new()
                {
                    LatinTitle = mbArtist.sortname,
                    NonLatinTitle = mbArtist.name == mbArtist.sortname ? null : mbArtist.name,
                    Language = lang,
                    IsMainTitle = true
                },
            },
        };
        var song = new Song() { Artists = new List<SongArtist>() { artist } };
        await MusicBrainzMethods.ProcessMBRelations(song, mbArtist.relations, _client, ClientState.MBArtistDict);
        artist.Links = artist.Links.Where(x => x.Type != SongArtistLinkType.Unknown).ToList();
        Artist = artist;
    }

    private async Task Onclick_DeleteAAFromDb(int aId, int aaId)
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm",
            "Songs linked to this alias will be transferred over to the primary alias. This action is IRREVERSIBLE. Are you sure you want to delete this alias?");
        if (!confirmed)
        {
            return;
        }

        var req = new SongArtist() { Id = aId, Titles = new List<Title>() { new() { ArtistAliasId = aaId } } };
        HttpResponseMessage res = await _client.PostAsJsonAsync("Mod/DeleteArtistAlias", req);
        if (res.IsSuccessStatusCode)
        {
            Artist.Titles.RemoveAll(x => x.ArtistAliasId == aaId);
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("alert",
                $"Error: {res.StatusCode:D} {res.StatusCode} {await res.Content.ReadAsStringAsync()}");
        }
    }
}
