@using System.Collections.Generic;
@using System.Linq;
@using EMQ.Shared.Core
@using EMQ.Shared.Quiz.Entities.Concrete

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-2 mb-2">
                <label for="filterLogic" class="form-label">Combine Filters:</label>
                <select class="form-select form-select-sm" id="filterLogic" @bind="UseAndString" @bind:after="DirtyFilters">
                    <option value="True">AND (All)</option>
                    <option value="False">OR (Any)</option>
                </select>
            </div>

            <div class="col-md-3 mb-2">
                <label class="form-label">Media Availability:</label>
                <div class="d-flex gap-2">
                    <div class="flex-grow-1">
                        <select class="form-select form-select-sm" @bind="VideoStatus" @bind:after="DirtyFilters">
                            <option value="Any">Video: Any</option>
                            <option value="Present">Video: Present</option>
                            <option value="Missing">Video: Missing</option>
                        </select>
                    </div>
                    <div class="flex-grow-1">
                        <select class="form-select form-select-sm" @bind="SoundStatus" @bind:after="DirtyFilters">
                            <option value="Any">Sound: Any</option>
                            <option value="Present">Sound: Present</option>
                            <option value="Missing">Sound: Missing</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-md-2 mb-2">
                <label class="form-label">My Vote Status:</label>
                <select class="form-select form-select-sm" @bind="VoteStatus" @bind:after="DirtyFilters">
                    <option value="Any">Any</option>
                    <option value="Voted">Voted</option>
                    <option value="Unvoted">Unvoted</option>
                </select>
            </div>

            <div class="col-md-2 mb-2">
                <label class="form-label">Link Lineage:</label>
                <select class="form-select form-select-sm" @bind="LineageStatus" @bind:after="DirtyFilters">
                    <option value="Any">Any</option>
                    @foreach (var lineage in Enum.GetValues<SongLinkLineage>())
                    {
                        <option value="@lineage.ToString()">@lineage.GetDescription()</option>
                    }
                </select>
            </div>

            <button class="btn btn-secondary col-md-1" @onclick="ResetFilters">Reset filters</button>

            <br/>

            <div class="col-md-5 mb-2">
                <label class="form-label">Missing Artist Roles:</label>
                <div class="d-flex flex-wrap gap-1">
                    @foreach ((SongArtistRole key, bool _) in MissingArtistRoles)
                    {
                        <div class="form-check form-check-inline me-1">
                            <input class="form-check-input" type="checkbox"
                                   id="missing-artist-@key"
                                   @bind="@(MissingArtistRoles[key])"
                                   @bind:after="DirtyFilters"/>
                            <label class="form-check-label small" for="missing-artist-@key">
                                @key.GetDescription()
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row mt-2">
            <div class="col-12">
                <label class="form-label">Missing External Links:</label>
                <div class="d-flex flex-wrap gap-1">
                    @foreach ((SongLinkType key, bool _) in MissingExternalLinks)
                    {
                        <div class="form-check form-check-inline me-1">
                            <input class="form-check-input" type="checkbox"
                                   id="missing-link-@key"
                                   @bind="@(MissingExternalLinks[key])"
                                   @bind:after="DirtyFilters"/>
                            <label class="form-check-label small" for="missing-link-@key">
                                @key.GetDescription()
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private bool UseAnd
    {
        get => UseAndString == "True";
        set => UseAndString = value.ToString();
    }

    private string UseAndString { get; set; } = "True";

    private bool ApplyNot { get; set; }

    private string VideoStatus { get; set; } = "Any";

    private string SoundStatus { get; set; } = "Any";

    private string VoteStatus { get; set; } = "Any";

    private string LineageStatus { get; set; } = "Any";

    private Dictionary<SongArtistRole, bool> MissingArtistRoles { get; set; } =
        Enum.GetValues<SongArtistRole>().Where(x => x != SongArtistRole.Unknown).ToDictionary(x => x, _ => false);

    private Dictionary<SongLinkType, bool> MissingExternalLinks { get; set; } =
        Enum.GetValues<SongLinkType>().Where(x => x != SongLinkType.Unknown).ToDictionary(x => x, _ => false);

    [Parameter]
    public Func<Task>? ParentStateHasChangedCallback { get; set; }

    private void DirtyFilters()
    {
        ParentStateHasChangedCallback?.Invoke();
    }

    // todo? make static
    public IEnumerable<Song> ApplyFilters(IEnumerable<Song> songs)
    {
        var activeArtistRoles = MissingArtistRoles.Where(x => x.Value).Select(x => x.Key).ToHashSet();
        var activeExternalLinks = MissingExternalLinks.Where(x => x.Value).Select(x => x.Key).ToHashSet();
        bool checkVideo = VideoStatus != "Any";
        bool checkSound = SoundStatus != "Any";
        bool checkVote = VoteStatus != "Any";
        bool checkLineage = LineageStatus != "Any";
        bool checkArtistRoles = activeArtistRoles.Any();
        bool checkExternalLinks = activeExternalLinks.Any();

        bool hasActiveFilters = checkVideo || checkSound || checkVote || checkLineage || checkArtistRoles || checkExternalLinks;
        if (!hasActiveFilters)
        {
            return songs;
        }

        var parsedLineageStatus = Enum.Parse<SongLinkLineage>(LineageStatus);
        return songs.Where(song =>
        {
            if (checkVideo)
            {
                bool hasVideo = song.Links.Any(x => x.IsVideo);
                bool videoMatches = VideoStatus == "Missing" ? !hasVideo : hasVideo;
                bool result = ApplyNot ? !videoMatches : videoMatches;
                switch (UseAnd)
                {
                    case true when !result:
                        return false;
                    case false when result:
                        return true;
                }
            }

            if (checkSound)
            {
                bool hasSound = song.Links.Any(x => !x.IsVideo && x.IsFileLink);
                bool soundMatches = SoundStatus == "Missing" ? !hasSound : hasSound;
                bool result = ApplyNot ? !soundMatches : soundMatches;
                switch (UseAnd)
                {
                    case true when !result:
                        return false;
                    case false when result:
                        return true;
                }
            }

            if (checkVote)
            {
                bool isVoted = ClientState.MusicVotes.ContainsKey(song.Id);
                bool voteMatches = VoteStatus == "Voted" ? isVoted : !isVoted;
                bool result = ApplyNot ? !voteMatches : voteMatches;
                switch (UseAnd)
                {
                    case true when !result:
                        return false;
                    case false when result:
                        return true;
                }
            }

            if (checkLineage)
            {
                bool isUnknown = parsedLineageStatus == SongLinkLineage.Unknown;
                bool lineageMatches = isUnknown
                    ? song.Links.Any(x => x.IsFileLink && x.Lineage == parsedLineageStatus)
                    : song.Links.Any(x => x.IsFileLink && x.Lineage.HasFlag(parsedLineageStatus));
                bool result = ApplyNot ? !lineageMatches : lineageMatches;
                switch (UseAnd)
                {
                    case true when !result:
                        return false;
                    case false when result:
                        return true;
                }
            }

            if (checkArtistRoles)
            {
                foreach (SongArtistRole key in activeArtistRoles)
                {
                    bool hasRole = song.Artists.Any(x => x.Roles.Contains(key));
                    bool result = ApplyNot ? hasRole : !hasRole;
                    switch (UseAnd)
                    {
                        case true when !result:
                            return false;
                        case false when result:
                            return true;
                    }
                }
            }

            if (checkExternalLinks)
            {
                foreach (SongLinkType key in activeExternalLinks)
                {
                    bool hasLink = song.Links.Any(x => x.Type == key);
                    bool result = ApplyNot ? hasLink : !hasLink;
                    switch (UseAnd)
                    {
                        case true when !result:
                            return false;
                        case false when result:
                            return true;
                    }
                }
            }

            return UseAnd;
        });
    }

    private void ResetFilters()
    {
        UseAnd = true;
        ApplyNot = false;
        VideoStatus = "Any";
        SoundStatus = "Any";
        VoteStatus = "Any";
        LineageStatus = "Any";

        foreach ((SongArtistRole key, bool _) in MissingArtistRoles)
        {
            MissingArtistRoles[key] = false;
        }

        foreach ((SongLinkType key, bool _) in MissingExternalLinks)
        {
            MissingExternalLinks[key] = false;
        }

        ParentStateHasChangedCallback?.Invoke();
    }

}
