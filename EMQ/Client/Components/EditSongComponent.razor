@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Library.Entities.Concrete
@using EMQ.Client.Pages
@using System.Linq
@using System.Text
@using System.Text.RegularExpressions
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Shared.Core.SharedDbEntities
@using EMQ.Shared.MusicBrainz.Business
@inject HttpClient _client

<div style="border: 1px black solid; padding: 10px; max-width: 1400px;">
@if (IsNew)
{
    <details style="padding: 5px;">
        <summary>Guidelines for adding songs</summary>
        <h5>What can be added</h5>
        <ol>
            <li>Follow VNDB's guidelines on romanization.</li>
            <li>Currently we're only accepting non-BGM Non-canon song submissions. Canon songs should be added to VNDB instead.</li>
            <li>Currently it's possible to add songs only to sources already existing in the database.</li>
            <li>Do not add Non-canon songs if you don't have a good quality source file for them.</li>
            <li>All Official submissions are accepted.</li>
            <li>Unofficial submissions may be rejected if they are too obscure/low-quality.</li>

            <br/>
            <h6>Extra restrictions for Unofficial submissions:</h6>
            <ol>
                <li>DO NOT SUBMIT AI OR VTUBER COVERS.</li>
                <li>DO NOT SUBMIT COVERS BY NON-JAPANESE PEOPLE.</li>
                <li>DO NOT SUBMIT NON-ORIGINAL LANGUAGE COVERS (unless the target language is Japanese).</li>
            </ol>
        </ol>
        <br/>

        <h5>Types</h5>
        <ul>
            @foreach (var type in Enum.GetValues<SongType>())
            {
                @if (type != SongType.Unknown)
                {
                    <li>
                        @type.GetDescription():
                        <br/>
                        @type.GetDisplayName()
                    </li>
                    <br/>
                }
            }
        </ul>

        <h5>Attributes</h5>
        <ul>
            @foreach (var attr in Enum.GetValues<SongAttributes>())
            {
                @if (attr != SongAttributes.None)
                {
                    <li>
                        @attr.GetDescription():
                        <br/>
                        @attr.GetDisplayName()
                    </li>
                    <br/>
                }
            }
        </ul>

        <h5>Examples</h5>
        <ul>
            <li>
                <a href="https://vgmdb.net/album/89086" target="_blank">https://vgmdb.net/album/89086</a>
                <br/>
                The first disc of this album contains covers of some popular VN songs.
                <br/>
                They can be added to their respective sources, with the artist as Denkishiki Karen Ongaku Shuudan and attributes as Non-canon and Unofficial.
            </li>
            <br/>
            <li>
                <a href="https://vgmdb.net/album/17301" target="_blank">https://vgmdb.net/album/17301</a>
                <br/>
                The first track of this album "insensible ～ヒカル＆ナギ Ver.～" is a cover of "insensible" that plays in "Peace@Pieces".
                <br/>
                It does not play in the VN, so it should be marked as Non-canon, however it was released by the original developer of the VN, so it should NOT be marked as Unofficial.
            </li>
        </ul>
        <br/>
    </details>
}

@if (IsNew)
{
    <details style="padding: 5px;">
        <summary>MusicBrainz seeder</summary>
        <p>Enter a MusicBrainz release id or URL to fill information automatically.</p>
        <input type="text" @bind:get="@MusicBrainzSeederInputText" @bind:set="@SeedFromMusicBrainz" style="width: 540px;"/>
        <br/>
        <br/>

        @if (MBTracks.Any())
        {
            <span> Displaying track @(MBTracksIndex + 1)/@(MBTracks.Count)</span>
            <br/>
            <button type="button" class="btn btn-primary" @onclick="@(async () => await SetMBTracksIndex(MBTracksIndex - 10))">Prev 10</button>
            <button type="button" class="btn btn-primary" @onclick="@(async () => await SetMBTracksIndex(MBTracksIndex - 1))">Prev</button>
            <button type="button" class="btn btn-primary" @onclick="@(async () => await SetMBTracksIndex(MBTracksIndex + 1))">Next</button>
            <button type="button" class="btn btn-primary" @onclick="@(async () => await SetMBTracksIndex(MBTracksIndex + 10))">Next 10</button>
        }
    </details>
    <br/>
}

<div style="display: flex; flex-wrap: wrap">
    <div style="border: 1px black solid; padding: 10px; width: 970px;">
        <div style="border: 1px black solid; padding: 10px;">
            <h5>Sources</h5>
            @if (!IsNew && Song.DataSource != DataSourceKind.VNDB)
            {
                <button type="button" class="btn btn-primary" @onclick="CopySources">Copy sources</button>
                <button type="button" class="btn btn-primary" @onclick="PasteSources">Paste sources (overwrite)</button>
            }

            <GuessInputComponent @ref="_guessInputComponentRef"
                                 Placeholder="Add source"
                                 IsDisabled="@(Song.DataSource == DataSourceKind.VNDB)"
                                 IsQuizPage="false"
                                 @bind-GuessT="@SelectedMusicSourceTitle"
                                 Callback="SelectedResultChangedMst">
            </GuessInputComponent>
            @foreach (var source in Song.Sources)
            {
                <div style="border: 1px black solid; padding: 10px;">
                    <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => { if (Song.DataSource != DataSourceKind.VNDB) { await RemoveSongSource(source); } })">
                        🗑
                    </span>
                    @source.ToString()
                    <div>
                        @foreach (var key in Enum.GetValues<SongSourceSongType>())
                        {
                            if (key is not (SongSourceSongType.Unknown or SongSourceSongType.Random))
                            {
                                string id = $"checkbox-SSST-{source.Id}-{key}";
                                <input type="checkbox" id="@id" class="form-check-input" disabled="@(!ClientUtils.HasAdminPerms())"
                                       @bind:get="@source.SongTypes.Contains(key)"
                                       @bind:set="@(new Func<bool, Task>(async value => await OnSSSTCheckboxClick(value, key, source)))"
                                       @bind:event="oninput"
                                       style="margin: 5px"/>
                                <label for="@id">@key.ToString()</label>
                                <br/>
                            }
                        }
                    </div>
                </div>
            }
        </div>
        <br/>

        <div style="border: 1px black solid; padding: 10px;">
            <h5>Artists</h5>
            @if (!IsNew)
            {
                <button type="button" class="btn btn-primary" @onclick="CopyCAL">Copy C/A/L</button>
                <button type="button" class="btn btn-primary" @onclick="PasteCAL">Paste C/A/L</button>
            }

            <AutocompleteAComponent @ref="_autocompleteAComponentRef"
                                    Placeholder="Add artist"
                                    IsDisabled="false"
                                    IsQuizPage="false"
                                    @bind-Guess="@SelectedArtist"
                                    Callback="SelectedResultChangedA">
            </AutocompleteAComponent>
            @foreach (var artist in Song.Artists)
            {
                <div style="border: 1px black solid; padding: 10px;">
                    <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => { if (Song.DataSource == DataSourceKind.EMQ || !(artist.Roles.Contains(SongArtistRole.Unknown) || artist.Roles.Contains(SongArtistRole.Vocals))) { await RemoveArtist(artist); } })">
                        🗑
                    </span>
                    @artist.ToString()

                    <div>
                        @foreach (var key in Enum.GetValues<SongArtistRole>())
                        {
                            @if (key != SongArtistRole.Unknown)
                            {
                                string id = $"checkbox-ArtistRole-{artist.Id}-{key}";
                                <input type="checkbox" id="@id" class="form-check-input" disabled="@(Song.DataSource != DataSourceKind.EMQ && key is (SongArtistRole.Unknown or SongArtistRole.Vocals))"
                                       @bind:get="@artist.Roles.Contains(key)"
                                       @bind:set="@(new Func<bool, Task>(async value => await OnArtistRoleCheckboxClick(value, key, artist)))"
                                       @bind:event="oninput"
                                       style="margin: 5px"/>
                                <label for="@id">@key.ToString()</label>
                                <br/>
                            }
                        }
                    </div>
                </div>
            }
        </div>
        <br/>

        <div style="border: 1px black solid; padding: 10px;">
            <h5>Song title</h5>
            <label style="padding: 4px;">
                <input type="text" @bind="Song.Titles.Single().LatinTitle" style="width: 700px;" disabled="@(Song.DataSource != DataSourceKind.EMQ)"/>
                Latin title
            </label>
            <br/>
            <label style="padding: 4px;">
                <input type="text" @bind="Song.Titles.Single().NonLatinTitle" style="width: 700px;" disabled="@(Song.DataSource != DataSourceKind.EMQ)"/>
                Non-Latin title
            </label>
        </div>
        <br/>

        <div style="border: 1px black solid; padding: 10px;">
            <h5>External links</h5>
            <details>
                <summary>
                    Allowed link types
                </summary>
                <ul>
                    @foreach ((SongLinkType key, Regex value) in RegexPatterns.SongLinkRegex)
                    {
                        if (key != SongLinkType.Unknown)
                        {
                            <li>
                                @key.GetDescription(): @value.ToString()
                            </li>
                        }
                    }
                </ul>
            </details>
            <table>
                @foreach (var link in Song.Links.Where(x => !x.IsFileLink))
                {
                    <tr>
                        <td>
                            <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(_ => Song.Links.Remove(link))">🗑</span>
                        </td>
                        <td>
                            <a href="@link.Url" target="_blank" style="margin-right: 4px;">@link.Type.GetDescription()</a>
                        </td>
                        <td>
                            @link.Url
                        </td>
                    </tr>
                }
            </table>
            <input type="text" placeholder="Add URL..." @bind:get="@ExternalLinksInputText" @bind:set="@AddNewExternalLink" @bind:event="oninput">
        </div>
        <br/>

        @if (IsNew)
        {
            <details>
                <summary>Persist after submitting</summary>
                @foreach (var key in PersistAfterSubmittingDict.Keys.ToList())
                {
                    if (true)
                    {
                        string id = $"PersistAfterSubmittingDict-{key}";
                        <input type="checkbox" id="@id" class="form-check-input" @bind="@(PersistAfterSubmittingDict[key])" style="margin: 5px"/>
                        <label for="@id">@key</label>
                        <br/>
                    }
                }
            </details>
        }

        @if (ClientUtils.HasAdminPerms())
        {
            <label style="padding: 4px;">
                <select style="margin: 5px" @bind="Song.DataSource">
                    @foreach (var dataSourceKind in Enum.GetValues<DataSourceKind>())
                    {
                        @if (dataSourceKind != DataSourceKind.Unknown)
                        {
                            <option value="@dataSourceKind">@dataSourceKind</option>
                        }
                    }
                </select>
                Data source
            </label>
            <br/>
        }

        <textarea id="note_user"
                      rows="2"
                      cols="34"
                      maxlength="780"
                      placeholder="Summarize the changes you have made, including links to source(s)."
                      @bind="NoteUser">
            </textarea>
        <br/>

        <button type="button" class="btn btn-primary" disabled="@(!Ready)" @onclick="OnclickSubmit">Submit</button>
        <ul>
            @foreach (string validationMessage in ValidationMessages)
            {
                string color = validationMessage.StartsWith("Added") ? "green" : "red";
                <li style="color: @color;">@validationMessage</li>
            }
        </ul>
        <br/>
    </div>

    <div style="border: 1px black solid; padding: 10px;">
        <div style="margin: 16px; width: 330px; min-height:200px;">
            <h4>Preview</h4>
            <SongInfoCardComponent @ref="_songInfoCardComponentRef" Song="@Song" IsEditing="true"></SongInfoCardComponent>
        </div>
        <br/>
    </div>
</div>
</div>

@code {

    [Parameter]
    public Song Song { get; set; } = null!;

    [Parameter]
    public bool IsNew { get; set; }

    [Parameter]
    public GenericModal editSongModalRef { get; set; } = null!;

    private SongInfoCardComponent _songInfoCardComponentRef = null!;

    private GuessInputComponent _guessInputComponentRef = null!;

    private AutocompleteAComponent _autocompleteAComponentRef = null!;

    public AutocompleteMst? SelectedMusicSourceTitle { get; set; }

    public AutocompleteA? SelectedArtist { get; set; }

    public List<string> ValidationMessages { get; } = new();

    private static Song GetNewSong => new() { DataSource = DataSourceKind.EMQ, Type = SongType.Standard, Titles = new List<Title> { new() { Language = "ja", IsMainTitle = true } } }; // todo lang

    public string NoteUser { get; set; } = "";

    public bool Ready { get; set; } = true;

    public string ExternalLinksInputText { get; set; } = "";

    public Dictionary<string, bool> PersistAfterSubmittingDict { get; } = new()
    {
        {
            "Sources", false
        },
        {
            "Artists", false
        },
        {
            "Song title", false
        },
    };

    private string MusicBrainzSeederInputText { get; set; } = "";

    private List<MBTrack> MBTracks { get; } = new();

    private int MBTracksIndex { get; set; } = -1;

    protected override void OnInitialized()
    {
        if (IsNew)
        {
            Song = GetNewSong;
        }
    }

    private async Task CallStateHasChanged()
    {
        StateHasChanged();
    // await _songInfoCardComponentRef.CallStateHasChanged();
    }

    private async Task SelectedResultChangedMst()
    {
        if (SelectedMusicSourceTitle is null)
        {
            return;
        }

        if (Song.Sources.Any(x => x.Id == SelectedMusicSourceTitle.MSId))
        {
            return;
        }

        HttpResponseMessage res1 = await _client.PostAsJsonAsync("Library/GetSongSource", new SongSource { Id = SelectedMusicSourceTitle.MSId });
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ResGetSongSource>())!;
            content.SongSource.MusicIds.Clear();
            content.SongSource.SongTypes = Song.DataSource == DataSourceKind.MusicBrainz
                ? new List<SongSourceSongType> { SongSourceSongType.BGM }
                : new List<SongSourceSongType> { SongSourceSongType.Other };

            Song.Sources.Add(content.SongSource);
        }

        await _guessInputComponentRef.ClearInputField();
        await CallStateHasChanged();
    }

    private async Task RemoveSongSource(SongSource source)
    {
        Song.Sources.Remove(source);
        await CallStateHasChanged();
    }

    private async Task OnSSSTCheckboxClick(bool value, SongSourceSongType key, SongSource songSource)
    {
        if (value)
        {
            songSource.SongTypes.Add(key);
        }
        else
        {
            songSource.SongTypes.Remove(key);
        }

        await CallStateHasChanged();
    }

    private async Task OnArtistRoleCheckboxClick(bool value, SongArtistRole key, SongArtist songArtist)
    {
        if (value)
        {
            songArtist.Roles.Add(key);
        }
        else
        {
            songArtist.Roles.Remove(key);
        }

        await CallStateHasChanged();
    }

    private async Task RemoveArtist(SongArtist artist)
    {
        Song.Artists.Remove(artist);
        await CallStateHasChanged();
    }

    private async Task SelectedResultChangedA()
    {
        await MusicBrainzMethods.AddArtist(Song, SelectedArtist, null, _client);
        await _autocompleteAComponentRef.ClearInputField();
        await CallStateHasChanged();
    }

    private async Task OnclickSubmit()
    {
        if (Ready)
        {
            Ready = false;
            StateHasChanged();
            bool isValid = ValidateSong(Song, IsNew);
            if (isValid)
            {
                var req = new ReqEditSong(Song, IsNew, NoteUser);
                var res = await _client.PostAsJsonAsync("Library/EditSong", req);
                if (res.IsSuccessStatusCode)
                {
                    ValidationMessages.Add("Added to the edit queue.");
                    if (IsNew)
                    {
                        var oldSources = Song.Sources;
                        var oldArtists = Song.Artists;
                        var oldTitles = Song.Titles;

                        Song = GetNewSong;
                        if (PersistAfterSubmittingDict["Sources"])
                        {
                            Song.Sources = oldSources;
                        }

                        if (PersistAfterSubmittingDict["Artists"])
                        {
                            Song.Artists = oldArtists;
                        }

                        if (PersistAfterSubmittingDict["Song title"])
                        {
                            Song.Titles = oldTitles;
                        }

                        NoteUser = "";
                        await SetMBTracksIndex(MBTracksIndex + 1); // returns early if invalid index
                    }
                    else
                    {
                        StateHasChanged();
                        await Task.Delay(TimeSpan.FromMilliseconds(500));
                        editSongModalRef.Hide();
                    }
                }
                else
                {
                    ValidationMessages.Add($"Error: {res.StatusCode:D} {res.StatusCode} {await res.Content.ReadAsStringAsync()}");
                }
            }
            Ready = true;
        }
    }

    public bool ValidateSong(Song song, bool isNew)
    {
        ValidationMessages.Clear();
        bool isValid = true;
        bool isBgm = song.IsBGM;

        if (!song.Sources.Any())
        {
            ValidationMessages.Add("There must be at least one source.");
            isValid = false;
        }
        else
        {
            if (song.Sources.Any(x => !x.SongTypes.Any()))
            {
                ValidationMessages.Add("All sources must have at least one song source song type.");
                isValid = false;
            }
            else
            {
                if (isNew && !isBgm && !song.Sources.All(x => x.SongTypes.Contains(SongSourceSongType.Other)))
                {
                    ValidationMessages.Add("It is only possible to add Other songs at this time.");
                    isValid = false;
                }
            }
        }

        if (!song.Artists.Any())
        {
            ValidationMessages.Add("There must be at least one artist.");
            isValid = false;
        }
        else
        {
            if (song.Artists.Any(x => !x.Roles.Any()))
            {
                ValidationMessages.Add("All artists must have at least one role.");
                isValid = false;
            }
            else
            {
                if (isNew && !isBgm && !song.Artists.Any(x => x.Roles.Contains(SongArtistRole.Vocals)))
                {
                    ValidationMessages.Add("At least one artist must have the Vocals role.");
                    isValid = false;
                }
            }

            if (!isBgm) // songArtist.Id will be 0 in MusicBrainzImporter
            {
    // todo enforce one artist_alias per song
                var seenArtists = new HashSet<int>();
                foreach (SongArtist songArtist in song.Artists)
                {
                    if (!seenArtists.Add(songArtist.Id))
                    {
                        ValidationMessages.Add("An artist may only be credited once per song.");
                        isValid = false;
                    }
                }
            }
        }

        if (string.IsNullOrWhiteSpace(song.Titles.Single().LatinTitle))
        {
            ValidationMessages.Add("Latin title must not be empty.");
            isValid = false;
        }

        if (song.Type <= SongType.Unknown)
        {
            ValidationMessages.Add("Songs must have at least one type.");
            isValid = false;
        }

        if (isNew && !isBgm && !song.Attributes.HasFlag(SongAttributes.NonCanon))
        {
            ValidationMessages.Add("If a song is Canon, it should be added to VNDB instead.");
            isValid = false;
        }

        if (song.Attributes.HasFlag(SongAttributes.Unofficial) && !song.Attributes.HasFlag(SongAttributes.NonCanon))
        {
            ValidationMessages.Add("If a song is Unofficial, it must also be Non-canon.");
            isValid = false;
        }

        if (song.DataSource == DataSourceKind.VNDB &&
            (song.Attributes.HasFlag(SongAttributes.NonCanon) || song.Attributes.HasFlag(SongAttributes.Unofficial)))
        {
            ValidationMessages.Add("VNDB songs cannot be Non-canon or Unofficial. Remove the song from VNDB and report it on EMQ if that is the case.");
            isValid = false;
        }

    // todo important validate link regex
        if (song.Links.Any(x => x.Type == SongLinkType.Unknown))
        {
            ValidationMessages.Add("Unknown link types are not allowed.");
            isValid = false;
        }

        return isValid;
    }

    // todo convert all links in db to end with / (except anison.info)
    private async Task AddNewExternalLink(string value)
    {
        ExternalLinksInputText = value;
        if (Song.Links.Any(x => x.Url == value))
        {
            return;
        }

        if (!value.EndsWith('/'))
        {
            value += '/';
        }

        foreach ((SongLinkType key, Regex regex) in RegexPatterns.SongLinkRegex)
        {
            if (Song.Links.Any(x => x.Type == key))
            {
                continue;
            }

            string str = value;
            if (key == SongLinkType.AnisonInfoSong)
            {
    // anison.info links can't end with /
                str = JsonSerializer.Deserialize<string>(JsonSerializer.Serialize(value))!.TrimEnd('/');

    // support anison javascript links
                var javascriptLinkMatch = RegexPatterns.AnisonJavascriptLinkRegex.Match(str);
                if (javascriptLinkMatch.Success)
                {
                    str = javascriptLinkMatch.Groups[1].Value switch
                    {
                        "song" => $"http://anison.info/data/song/{javascriptLinkMatch.Groups[2].Value}.html",
                        _ => str
                        };
                    value = str;
                }
            }

            if (regex.IsMatch(str))
            {
                Song.Links.Add(new SongLink { Type = key, Url = value.TrimEnd('/') });
                ExternalLinksInputText = "";
            }
        }

        StateHasChanged();
    }

    private void CopyCAL()
    {
        var copy = JsonSerializer.Deserialize<SongArtist[]>(JsonSerializer.Serialize(
            Song.Artists.Where(x => x.Roles.Any(y => y is SongArtistRole.Composer or SongArtistRole.Arranger or SongArtistRole.Lyricist))))!;
        foreach (SongArtist songArtist in copy)
        {
            songArtist.Roles.Remove(SongArtistRole.Vocals);
        }

        ClientState.CopiedCAL = copy;
    }

    private void PasteCAL()
    {
        foreach (SongArtist copied in ClientState.CopiedCAL)
        {
            var current = Song.Artists.FirstOrDefault(x => x.Id == copied.Id);
            if (current != null)
            {
                current.Roles = current.Roles.Union(copied.Roles).ToList();
            }
            else
            {
                Song.Artists.Add(copied);
            }
        }
    }

    private void CopySources()
    {
        var copy = JsonSerializer.Deserialize<SongSource[]>(JsonSerializer.Serialize(Song.Sources))!;
        ClientState.CopiedSources = copy;
    }

    private void PasteSources()
    {
        Song.Sources = new List<SongSource>();
        foreach (SongSource copied in ClientState.CopiedSources)
        {
            copied.SongTypes = Song.DataSource == DataSourceKind.MusicBrainz
                ? new List<SongSourceSongType> { SongSourceSongType.BGM }
                : new List<SongSourceSongType> { SongSourceSongType.Other };

            Song.Sources.Add(copied);
        }
    }

    private async Task SeedFromMusicBrainz(string value)
    {
        MusicBrainzSeederInputText = value;
        if (!Guid.TryParse(value.Replace("https://musicbrainz.org/release/", "").Replace("/", ""), out var guid))
        {
            MusicBrainzSeederInputText = "Invalid input.";
            return;
        }

        var mbRelease = await MBApi.GetRelease(ClientState.ExternalClient, guid);
        if (mbRelease == null)
        {
            MusicBrainzSeederInputText = "Error fetching release information.";
            return;
        }

        if (!ClientState.MBArtistDict.Any())
        {
            HttpResponseMessage resMBArtists = await _client.GetAsync("Library/GetMBArtists");
            if (resMBArtists.IsSuccessStatusCode)
            {
                ClientState.MBArtistDict = (await resMBArtists.Content.ReadFromJsonAsync<Dictionary<string, int>>())!;
            }
        }

        MBTracks.Clear();
        foreach (MBMedium mbMedium in mbRelease.media.OrderBy(x => x.position))
        {
            foreach (MBTrack mbTrack in mbMedium.tracks.OrderBy(x => x.position))
            {
                MBTracks.Add(mbTrack);
            }
        }

        await SetMBTracksIndex(0);
    }

    private async Task SetMBTracksIndex(int newIndex)
    {
        if (newIndex < 0 || newIndex >= MBTracks.Count)
        {
            return;
        }

    // todo cache recording api results
        MBTracksIndex = newIndex;
        var mbTrack = MBTracks[MBTracksIndex];
        var mbRecording = await MBApi.GetRecording(ClientState.ExternalClient, new Guid(mbTrack.recording!.id));
        if (mbRecording == null)
        {
            MusicBrainzSeederInputText = "Error fetching recording information.";
            return;
        }

        var oldSources = Song.Sources;
        Song = GetNewSong;
        if (PersistAfterSubmittingDict["Sources"])
        {
            Song.Sources = oldSources;
        }

        await _autocompleteAComponentRef.ClearInputField();
        _autocompleteAComponentRef.CallClose();

        await MusicBrainzMethods.ProcessMBRelations(Song, mbRecording.relations, _client, ClientState.MBArtistDict);
        string joinedArtistCredit = "";
        foreach (MbArtistCredit mbArtistCredit in mbRecording.artistcredit)
        {
            if (ClientState.MBArtistDict.TryGetValue(mbArtistCredit.artist.id, out int aid))
            {
                await MusicBrainzMethods.AddArtist(Song, new AutocompleteA { AId = aid }, null, _client);
            }
            else
            {
                joinedArtistCredit += $"{mbArtistCredit.name}{mbArtistCredit.joinphrase}";
            }
        }

        if (joinedArtistCredit != "")
        {
            await _autocompleteAComponentRef.AutocompleteComponent.OnSetInputSearch(joinedArtistCredit);
        }

        var firstTitle = Song.Titles.First();
        if (Ascii.IsValid(mbTrack.title.AsSpan())) // not sure whether using track or recording title is better here
        {
            firstTitle.LatinTitle = mbTrack.title;
            firstTitle.NonLatinTitle = "";
        }
        else
        {
            firstTitle.LatinTitle = "";
            firstTitle.NonLatinTitle = mbTrack.title;
        }

        Song.Links = new List<SongLink>
        {
            new() { Url = $"https://musicbrainz.org/recording/{mbRecording.id}", Type = SongLinkType.MusicBrainzRecording }
        };
    }
}
