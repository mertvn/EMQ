@using EMQ.Shared.Core.UI
@using EMQ.Shared.Core
@inject IJSRuntime _jsRuntime
@typeparam TValue

<div class="autocomplete" style="display: flex; justify-content: flex-end; align-items: center;">
    @if (Answered && !string.IsNullOrEmpty(GuessStr))
    {
        string opacity = string.Equals(GuessStr, SelectedText, StringComparison.OrdinalIgnoreCase) ? "" : "0.5";
        <div style="position: absolute; padding: 7px; background-color: cornflowerblue; opacity: @opacity" tabindex="-1">
            <Blazorise.Tooltip
                Inline="true"
                Text="@GuessStr">
                ✔
            </Blazorise.Tooltip>
        </div>
    }

    <input type="search"
           class="form-control"
           placeholder="@Placeholder"
           disabled="@Disabled"
           @ref="InputRef"
           @bind:get="@SelectedText"
           @bind:set="@(new Func<string, Task>(async value => await OnSetInputSearch(value)))"
           @bind:event="oninput"
           @onkeydown="OnKeyDown"
           @onkeydown:preventDefault="PreventDefault"
           @onfocus="OnFocus"
           @onblur="OnBlur"/>

    <div class="autocomplete-items" tabindex="1"
         style="display: @UiHelpers.Bool2Display(ShowDropdown && CurrentSearchResults.Any()); max-height: @MaxMenuHeight; overflow-x: auto; overflow-y: scroll;">
        @for (int i = 0; i < CurrentSearchResults.Length; i++)
        {
            TValue searchResult = CurrentSearchResults[i];
            int indexCopy = i;
            string divClass = i == CurrentFocus ? "autocomplete-active" : "";
            string divId = $"autocomplete-item-{i}";
            string textField = TextField.Invoke(searchResult);
            string? iconField = ShowIcons ? IconField?.Invoke(searchResult) : null;
            <div id="@divId" class="@divClass" @onclick="@(async args => await Onclick_AutocompleteItem(args, indexCopy))" @onmousedown="@Onmousedown" @onmousedown:preventDefault="true">
                @if (iconField != null)
                {
                    <img src="@iconField" alt="" style="margin-right: 6px; width: 12px; height: 12px;"/>
                }

                @if (HighlightMatch)
                {
                    (int origStart, int origEnd) = AutocompleteHelpers.GetOriginalMatchSpan(textField, SelectedText);
                    string beforeHighlight = "";
                    string highlight = "";
                    string afterHighlight = "";

                    if (origStart >= 0 && origEnd >= origStart)
                    {
                        if (origStart > 0)
                        {
                            beforeHighlight = textField[..origStart];
                        }

                        highlight = textField.Substring(origStart, origEnd - origStart + 1);
                        if (origEnd + 1 < textField.Length)
                        {
                            afterHighlight = textField[(origEnd + 1)..];
                        }
                    }
                    else
                    {
                        beforeHighlight = textField;
                    }

                    // these spans must be on the same line to be displayed correctly
                    <span>@beforeHighlight</span><span style="color: #418eff">@highlight</span><span>@afterHighlight</span>
                }
                else
                {
                    @textField
                }
            </div>
        }
    </div>
</div>
