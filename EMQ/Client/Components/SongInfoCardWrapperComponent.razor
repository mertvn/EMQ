@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Client.Pages
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Library.Entities.Concrete
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

<ReviewComponent @ref="_reviewComponent" CurrentRQs="@(CurrentRQs)" ParentStateHasChangedCallback="@CallStateHasChanged"></ReviewComponent>

@{
    // todo? move
    bool isAdmin = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Admin);
    bool isModerator = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.Moderator);
    bool isDebugMode = ClientState.Preferences.DebugMode;
    bool hasImportSongLinkPerms = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.UploadSongLink);
    bool hasDeleteSongLinkPerms = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session.UserRoleKind, PermissionKind.DeleteSongLink);
}

@if (IsLibraryPage)
{
    <span style="margin: 5px">Count: @VisibleSongsCount</span>
    <br>

    @if (false && isDebugMode && isAdmin)
    {
        <textarea id="textarea_batchSetSubmittedBy"
                         rows="1" cols="20" maxlength="16" placeholder=""
                         @bind="_batchSetSubmittedByText"></textarea>
        <button @onclick="BatchSetSubmittedBy">Batch set submitted_by</button>
    }
}

@if (IsLibraryPage && VisibleSongsCount > 0)
{
    <details style="margin: 5px;">
        <summary>Uploaders</summary>
        <table style="max-width: 350px">
            <tr>
                <th>#</th>
                <th>Username</th>
                <th>Upload count</th>
            </tr>
            @{
                int i = 1;

                Dictionary<string, int> uploaders = new();
                foreach (Song currentSong in CurrentSongs)
                {
                    foreach (SongLink currentSongLink in currentSong.Links.Where(x => x.Type == SongLinkType.Self))
                    {
                        string key = currentSongLink.SubmittedBy!.ToLowerInvariant();
                        if (!uploaders.TryGetValue(key, out _))
                        {
                            uploaders[key] = 0;
                        }

                        uploaders[key] += 1;
                    }
                }

                uploaders = uploaders.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            }
            @foreach ((string username, int count) in uploaders)
            {
                bool isRobot = username == Constants.RobotNameLower;
                <tr>
                    <td>@i</td>
                    <td>
                        @if (isRobot)
                        {
                            <a class="link-primary" href="https://vndb.org/c49124" target="_blank">
                                <span>@Constants.RobotName</span>
                            </a>
                        }
                        else
                        {
                            @username
                        }
                    </td>
                    <td>
                        <b>@count</b>
                    </td>
                </tr>
                i += 1;
            }
        </table>
    </details>
}

<div class="songs d-flex flex-row flex-wrap" style="max-width: 1500px;">
    @{
        VisibleSongsCount = 0;
    }
    @foreach (Song song in CurrentSongs)
    {
        @if (true)
        {
            var songFileLinks = song.Links.Where(x => x.IsFileLink).ToList();
            bool hasVideo = songFileLinks.Any(x => x.IsVideo);
            bool hasSound = songFileLinks.Any(x => !x.IsVideo);

            bool shouldDisplay = LibrarySongFilter switch
            {
                LibrarySongFilterKind.All => true,
                LibrarySongFilterKind.MissingOnlyVideo => hasSound && !hasVideo,
                LibrarySongFilterKind.MissingOnlySound => hasVideo && !hasSound,
                LibrarySongFilterKind.MissingVideo => !hasVideo,
                LibrarySongFilterKind.MissingSound => !hasSound,
                LibrarySongFilterKind.MissingBoth =>  !hasVideo && !hasSound,
                LibrarySongFilterKind.MissingComposer => !song.Artists.Any(x => x.Roles.Contains(SongArtistRole.Composer)),
                LibrarySongFilterKind.MissingArranger => !song.Artists.Any(x => x.Roles.Contains(SongArtistRole.Arranger)),
                LibrarySongFilterKind.MissingLyricist => !song.Artists.Any(x => x.Roles.Contains(SongArtistRole.Lyricist)),
                LibrarySongFilterKind.MissingErogameScapeMusic => !song.Links.Any(x => x.Type == SongLinkType.ErogameScapeMusic),
                LibrarySongFilterKind.Voted => ClientState.MusicVotes.ContainsKey(song.Id),
                LibrarySongFilterKind.Unvoted => !ClientState.MusicVotes.ContainsKey(song.Id),
                _ => throw new ArgumentOutOfRangeException()
                };

            @if (shouldDisplay)
            {
                VisibleSongsCount += 1;

                // if (!_addSongLinkModel.TryGetValue(song.Id, out AddSongLinkModel? _))
                // {
                //     _addSongLinkModel[song.Id] = new AddSongLinkModel();
                // }

                var validUrls = SongLink.FilterSongLinks(songFileLinks).Select(x => x.Url).ToList();

                // Console.WriteLine(JsonSerializer.Serialize(song, Utils.JsoIndented));
                <div class="song card" style="margin: 16px; width: 330px; min-height:200px;" @key="@song.Id">
                    <SongInfoCardComponent Song="@song"/>
                    <div class="songInfoCardSongLinks" style="padding: 16px">
                        <div>
                            Video links:
                            @if (hasVideo)
                            {
                                var videoLinks = songFileLinks.Where(x => x.IsVideo);
                                <ul class="songInfoCardSongLinksVideoLinks">
                                    @foreach (SongLink videoLink in videoLinks)
                                    {
                                        <li class="songInfoCardSongLinksVideoLink">
                                            @if (hasDeleteSongLinkPerms)
                                            {
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteSongLink(song.Id, videoLink.Url))">🗑</span>
                                            }

                                            @if (videoLink.AnalysisRaw != null)
                                            {
                                                string analysisColor = videoLink.AnalysisRaw.Warnings.Any() ? "red" : "green";
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px; color: @analysisColor" @onclick="@(async () => await OnclickAnalysis(videoLink))">?</span>
                                            }

                                            @if (videoLink.LastUnhandledReport != null)
                                            {
                                                var r = videoLink.LastUnhandledReport;
                                                string tooltipText = $"{r.submitted_by} at {r.submitted_on:s} <br/> {r.report_kind.GetDisplayName()} <br/> {r.note_user}";
                                                <Blazorise.Tooltip
                                                    Inline="true"
                                                    Text="@tooltipText">
                                                    <span style="margin-right: 4px;">⚠️</span>
                                                </Blazorise.Tooltip>
                                            }

                                            @if (validUrls.Contains(videoLink.Url))
                                            {
                                                <a href="@videoLink.Url" target="_blank">
                                                    <span style="color: green">✓ @videoLink.Duration.ToString("mm\\:ss")</span>
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@videoLink.Url" target="_blank">
                                                    <Blazorise.Tooltip
                                                        Inline="true"
                                                        Text="This link will never be played as there is a shorter video link available.">
                                                        <span style="color: orange">✘ @videoLink.Duration.ToString("mm\\:ss")</span>
                                                    </Blazorise.Tooltip>
                                                </a>
                                            }

                                            @if (true)
                                            {
                                                string iconSrc;
                                                switch (videoLink.Type)
                                                {
                                                    case SongLinkType.Catbox:
                                                        iconSrc = "assets/favicon/catbox.png";
                                                        break;
                                                    case SongLinkType.Self:
                                                        iconSrc = "favicon.ico";
                                                        break;
                                                    default:
                                                        continue;
                                                }

                                                <img width="16px" height="16px"
                                                     src="@iconSrc" alt="host"
                                                     style="margin-left: 7px; margin-right: 1px; scale: 1.2;">
                                            }

                                            @if (!string.IsNullOrEmpty(@videoLink.SubmittedBy))
                                            {
                                                @if (isDebugMode && isAdmin)
                                                {
                                                    <SetSubmittedByComponent Url="@videoLink.Url" SubmittedBy="@videoLink.SubmittedBy"></SetSubmittedByComponent>
                                                }
                                                else
                                                {
                                                    <span> by @videoLink.SubmittedBy</span>
                                                }
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span style="color: red">✘</span>
                            }
                        </div>
                        <div>
                            Sound links:
                            @if (hasSound)
                            {
                                var soundLinks = songFileLinks.Where(x => !x.IsVideo);
                                <ul class="songInfoCardSongLinksSoundLinks">
                                    @foreach (SongLink soundLink in soundLinks)
                                    {
                                        <li class="songInfoCardSongLinksSoundLink">
                                            @if (hasDeleteSongLinkPerms)
                                            {
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteSongLink(song.Id, soundLink.Url))">🗑</span>
                                            }

                                            @if (soundLink.AnalysisRaw != null)
                                            {
                                                string analysisColor = soundLink.AnalysisRaw.Warnings.Any() ? "red" : "green";
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px; color: @analysisColor" @onclick="@(async () => await OnclickAnalysis(soundLink))">?</span>
                                            }

                                            @if (soundLink.LastUnhandledReport != null)
                                            {
                                                var r = soundLink.LastUnhandledReport;
                                                string tooltipText = $"{r.submitted_by} at {r.submitted_on:s} <br/> {r.report_kind.GetDisplayName()} <br/> {r.note_user}";
                                                <Blazorise.Tooltip
                                                    Inline="true"
                                                    Text="@tooltipText">
                                                    <span style="margin-right: 4px;">⚠️</span>
                                                </Blazorise.Tooltip>
                                            }

                                            @if (validUrls.Contains(soundLink.Url))
                                            {
                                                <a href="@soundLink.Url" target="_blank">
                                                    <span style="color: green">✓ @soundLink.Duration.ToString("mm\\:ss")</span>
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@soundLink.Url" target="_blank">
                                                    <Blazorise.Tooltip
                                                        Inline="true"
                                                        Text="This link will never be played as either there is a shorter sound link available, or the duration difference between it and the valid video link exceeds the maximum duration tolerance limit of 17 seconds.">
                                                        <span style="color: orange">✘ @soundLink.Duration.ToString("mm\\:ss")</span>
                                                    </Blazorise.Tooltip>
                                                </a>
                                            }

                                            @if (true)
                                            {
                                                string iconSrc;
                                                switch (soundLink.Type)
                                                {
                                                    case SongLinkType.Catbox:
                                                        iconSrc = "assets/favicon/catbox.png";
                                                        break;
                                                    case SongLinkType.Self:
                                                        iconSrc = "favicon.ico";
                                                        break;
                                                    default:
                                                        continue;
                                                }

                                                <img width="16px" height="16px"
                                                     src="@iconSrc" alt="host"
                                                     style="margin-left: 7px; margin-right: 1px; scale: 1.2;">
                                            }

                                            @if (!string.IsNullOrEmpty(soundLink.SubmittedBy))
                                            {
                                                @if (isDebugMode && isAdmin)
                                                {
                                                    <SetSubmittedByComponent Url="@soundLink.Url" SubmittedBy="@soundLink.SubmittedBy"></SetSubmittedByComponent>
                                                }
                                                else
                                                {
                                                    <span> by @soundLink.SubmittedBy</span>
                                                }
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span style="color: red">✘</span>
                            }
                        </div>

                        @if (IsLibraryPage)
                        {
                            @if (ClientState.ServerStats.IsServerReadOnly)
                            {
                                <span>Server is in read-only mode.</span>
                            }
                            else if (ClientState.ServerStats.IsSubmissionDisabled)
                            {
                                <span>Submissions are currently disabled.</span>
                            }
                            else
                            {
                                if (hasImportSongLinkPerms)
                                {
                                    @if (song.Sources.Any(x => x.SongTypes.Any(y => y == SongSourceSongType.BGM)))
                                    {
                                        <span>Use the batch uploader to upload BGM.</span>
                                    }
                                    else
                                    {
                                        @if (hasVideo && hasSound)
                                        {
                                            <span>This song already has links of both types. Please only submit a new link if it's better than the current ones.</span>
                                        }

                                  @*  <EditForm Model="@_addSongLinkModel[song.Id]" OnValidSubmit="@(() => SubmitSongUrl(song.Id, _addSongLinkModel[song.Id].Url))">
                                        <DataAnnotationsValidator/>

                                        <div style="padding: 5px">
                                            <label for="@song.Id">Add link: </label>
                                            <InputText id="@song.Id" type="text" @bind-Value="_addSongLinkModel[song.Id].Url"/>
                                            <ValidationMessage For="@(() => _addSongLinkModel[song.Id].Url)"/>
                                        </div>
                                        <input style="margin-top: 5px" type="submit" class="songInfoCardSongLinksUploadButton btn btn-primary" value="Submit" disabled="@(ClientState.Session == null || !hasImportSongLinkPerms)"/>
                                    </EditForm> *@

                                        <UploadComponent mId="@song.Id" ParentStateHasChangedCallback="@CallStateHasChanged"></UploadComponent>
                                    }

                                    if (song.DataSource is DataSourceKind.EMQ or DataSourceKind.VNDB)
                                    {
                                        // todo perms
                                        if (hasImportSongLinkPerms)
                                        {
                                            <EditSongWrapperComponent Song="song" IsNew="false"></EditSongWrapperComponent>
                                        }
                                    }
                                }
                                // todo editq
                                @if (ReviewQueueComponent.CurrentPendingRQsMIds.TryGetValue(song.Id, out int rqId))
                                {
                                    <br/>
                                    <span style="color: red">Pending in the review queue: @rqId</span>
                                    <br/>
                                }
                            }
                        }

                        @if (BatchUploaderCallbacks != null && BatchUploaderCallbacks.Any() && hasImportSongLinkPerms)
                        {
                            <br/>
                            @if (hasVideo && hasSound)
                            {
                                <span>This song already has links of both types. Please only submit a new link if it's better than the current ones.</span>
                            }

                            <button type="button"
                                    class="btn btn-primary"
                                    @onclick="@(async () => await BatchUploaderCallbacks?[song.Id].Invoke()!)">
                                Choose and upload
                            </button>
                        }
                    </div>

                </div>
            }
        }
    }

    @if (!CurrentSongs.Any())
    {
        @NoSongsText
    }

</div>
