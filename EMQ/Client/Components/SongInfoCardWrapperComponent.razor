@using EMQ.Shared.Quiz.Entities.Concrete
@using EMQ.Shared.Core
@using EMQ.Client.Pages
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core.SharedDbEntities
@using EMQ.Shared.Library.Entities.Concrete
@inject HttpClient _client
@inject IJSRuntime _jsRuntime

<ReviewComponent @ref="_reviewComponent" CurrentRQs="@(CurrentRQs)" ParentStateHasChangedCallback="@CallStateHasChanged"/>
<ReviewEditComponent @ref="_reviewEditComponent" CurrentEQs="@(CurrentEQs)" ParentStateHasChangedCallback="@CallStateHasChanged"/>
<MusicCommentComponent @ref="_musicCommentComponent" Song="@CurrentSong" ParentStateHasChangedCallback="@CallStateHasChanged" />
<MusicCollectionComponent @ref="_musicCollectionComponent" Song="@CurrentSong" ParentStateHasChangedCallback="@CallStateHasChanged" />

@{
    bool isDebugMode = ClientState.Preferences.DebugMode;
    bool hasDeleteSongLinkPerms = ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session, PermissionKind.DeleteSongLink);
}

@if (IsLibraryPage)
{
    <span style="margin: 5px">Count: @VisibleSongsCount</span>
    <br>

    @if (false && isDebugMode && ClientUtils.HasAdminPerms())
    {
        <textarea id="textarea_batchSetSubmittedBy"
                         rows="1" cols="20" maxlength="16" placeholder=""
                         @bind="_batchSetSubmittedByText"></textarea>
        <button @onclick="BatchSetSubmittedBy">Batch set submitted_by</button>
    }
}

@if (IsLibraryPage && VisibleSongsCount > 0)
{
    <details style="margin: 5px;">
        <summary>Uploaders</summary>
        <table style="max-width: 350px">
            <tr>
                <th>#</th>
                <th>Username</th>
                <th>Upload count</th>
            </tr>
            @{
                int i = 1;

                Dictionary<string, int> uploaders = new();
                foreach (Song currentSong in CurrentSongs)
                {
                    foreach (SongLink currentSongLink in currentSong.Links.Where(x => x.Type == SongLinkType.Self))
                    {
                        string key = currentSongLink.SubmittedBy!.ToLowerInvariant();
                        if (!uploaders.TryGetValue(key, out _))
                        {
                            uploaders[key] = 0;
                        }

                        uploaders[key] += 1;
                    }
                }

                uploaders = uploaders.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            }
            @foreach ((string username, int count) in uploaders)
            {
                bool isRobot = username == Constants.RobotNameLower;
                <tr>
                    <td>@i</td>
                    <td>
                        @if (isRobot)
                        {
                            <a class="link-primary" href="https://vndb.org/c49124" target="_blank">
                                <span>@Constants.RobotName</span>
                            </a>
                        }
                        else
                        {
                            @username
                        }
                    </td>
                    <td>
                        <b>@count</b>
                    </td>
                </tr>
                i += 1;
            }
        </table>
    </details>
}

<div class="songs d-flex flex-row flex-wrap" style="max-width: 78vw;">
@{
    List<string> lastUrls = new();
    bool isRedBorder = false;
}
    @foreach (Song song in CurrentSongs)
    {
        @if (true)
        {
            var songFileLinks = song.Links.Where(x => x.IsFileLink).ToList();
            bool hasVideo = songFileLinks.Any(x => x.IsVideo);
            bool hasSound = songFileLinks.Any(x => !x.IsVideo);

            @if (true)
            {
                var validUrls = SongLink.FilterSongLinks(songFileLinks).Select(x => x.Url).ToList();

                List<string> urls = song.Sources.Select(x => x.Links.First().Url).ToList();
                if (!lastUrls.Any(x=> urls.Contains(x)))
                {
                    isRedBorder = !isRedBorder;
                    lastUrls = urls;
                }

                string border = isRedBorder ? "1px solid rgba(0, 191, 255, 0.7)": "1px solid rgba(178, 34, 34, 0.7)";

                <div class="song card" style="margin: 16px; width: 330px; min-height:200px; border: @border;" @key="@song.Id">
                    <SongInfoCardComponent Song="@song"/>
                    <div class="songInfoCardSongLinks" style="padding: 16px">

                    <span style="float: right; cursor: pointer;" title="History"
                          @onclick="@(async () => await OnclickEntityHistory(song.Id))">
                        ‚ü≤
                    </span>

                    <span style="float: right; cursor: pointer; margin-right: 10px;" title="Comments"
                          @onclick="@(async () => await OnclickSongComments(song))">
                        <span style="margin-right: 2px;">@song.CommentCount</span>
                        üí¨
                    </span>

                    <span style="float: right; cursor: pointer; margin-right: 10px;" title="Collections"
                          @onclick="@(async () => await OnclickSongCollections(song))">
                        <span style="margin-right: 2px;">@song.CollectionCount</span>
                        üóÉ
                    </span>

                    @if (ClientState.ResGetCollectionContainers.CollectionContainers.Any(x => x.Collection.entity_kind == EntityKind.Song))
                    {
                        <br/>
                        <div>
                            @{
                                CollectionContainer? selectedContainer =
                                    ClientState.ResGetCollectionContainers.CollectionContainers
                                        .FirstOrDefault(x => x.Collection.id == ClientState.SelectedCollectionId && x.Collection.entity_kind == EntityKind.Song);
                                bool isAdded = selectedContainer?.CollectionEntities.Any(x => x.entity_id == song.Id) ?? false;
                            }

                            @if (selectedContainer != null)
                            {
                                @if (isAdded)
                                {
                                    <button class="btn btn-danger"
                                            @onclick="@(() => SendModifyCollectionEntityReq(selectedContainer.Collection.id, song.Id, false))">-</button>
                                }
                                else
                                {
                                    <button class="btn btn-success"
                                            @onclick="@(() => SendModifyCollectionEntityReq(selectedContainer.Collection.id, song.Id, true))">+</button>
                                }
                            }

                            <select @bind="@ClientState.SelectedCollectionId" style="max-width: 250px; margin-left: 4px;">
                                @foreach (CollectionContainer container in
                                    ClientState.ResGetCollectionContainers.CollectionContainers.Where(x => x.Collection.entity_kind == EntityKind.Song))
                                {
                                    <option value="@container.Collection.id">@container.Collection.name</option>
                                }
                            </select>
                        </div>
                    }

                    <div>
                            Video links:
                            @if (hasVideo)
                            {
                                var videoLinks = songFileLinks.Where(x => x.IsVideo);
                                <ul class="songInfoCardSongLinksVideoLinks">
                                    @foreach (SongLink videoLink in videoLinks)
                                    {
                                        <li class="songInfoCardSongLinksVideoLink">
                                            @if (hasDeleteSongLinkPerms)
                                            {
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteSongLink(song.Id, videoLink.Url))">üóë</span>
                                            }

                                            @if (videoLink.AnalysisRaw != null)
                                            {
                                                string analysisColor = videoLink.AnalysisRaw.Warnings.Any() ? "red" : videoLink.Lineage == SongLinkLineage.Unknown && videoLink.ShouldCheckLineage() ? "orange" : "green";
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px; color: @analysisColor" @onclick="@(async () => await OnclickAnalysis(song.Id, videoLink))">?</span>
                                            }

                                            @if (videoLink.LastUnhandledReport != null)
                                            {
                                                var r = videoLink.LastUnhandledReport;
                                                string tooltipText = $"{r.submitted_by} at {r.submitted_on:s} <br/> {r.report_kind.GetDisplayName()} <br/> {r.note_user}";
                                                <Blazorise.Tooltip
                                                    Inline="true"
                                                    Text="@tooltipText">
                                                    <span style="margin-right: 4px;">‚ö†Ô∏è</span>
                                                </Blazorise.Tooltip>
                                            }

                                            @if (validUrls.Contains(videoLink.Url))
                                            {
                                                <a href="@videoLink.Url" target="_blank">
                                                    <span style="color: green">‚úì @videoLink.Duration.ToString("mm\\:ss")</span>
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@videoLink.Url" target="_blank">
                                                    <Blazorise.Tooltip
                                                        Inline="true"
                                                        Text="This link will never be played as there is a shorter video link available, or it is non-canon.">
                                                        <span style="color: orange">‚úò @videoLink.Duration.ToString("mm\\:ss")</span>
                                                    </Blazorise.Tooltip>
                                                </a>
                                            }

                                            @if (true)
                                            {
                                                string iconSrc;
                                                switch (videoLink.Type)
                                                {
                                                    case SongLinkType.Catbox:
                                                        iconSrc = "assets/favicon/catbox.png";
                                                        break;
                                                    case SongLinkType.Self:
                                                        iconSrc = "favicon.ico";
                                                        break;
                                                    default:
                                                        continue;
                                                }

                                                <img width="16px" height="16px"
                                                     src="@iconSrc" alt="host"
                                                     style="margin-left: 7px; margin-right: 1px; scale: 1.2;">
                                            }

                                            @if (!string.IsNullOrEmpty(@videoLink.SubmittedBy))
                                            {
                                                @if (isDebugMode && ClientUtils.HasAdminPerms())
                                                {
                                                    <SetSubmittedByComponent Url="@videoLink.Url" SubmittedBy="@videoLink.SubmittedBy"></SetSubmittedByComponent>
                                                }
                                                else
                                                {
                                                    <span> by @videoLink.SubmittedBy</span>
                                                }
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span style="color: red">‚úò</span>
                            }
                        </div>
                        <div>
                            Sound links:
                            @if (hasSound)
                            {
                                var soundLinks = songFileLinks.Where(x => !x.IsVideo);
                                <ul class="songInfoCardSongLinksSoundLinks">
                                    @foreach (SongLink soundLink in soundLinks)
                                    {
                                        <li class="songInfoCardSongLinksSoundLink">
                                            @if (hasDeleteSongLinkPerms)
                                            {
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px;" @onclick="@(async () => await DeleteSongLink(song.Id, soundLink.Url))">üóë</span>
                                            }

                                            @if (soundLink.AnalysisRaw != null)
                                            {
                                                string analysisColor = soundLink.AnalysisRaw.Warnings.Any() ? "red" : soundLink.Lineage == SongLinkLineage.Unknown && soundLink.ShouldCheckLineage() ? "orange" : "green";
                                                <span style="display: inline-block; cursor: pointer; margin-right: 4px; color: @analysisColor" @onclick="@(async () => await OnclickAnalysis(song.Id, soundLink))">?</span>
                                            }

                                            @if (soundLink.LastUnhandledReport != null)
                                            {
                                                var r = soundLink.LastUnhandledReport;
                                                string tooltipText = $"{r.submitted_by} at {r.submitted_on:s} <br/> {r.report_kind.GetDisplayName()} <br/> {r.note_user}";
                                                <Blazorise.Tooltip
                                                    Inline="true"
                                                    Text="@tooltipText">
                                                    <span style="margin-right: 4px;">‚ö†Ô∏è</span>
                                                </Blazorise.Tooltip>
                                            }

                                            @if (validUrls.Contains(soundLink.Url))
                                            {
                                                <a href="@soundLink.Url" target="_blank">
                                                    <span style="color: green">‚úì @soundLink.Duration.ToString("mm\\:ss")</span>
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@soundLink.Url" target="_blank">
                                                    <Blazorise.Tooltip
                                                        Inline="true"
                                                        Text="This link will never be played as either there is a shorter sound link available, or the duration difference between it and the valid video link exceeds the maximum duration tolerance limit of 17 seconds.">
                                                        <span style="color: orange">‚úò @soundLink.Duration.ToString("mm\\:ss")</span>
                                                    </Blazorise.Tooltip>
                                                </a>
                                            }

                                            @if (true)
                                            {
                                                string iconSrc;
                                                switch (soundLink.Type)
                                                {
                                                    case SongLinkType.Catbox:
                                                        iconSrc = "assets/favicon/catbox.png";
                                                        break;
                                                    case SongLinkType.Self:
                                                        iconSrc = "favicon.ico";
                                                        break;
                                                    default:
                                                        continue;
                                                }

                                                <img width="16px" height="16px"
                                                     src="@iconSrc" alt="host"
                                                     style="margin-left: 7px; margin-right: 1px; scale: 1.2;">
                                            }

                                            @if (!string.IsNullOrEmpty(soundLink.SubmittedBy))
                                            {
                                                @if (isDebugMode && ClientUtils.HasAdminPerms())
                                                {
                                                    <SetSubmittedByComponent Url="@soundLink.Url" SubmittedBy="@soundLink.SubmittedBy"></SetSubmittedByComponent>
                                                }
                                                else
                                                {
                                                    <span> by @soundLink.SubmittedBy</span>
                                                }
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span style="color: red">‚úò</span>
                            }
                        </div>

                        @if (IsLibraryPage)
                        {
                            @if (ClientState.ServerStats.Config.IsServerReadOnly)
                            {
                                <span>Server is in read-only mode.</span>
                            }
                            else if (ClientState.ServerStats.Config.IsSubmissionDisabled)
                            {
                                <span>Submissions are currently disabled.</span>
                            }
                            else if (!ClientUtils.HasUploadPerms())
                            {
                                @if (AuthStuff.HasPermission(ClientState.Session, PermissionKind.User))
                                {
                                    <span>You do not have upload permissions.</span>
                                }
                            }
                            else
                            {
                                bool isInRQ = ClientState.ResFindQueueItemsWithPendingChanges.RQs.TryGetValue(song.Id, out int rqId);
                                @if (isInRQ)
                                {
                                    <br/>
                                    <span style="color: red">Pending in the review queue: @rqId</span>
                                    <br/>
                                }

                                bool isInEQ = ClientState.ResFindQueueItemsWithPendingChanges.EQs.TryGetValue(song.Id, out int eqId);
                                @if (isInEQ)
                                {
                                    <br/>
                                    <span style="color: red">Pending in the edit queue: @eqId</span>
                                    <br/>
                                }

                                if (!isInEQ && ClientUtils.HasUploadPerms() && (!song.Attributes.HasFlag(SongAttributes.Locked) || ClientUtils.HasModPerms()))
                                {
                                    @if (song.DataSource == DataSourceKind.MusicBrainz && song.Sources.Any(x => x.SongTypes.Any(y => y == SongSourceSongType.BGM)))
                                    {
                                        <span>Use the batch uploader to upload BGM.</span>
                                    }
                                    else
                                    {
                                        @if (hasVideo && hasSound)
                                        {
                                            <span>This song already has links of both types. Please only submit a new link if it's better than the current ones.</span>
                                        }

                                        <UploadComponent mId="@song.Id" ParentStateHasChangedCallback="@CallStateHasChanged"></UploadComponent>
                                    }
                                }

                                if (!isInRQ && !isInEQ)
                                {
                                    if (ClientUtils.HasEditPerms() && (!song.Attributes.HasFlag(SongAttributes.Locked) || ClientUtils.HasModPerms()))
                                    {
                                        <EditSongWrapperComponent Song="song" IsNew="false"></EditSongWrapperComponent>
                                    }
                                }
                            }
                        }

                    @if (BatchUploaderCallbacks != null && BatchUploaderCallbacks.Any() && ClientUtils.HasUploadPerms())
                    {
                        <br/>
                        @if (hasVideo && hasSound)
                        {
                            <span>This song already has links of both types. Please only submit a new link if it's better than the current ones.</span>
                        }

                        <button type="button"
                                class="btn btn-primary"
                                @onclick="@(async () => await BatchUploaderCallbacks?[song.Id].Invoke()!)">
                            Choose and upload
                        </button>
                    }
                    </div>

                </div>
            }
        }
    }

    @if (!CurrentSongs.Any())
    {
        @NoSongsText
    }

</div>
