@using Blazorise.Charts
@using Blazorise
@using EMQ.Shared.Auth.Entities.Concrete.Dto.Request
@using EMQ.Shared.Core
@using EMQ.Shared.Quiz.Entities.Concrete
@using System.Globalization
@inject HttpClient _client

@* <button type="button" class="btn btn-primary" @onclick="@(async () => await HandleRedraw())">Fetch</button> *@

@if (ServerActivityStats.LastMugyuOrNeko != default)
{
    <p>Hours since last mugyu or neko: @(((DateTime.UtcNow - ServerActivityStats.LastMugyuOrNeko).TotalHours).ToString("F1", CultureInfo.InvariantCulture))</p>
}

<h4>Daily players (at least one song played)</h4>
<Chart @ref="_barChart" Type="ChartType.Bar" TItem="int" Options="@Options"/>

@code {
    private Chart<int> _barChart = null!;

    private ServerActivityStats ServerActivityStats { get; set; } = new();

    private List<string> _backgroundColors = new() { ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 99, 132, 0.2f), };

    private List<string> _borderColors = new() { ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 99, 132, 1f), };

    private ChartOptions Options { get; set; } = new BarChartOptions
    {
        Scales = new ChartScales
        {
            X = new ChartAxis { Stacked = true },
            Y = new ChartAxis { Stacked = true },
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    private async Task HandleRedraw()
    {
        await _barChart.Clear();

        // todo this needs to be moved outside
        var req = new ReqGetServerActivityStats(DateTime.UtcNow.AddDays(-90), DateTime.UtcNow.AddDays(1));
        var res = await _client.PostAsJsonAsync("Auth/GetServerActivityStats", req);
        if (res.IsSuccessStatusCode)
        {
            var content = await res.Content.ReadFromJsonAsync<ServerActivityStats>();
            ServerActivityStats = content!;
            StateHasChanged();
        }

        await _barChart.AddLabelsDatasetsAndUpdate(ServerActivityStats.DailyPlayers.Keys, GetBarChartDataset(0), GetBarChartDataset(1));
    }

    private BarChartDataset<int> GetBarChartDataset(int i)
    {
        string label;
        List<int> data;
        switch (i)
        {
            case 0:
                label = "Users";
                data = ServerActivityStats.DailyPlayers.Values.Select(x => x.Users).ToList();
                break;
            case 1:
                label = "Guests";
                data = ServerActivityStats.DailyPlayers.Values.Select(x => x.Guests).ToList();
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(i));
        }

        return new BarChartDataset<int>
        {
            Label = label,
            Data = data,
            BackgroundColor = _backgroundColors[i],
            BorderColor = _borderColors[i],
            BorderWidth = 1,
        };
    }

}
