@using EMQ.Shared.Auth.Entities.Concrete.Dto.Response
@using EMQ.Shared.Quiz.Entities.Concrete
@inject HttpClient _client
@inject NavigationManager _navigation

<button type="button" class="btn btn-primary" @onclick="@(() => _navigation.NavigateTo($"{_navigation.BaseUri}eu/{UserId - 1}"))">Prev</button>
<button type="button" class="btn btn-primary" @onclick="@(() => _navigation.NavigateTo($"{_navigation.BaseUri}eu/{UserId + 1}"))">Next</button>

<h3>@PublicUserInfo.Username</h3>

@{
    Avatar avatar = (ClientState.Session?.Player.Preferences.ForceDefaultAvatar ?? false) ? Avatar.DefaultAvatar : PublicUserInfo.Avatar;
}
<img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(avatar, PlayerStatus.Default)" alt="Avatar">
<br/>

<span>Role: @PublicUserInfo.UserRoleKind.ToString()</span>
<br/>

<span>Account creation date: @PublicUserInfo.CreatedAt.ToString("yyyy-MM-dd 'at' HH:mm")</span>
<br/>

<ul>
    <li>Song count: @PublicUserInfo.SongCount</li>
    <li>Guess rate: @PublicUserInfo.GuessRate%</li>
</ul>
<br/>

@code {

    [Parameter]
    public int UserId { get; set; }

    private ResGetPublicUserInfo PublicUserInfo { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage res =
            await _client.PostAsJsonAsync("Auth/GetPublicUserInfo", UserId);
        if (res.IsSuccessStatusCode)
        {
            var content = (await res.Content.ReadFromJsonAsync<ResGetPublicUserInfo>())!;
            PublicUserInfo = content;
        }
    }

}
