@using EMQ.Shared.Auth.Entities.Concrete.Dto.Response
@using EMQ.Shared.Core.SharedDbEntities
@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Globalization
@using EMQ.Shared.Auth.Entities.Concrete
@using EMQ.Shared.Core
@inject HttpClient _client
@inject NavigationManager _navigation
@inject ClientUtils _clientUtils
@inject IJSRuntime _jsRuntime

<a class="link link-primary" href="/eu/all">Browse users</a>
<br/>
<button type="button" class="btn btn-primary" @onclick="@(() => _navigation.NavigateTo($"{_navigation.BaseUri}eu{UserId - 1}"))">Prev</button>
<button type="button" class="btn btn-primary" @onclick="@(() => _navigation.NavigateTo($"{_navigation.BaseUri}eu{UserId + 1}"))">Next</button>

@if (PublicUserInfo != null)
{
    <h3>@PublicUserInfo.Username</h3>

    Avatar avatar = ClientState.Preferences.ForceDefaultAvatar ? Avatar.DefaultAvatar : PublicUserInfo.Avatar;
    <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(avatar, PlayerStatus.Default)" alt="Avatar">
    <br/>

    <span>Role: @PublicUserInfo.UserRoleKind.ToString()</span>
    <br/>

    <span>Account creation date: @PublicUserInfo.CreatedAt.ToString("yyyy-MM-dd 'at' HH:mm")</span>
    <br/>

    <ul>
        <li>Song count: @PublicUserInfo.SongCount (GR: @PublicUserInfo.GuessRate%)</li>
        <ul>
            @foreach ((SongSourceSongType key, var value) in PublicUserInfo.SSST)
            {
                <li>@key: @value.Total (GR: @value.Percentage%)</li>
            }
        </ul>
    </ul>
    <br/>

    // todo roles
    @if (ClientState.Session != null && AuthStuff.HasPermission(ClientState.Session, PermissionKind.EditUser))
    {
        <details>
            <summary>Edit user</summary>

            <label>
                <input type="checkbox" class="form-check-input"
                       @bind:get="@PublicUserInfo.IgnMv"
                       @bind:set="@(new Func<bool, Task>(async value => { PublicUserInfo.IgnMv = value; await SendEditUserReq(); }))"/>
                Ignore song votes
            </label>
            <br/>

            <details open>
                <summary>Included permissions</summary>
                <div style="columns: 4">
                    @foreach (var key in Enum.GetValues<PermissionKind>())
                    {
                        if (key is not PermissionKind.None)
                        {
                            string id = $"checkbox-EditUserIncludedPermissions-{UserId}-{key}";
                            <input type="checkbox" id="@id" class="form-check-input"
                                   @bind:get="@PublicUserInfo.IncludedPermissions.Contains(key)"
                                   @bind:set="@(new Func<bool, Task>(async value => await OnPermCheckboxClick(value, key, true)))"
                                   @bind:event="oninput"
                                   style="margin: 5px"/>
                            <label for="@id">@key.ToString()</label>
                            <br/>
                        }
                    }
                </div>
            </details>

            <details open>
                <summary>Excluded permissions</summary>
                <div style="columns: 4">
                    @foreach (var key in Enum.GetValues<PermissionKind>())
                    {
                        if (key is not PermissionKind.None)
                        {
                            string id = $"checkbox-EditUserExcludedPermissions-{UserId}-{key}";
                            <input type="checkbox" id="@id" class="form-check-input"
                                   @bind:get="@PublicUserInfo.ExcludedPermissions.Contains(key)"
                                   @bind:set="@(new Func<bool, Task>(async value => await OnPermCheckboxClick(value, key, false)))"
                                   @bind:event="oninput"
                                   style="margin: 5px"/>
                            <label for="@id">@key.ToString()</label>
                            <br/>
                        }
                    }
                </div>
            </details>
        </details>
    }
}

@if (UserMusicVotes != null && UserMusicVotes.Any())
{
  @* can't seem to stop the chart from lazy-loading so might as well set this to LazyLoad as well *@
    <Blazorise.Tabs @bind-SelectedTab="@SelectedTabMusicVotes" RenderMode="Blazorise.TabsRenderMode.LazyLoad">
        <Items>
            <Blazorise.Tab Name="TabAll">All</Blazorise.Tab>
            <Blazorise.Tab Name="TabVocals">Vocals</Blazorise.Tab>
            <Blazorise.Tab Name="TabBGM">BGM</Blazorise.Tab>
        </Items>
        <Content>
            <Blazorise.TabPanel Name="TabAll">
                <UserProfileMusicVotesComponent UserMusicVotes="UserMusicVotes" IsOwnPage="IsOwnPage" ParentStateHasChangedCallback="CallStateHasChanged"></UserProfileMusicVotesComponent>
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabVocals">
                <UserProfileMusicVotesComponent UserMusicVotes="UserMusicVotes?.Where(x => !x.IsBGM)" IsOwnPage="IsOwnPage" ParentStateHasChangedCallback="CallStateHasChanged"></UserProfileMusicVotesComponent>
            </Blazorise.TabPanel>
            <Blazorise.TabPanel Name="TabBGM">
                <UserProfileMusicVotesComponent UserMusicVotes="UserMusicVotes?.Where(x => x.IsBGM)" IsOwnPage="IsOwnPage" ParentStateHasChangedCallback="CallStateHasChanged"></UserProfileMusicVotesComponent>
            </Blazorise.TabPanel>
        </Content>
    </Blazorise.Tabs>
}

@if (MostPlayedSongs != null)
{
    <h4>Most played songs</h4>

    <div>
        <Paginator State="@_paginationMostPlayedSongs"/>
    </div>
    <div class="grid" tabindex="-1">
        <QuickGrid Items="@MostPlayedSongs" Pagination="@_paginationMostPlayedSongs">
            <TemplateColumn Title="Song" Sortable="true" SortBy="@(GridSort<ResMostPlayedSongs>.ByAscending(x => x.SongMini.S))">
                @context.SongMini.S
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.Played)" Title="Play count" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
            <TemplateColumn Title="Guess rate" Sortable="true" SortBy="@(GridSort<ResMostPlayedSongs>.ByAscending(x => x.CorrectPercentage))">
                @(Math.Round((double)context.CorrectPercentage, 2))%
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.IntervalDays)" Title="Interval (days)" Sortable="true"/>
        </QuickGrid>
    </div>
    <br/>
}

@if (CommonPlayers != null)
{
    <h4>Most played players</h4>

    <div>
        <Paginator State="@_paginationCommonPlayers"/>
    </div>
    <div class="grid" tabindex="-1">
        <QuickGrid Items="@CommonPlayers" Pagination="@_paginationCommonPlayers">
            <TemplateColumn Title="Username" Sortable="true" SortBy="@(GridSort<ResCommonPlayers>.ByAscending(x => x.UserLite.Username))">
                @if (!context.UserLite.Username.StartsWith("Guest"))
                {
                    string href = $"eu{context.UserLite.Id}";
                    <a href="@href">@context.UserLite.Username</a>
                }
                else
                {
                    @context.UserLite.Username
                }
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.QuizCount)" Title="Quiz count" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
        </QuickGrid>
    </div>
    <br/>
}

@code {

    [Parameter]
    public int UserId { get; set; }

    private ResGetPublicUserInfo? PublicUserInfo { get; set; }

    private IQueryable<ResMostPlayedSongs>? MostPlayedSongs { get; set; }

    private IQueryable<ResCommonPlayers>? CommonPlayers { get; set; }

    private IQueryable<ResUserMusicVotes>? UserMusicVotes { get; set; }

    private readonly PaginationState _paginationMostPlayedSongs = new() { ItemsPerPage = 100 };

    private readonly PaginationState _paginationCommonPlayers = new() { ItemsPerPage = 25 };

    private bool IsOwnPage => ClientState.Session != null && ClientState.Session.Player.Id == UserId;

    public string SelectedTabMusicVotes { get; set; } = "TabVocals";

    protected override async Task OnParametersSetAsync()
    {
        await _clientUtils.TryRestoreSession(); // needs to be here instead of the page otherwise it runs too late
        PublicUserInfo = null;
        MostPlayedSongs = null;
        CommonPlayers = null;
        UserMusicVotes = null;
        StateHasChanged();

        HttpResponseMessage res1 =
            await _client.PostAsJsonAsync("Auth/GetPublicUserInfo", UserId);
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ResGetPublicUserInfo>())!;
            PublicUserInfo = content;
        }

        StateHasChanged();
        HttpResponseMessage res2 = await _client.GetAsync($"Auth/GetPublicUserInfoSongs?userId={UserId}");
        if (res2.IsSuccessStatusCode)
        {
            var content = (await res2.Content.ReadFromJsonAsync<ResGetPublicUserInfoSongs>())!;
            MostPlayedSongs = content.MostPlayedSongs.AsQueryable();
            CommonPlayers = content.CommonPlayers.AsQueryable();
            UserMusicVotes = content.UserMusicVotes.AsQueryable();
        }
    }

    public async Task CallStateHasChanged()
    {
        await Task.Yield();
        StateHasChanged();
    }

    private async Task SendEditUserReq()
    {
        HttpResponseMessage res = await _client.PostAsJsonAsync("Mod/EditUser", PublicUserInfo);
        if (!res.IsSuccessStatusCode)
        {
            await _jsRuntime.InvokeVoidAsync("alert",
                $"Error: {res.StatusCode:D} {res.StatusCode} {await res.Content.ReadAsStringAsync()}");
        }
    }

    private async Task OnPermCheckboxClick(bool value, PermissionKind key, bool isInclude)
    {
        if (value)
        {
            if (isInclude)
            {
                PublicUserInfo!.IncludedPermissions.Add(key);
            }
            else
            {
                PublicUserInfo!.ExcludedPermissions.Add(key);
            }
        }
        else
        {
            if (isInclude)
            {
                PublicUserInfo!.IncludedPermissions.Remove(key);
            }
            else
            {
                PublicUserInfo!.ExcludedPermissions.Remove(key);
            }
        }

        await SendEditUserReq();
    }

}
