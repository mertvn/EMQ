@using EMQ.Shared.Auth.Entities.Concrete.Dto.Response
@using EMQ.Shared.Core.SharedDbEntities
@using EMQ.Shared.Quiz.Entities.Concrete
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Globalization
@inject HttpClient _client
@inject NavigationManager _navigation

<button type="button" class="btn btn-primary" @onclick="@(() => _navigation.NavigateTo($"{_navigation.BaseUri}eu{UserId - 1}"))">Prev</button>
<button type="button" class="btn btn-primary" @onclick="@(() => _navigation.NavigateTo($"{_navigation.BaseUri}eu{UserId + 1}"))">Next</button>

@if (PublicUserInfo != null)
{
    <h3>@PublicUserInfo.Username</h3>

    Avatar avatar = ClientState.Preferences.ForceDefaultAvatar ? Avatar.DefaultAvatar : PublicUserInfo.Avatar;
    <img width="160px" height="160px" src="@Avatar.GetUrlByPlayerState(avatar, PlayerStatus.Default)" alt="Avatar">
    <br/>

    <span>Role: @PublicUserInfo.UserRoleKind.ToString()</span>
    <br/>

    <span>Account creation date: @PublicUserInfo.CreatedAt.ToString("yyyy-MM-dd 'at' HH:mm")</span>
    <br/>

    <ul>
        <li>Song count: @PublicUserInfo.SongCount</li>
        <li>Guess rate: @PublicUserInfo.GuessRate%</li>
    </ul>
    <br/>
}

@if (UserMusicVotes != null && UserMusicVotes.Any())
{
    <h4>Song votes</h4>

    <div style="max-width: 30%; max-height: 30%;">
        <ChartUserMusicVotesComponent UserMusicVotes="UserMusicVotes"/>
    </div>

    <span>@UserMusicVotes.Count() votes total, average @((((float)UserMusicVotes.Average(x => x.MusicVote.vote)! / 10)).ToString("F2", CultureInfo.InvariantCulture))</span>
    <br/>
    <div>
        <Paginator State="@_paginationUserMusicVotes"/>
    </div>
    <div class="grid" tabindex="-1">
        <QuickGrid Items="@UserMusicVotes" Pagination="@_paginationUserMusicVotes">
            <PropertyColumn Property="@(x => x.MusicVote.updated_at)" Title="Vote date" Format="s" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
            @if (!IsOwnPage)
            {
                <TemplateColumn Title="Vote" Sortable="true" SortBy="@(GridSort<ResUserMusicVotes>.ByAscending(x => x.MusicVote.vote))">
                    @(((float)context.MusicVote.vote! / 10).ToString(CultureInfo.InvariantCulture))
                </TemplateColumn>
            }

            <TemplateColumn Title="My vote" Sortable="true" SortBy="@(GridSort<ResUserMusicVotes>.ByAscending(x => GetGridSortMyVote(x.Song.Id)))">
                @{
                    // todo fix desync that happens when you vote on the library page and then go to user profile page
                    _ = ClientState.MusicVotes.TryGetValue(context.Song.Id, out MusicVote? musicVote);
                }

                <div style="margin-right: 5px; display: inline-block;">
                    <MusicVoteComponent Song="context.Song" ParentStateHasChangedCallback="CallStateHasChanged" MusicVote="musicVote"/>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Link">
                @{
                    string? href = ClientUtils.GetPreferredSongLinkUrl(context.Song, ClientState.Preferences.WantsVideo, ClientState.Preferences.LinkHost);
                }

                @if (href != null)
                {
                    <a class="link-primary" href="@href" target="_blank">
                        Link
                    </a>
                }
            </TemplateColumn>
            <TemplateColumn Title="Song" Sortable="true" SortBy="@(GridSort<ResUserMusicVotes>.ByAscending(x => x.Song.ToStringLatin()))">
                @context.Song.ToStringLatin()
            </TemplateColumn>
            <PropertyColumn Property="@(x => Converters.GetSingleTitle(x.Song.Artists.First().Titles, "ja", "en").LatinTitle)" Title="Artist" Sortable="true"/>
        </QuickGrid>
    </div>
    <br/>
}

@if (MostPlayedSongs != null)
{
    <h4>Most played songs</h4>

    <div>
        <Paginator State="@_paginationMostPlayedSongs"/>
    </div>
    <div class="grid" tabindex="-1">
        <QuickGrid Items="@MostPlayedSongs" Pagination="@_paginationMostPlayedSongs">
            <TemplateColumn Title="Song" Sortable="true" SortBy="@(GridSort<ResMostPlayedSongs>.ByAscending(x => x.Song.ToStringLatin()))">
                @context.Song.ToStringLatin()
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.Played)" Title="Play count" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
            <TemplateColumn Title="Guess rate" Sortable="true" SortBy="@(GridSort<ResMostPlayedSongs>.ByAscending(x => x.CorrectPercentage))">
                @(Math.Round((double)context.CorrectPercentage, 2))% (@(context.Correct)/@(context.Played))
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.IntervalDays)" Title="Interval (days)" Sortable="true"/>
        </QuickGrid>
    </div>
    <br/>
}

@if (CommonPlayers != null)
{
    <h4>Most played players</h4>

    <div>
        <Paginator State="@_paginationCommonPlayers"/>
    </div>
    <div class="grid" tabindex="-1">
        <QuickGrid Items="@CommonPlayers" Pagination="@_paginationCommonPlayers">
            <TemplateColumn Title="Username" Sortable="true" SortBy="@(GridSort<ResCommonPlayers>.ByAscending(x => x.UserLite.Username))">
                @if (!context.UserLite.Username.StartsWith("Guest"))
                {
                    string href = $"eu{context.UserLite.Id}";
                    <a href="@href">@context.UserLite.Username</a>
                }
                else
                {
                    @context.UserLite.Username
                }
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.QuizCount)" Title="Quiz count" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
        </QuickGrid>
    </div>
    <br/>
}

@code {

    [Parameter]
    public int UserId { get; set; }

    private ResGetPublicUserInfo? PublicUserInfo { get; set; }

    private IQueryable<ResMostPlayedSongs>? MostPlayedSongs { get; set; }

    private IQueryable<ResCommonPlayers>? CommonPlayers { get; set; }

    private IQueryable<ResUserMusicVotes>? UserMusicVotes { get; set; }

    private readonly PaginationState _paginationMostPlayedSongs = new() { ItemsPerPage = 100 };

    private readonly PaginationState _paginationCommonPlayers = new() { ItemsPerPage = 25 };

    private readonly PaginationState _paginationUserMusicVotes = new() { ItemsPerPage = 50 };

    private bool IsOwnPage => ClientState.Session != null && ClientState.Session.Player.Id == UserId;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage res1 =
            await _client.PostAsJsonAsync("Auth/GetPublicUserInfo", UserId);
        if (res1.IsSuccessStatusCode)
        {
            var content = (await res1.Content.ReadFromJsonAsync<ResGetPublicUserInfo>())!;
            PublicUserInfo = content;
        }
        else
        {
            PublicUserInfo = null;
        }

        HttpResponseMessage res2 =
            await _client.PostAsJsonAsync("Auth/GetPublicUserInfoSongs", UserId);
        if (res2.IsSuccessStatusCode)
        {
            var content = (await res2.Content.ReadFromJsonAsync<ResGetPublicUserInfoSongs>())!;
            MostPlayedSongs = content.MostPlayedSongs.AsQueryable();
            CommonPlayers = content.CommonPlayers.AsQueryable();
            UserMusicVotes = content.UserMusicVotes.AsQueryable();
        }
        else
        {
            MostPlayedSongs = null;
            CommonPlayers = null;
            UserMusicVotes = null;
        }
    }

    public async Task CallStateHasChanged()
    {
        StateHasChanged();
    }

    private short? GetGridSortMyVote(int songId)
    {
        return ClientState.MusicVotes.GetValueOrDefault(songId)?.vote;
    }

}
