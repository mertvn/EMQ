@using EMQ.Client.Components
@using EMQ.Shared.Core
@using System.Threading
@using System.Timers
@using EMQ.Shared.Quiz.Entities.Concrete
@using Timer = System.Timers.Timer
@inherits LayoutComponentBase
@inject NavigationManager _navigation
@inject IJSRuntime _jsRuntime
@inject HttpClient _client

<PageTitle>EMQ</PageTitle>

<div class="page">
    <!--https://getbootstrap.com/docs/5.3/customize/color-modes/#javascript-->
    <div class="nav-item px-3 dropdown" style="padding: 2px; margin: 5px 12px 5px 5px;position: fixed; top: 0; right: 0; text-align: center; z-index: 30;">
        <button class="btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle d-flex align-items-center"
                id="bd-theme"
                type="button"
                aria-expanded="false"
                data-bs-toggle="dropdown"
                data-bs-display="static"
                aria-label="Toggle theme (auto)">
            <span class="ms-2" id="bd-theme-text">Theme</span>
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bd-theme-text">
            <li>
                <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="light" aria-pressed="false">
                    Light
                </button>
            </li>
            <li>
                <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false">
                    Dark
                </button>
            </li>
            @* <li> *@
            @*     <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="wuffles" aria-pressed="true"> *@
            @*         Wuffles *@
            @*     </button> *@
            @* </li> *@
            <li>
                <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="auto" aria-pressed="true">
                    Auto
                </button>
            </li>
        </ul>
    </div>

    @if (ClientState.Countdown.TotalSeconds > 0)
    {
        <div class="countdownInfo" style="padding: 2px; margin: 5px 12px 5px 5px; position: fixed; top: 10%; right: 37%; text-align: center;">
            <span> @ClientState.ServerStats.CountdownInfo.Message</span>
            <br/>
            <span> @(ClientState.Countdown.ToString(@"mm\:ss"))</span>
        </div>
    }

    @{
        string lastSegment = new Uri(_navigation.Uri).Segments.Last();
    }
    @if (SidebarPages.Contains(lastSegment) || lastSegment.StartsWith("e"))
    {
        <div class="sidebar" style="z-index: 30">
            <NavMenu/>
        </div>
    }

    <PlayerPreferencesComponent @ref="_playerPreferencesComponent"/>
    <button type="button" id="buttonPreferences" class="btn btn-primary"
            style="padding: 2px; margin: 5px; position: fixed; bottom: 0; right: 0; text-align: center; height: 40px;"
            @onclick="@(() => _playerPreferencesComponent!.OnclickButtonPreferences())">
        <span style="padding: 5px">Preferences</span>
    </button>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    public List<string> SidebarPages { get; } = new()
    {
        "/", "HotelPage", "LibraryPage", "ErodlePage", "ModPage", "ImportPage", "RegisterPage", "ForgottenPasswordPage", "ServerStatsPage",
    };

    private PlayerPreferencesComponent? _playerPreferencesComponent;

    private Timer Timer { get; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetServerStats(null, null!);
            Timer.Interval = TimeSpan.FromSeconds(30).TotalMilliseconds;
            Timer.Elapsed += GetServerStats;
            Timer.AutoReset = true;
            Timer.Start();
        }

        if (ClientState.ServerStats.CountdownInfo.DateTime >= DateTime.UtcNow)
        {
            const string key = "countdownInfo";
            const int period = 1;
            if (ClientState.Timers.TryGetValue(key, out var timer))
            {
                timer.Dispose();
            }

            ClientState.Countdown = ClientState.ServerStats.CountdownInfo.DateTime - DateTime.UtcNow;
            timer = new PeriodicTimer(TimeSpan.FromSeconds(period));
            ClientState.Timers[key] = timer;
            while (await timer.WaitForNextTickAsync())
            {
                ClientState.Countdown = TimeSpan.FromSeconds(ClientState.Countdown.TotalSeconds - period);
                StateHasChanged();
            }
        }
    }

    private async void GetServerStats(object? sender, ElapsedEventArgs elapsedEventArgs)
    {
        try
        {
            ServerStats? res = await _client.GetFromJsonAsync<ServerStats>("Auth/GetServerStats");
            if (res is not null)
            {
                if (!string.IsNullOrWhiteSpace(ClientState.ServerStats.GitHash) && res.GitHash != ClientState.ServerStats.GitHash)
                {
                    await _jsRuntime.InvokeVoidAsync("alert", "EMQ has been updated. Press OK to refresh.");
                    await _jsRuntime.InvokeVoidAsync("changeLocation", $"{_navigation.BaseUri}");
                    return;
                }

                ClientState.ServerStats = res;
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
